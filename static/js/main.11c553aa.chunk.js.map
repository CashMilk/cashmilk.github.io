{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","hooks/useTheme.ts","state/hooks.ts","contexts/LoadingContext.tsx","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","contexts/ThemeContext.tsx","state/actions.ts","hooks/useRefresh.ts","components/layout/Page.tsx","contexts/Localisation/translationsContext.ts","contexts/StakeContext.tsx","contexts/BlockContext.tsx","config/constants/types.ts","config/constants/contracts.ts","components/layout/Container.tsx","state/markets/index.ts","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","components/BackLoader.tsx","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","tokenPriceVsQuote","decimals","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","eggPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","useTheme","useContext","ThemeContext","isDark","toggleTheme","theme","StyledThemeCopntext","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fastRefresh","fetchPoolsUserDataAsync","pools","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","val","BNB","CAKE","plus","LoadingContext","React","createContext","loading","setLoading","status","LoadingContextProvider","children","useState","Provider","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","CACHE_KEY","ThemeContextProvider","isDarkUserSetting","localStorage","getItem","JSON","parse","setIsDark","prevState","setItem","stringify","dark","light","Page","styled","Container","mediaQueries","sm","lg","defaultTranslationState","translations","setTranslations","TranslationsContext","StakeContext","selectedNFTS","myNFTS","appendCandidate","initMyNFTS","datas","initSelectedNFTs","StakeContextProvider","setSelectedNFTS","setMyNFTS","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","PoolCategory","cake","masterChef","sousChef","riceReferral","lottery","lotteryNFT","mulltiCall","wbnb","busd","milk","market","happycow","airnft","staking","MarketsSlice","sortOrder","field","direction","collectionType","setSortOrder","setCollectionType","abi","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","getCakeAddress","addresses","chainId","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","getMilkAddress","getMarketAddress","getHappyCowAddress","getAirNftAddress","getStakingAddress","sousId","tokenName","stakingTokenName","MILK","stakingTokenAddress","contractAddress","poolCategory","CORE","projectLink","harvest","tokenPerBlock","isFinished","nonBnbPools","poolsConfig","filter","p","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","fetchUserPendingRewards","pendingRewards","pendingMilk","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","findIndex","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","hide","lpSymbol","contracts","isCommunity","BackLoader","Wrapper","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","console","error","langObject","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","PageLoader","Home","lazy","Farms","Stakes","Pools","Ifos","Nft","NotFound","Blindbox","BlindboxDetail","NftMarket","NftMarketDetail","MyNfts","MyNftsDetail","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","position","reverseOrder","toastOptions","duration","fallback","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","markets","marketsReducer","Providers","rpcUrl","getRpcUrl","store","Number","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.11c553aa.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        } else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n\n          // Added by CryptoWhatElse to fix the 9 decimals issue!\n          if(farmConfig.decimals && farmConfig.decimals === 9) {\n            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).div(1e9);\n          }\n        }\n\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      } else { \n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'MilkPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingMilk',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 0 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 4 // MILK-BUSD LP\n  const farm = useFarmFromPid(pid)\n\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\n// export const usePriceCowBusd = (): BigNumber => {\n  // const pid = 2 // COW-BUSD LP\n  // const farm = useFarmFromPid(pid)\n\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n// }\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    \n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}","import React, { useState } from 'react'\n\nconst LoadingContext = React.createContext({ loading: false, setLoading: (status: boolean) => null })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst LoadingContextProvider = ({ children }) => {\n  const [loading, setLoading] = useState(false)\n\n  return <LoadingContext.Provider value={{ loading, setLoading }}>{children}</LoadingContext.Provider>\n}\n\nexport { LoadingContext, LoadingContextProvider }\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 1000000\nconst SLOW_INTERVAL = 6000000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from 'cashcow-uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import React, { useState, useEffect, useRef } from 'react'\n\nconst StakeContext = React.createContext({\n  selectedNFTS: [], \n  myNFTS: [], \n  appendCandidate: (data) => undefined,\n  initMyNFTS: (datas) => undefined,\n  initSelectedNFTs: (datas) => undefined\n})\n\nconst StakeContextProvider = ({ children }) => {\n  const [selectedNFTS, setSelectedNFTS] = useState([])\n  const [myNFTS, setMyNFTS] = useState([])\n\n  const appendCandidate = (data) => {\n    setSelectedNFTS([...selectedNFTS, data])\n  }\n\n  const initSelectedNFTs = (datas) => {\n    setSelectedNFTS(datas)\n  }\n\n  const initMyNFTS = (datas) => {\n    setMyNFTS([...datas])\n  }\n\n  return <StakeContext.Provider value={{selectedNFTS, myNFTS, appendCandidate, initMyNFTS, initSelectedNFTs}}>{children}</StakeContext.Provider>\n}\n\nexport { StakeContext, StakeContextProvider }\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'MILK' = 'MILK',\n  'C98' = 'C98',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\nexport interface Token {\n  symbol: string\n  address?: Address\n  decimals?: number\n  projectLink?: string\n}\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  decimals?: number\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  hide?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  // earningToken: Token\n  // stakingToken: Token\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","export default {\n  cake: {\n    56: '0x75650fcb9b679c1634F6E30d6850b0045f567E8B', // Milk address here\n    97: '', // Milk address here\n  },\n  masterChef: {\n    56: '0xB23e32217e5D3b26EE70fBc0CD95Abd963E9122E', // COW MasterChef address here\n    97: '', // COW MasterChef address here\n  },\n  sousChef: {\n    97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n    56: '0x6ab8463a4185b80905e05a9ff80a2d6b714b9e95',\n  },\n  riceReferral: {\n    97: '',\n    56: '0x12278A53fA54cfc34B89e76Ee0f30f63D446B025',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n  // cow: {\n    // 56: '0x8b6fa031c7d2e60fbfe4e663ec1b8f37df1ba483',\n    // 97: '',\n  // },\n  milk: {    \n    56: '0x75650fcb9b679c1634F6E30d6850b0045f567E8B',\n    97: '',\n  },\n  market: {\n    56: '0x003349CF6Bff2B570577801778C1B5438583150A',\n    97: '',\n  },\n  happycow: {\n    56: '0xb72246063aE6FC7f659C9F5F14A9ce3E5Ea70E92',\n    97: '',\n  },\n  airnft: {\n    56: '0xF5db804101d8600c26598A1Ba465166c33CdAA4b',\n    97: ''\n  },\n  staking: {\n    56: '0x03012E2aA820c6532c7F58e8A9471B6759eb8A89',\n    97: ''\n  }\n}\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 11%;\n    padding-right: 11%;\n  }\n`\n\nexport default Container\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = { \n  sortOrder: {\n    field: 'RecentlyListed',\n    direction: 'desc'\n  },\n  collectionType: {\n    field: 'All',\n    direction: 'asc'\n  },\n }\n\nexport const MarketsSlice = createSlice({\n  name: 'Markets',\n  initialState,\n  reducers: {\n    setSortOrder: (state, action) => {\n      state.sortOrder = action.payload\n    },\n    setCollectionType: (state, action) => {\n      state.collectionType = action.payload\n    },\n  },\n})\n\n// Actions\nexport const { setSortOrder, setCollectionType } = MarketsSlice.actions\n\nexport default MarketsSlice.reducer\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\nexport const getMilkAddress = () => {\n  return addresses.milk[chainId]\n}\nexport const getMarketAddress = () => {\n  return addresses.market[chainId]\n}\nexport const getHappyCowAddress = () => {\n  return addresses.happycow[chainId]\n}\nexport const getAirNftAddress = () => {\n  return addresses.airnft[chainId]\n}\nexport const getStakingAddress = () => {\n  return addresses.staking[chainId]\n}","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n\n  {\n    sousId: 1,\n    tokenName: 'c98',\n    stakingTokenName: QuoteToken.MILK,\n    stakingTokenAddress: '0x75650fcb9b679c1634F6E30d6850b0045f567E8B', // Token MILK\n    contractAddress: {\n      97: '',\n      56: '0x11aB740Ce3D11670625888f5B9aE7D81260330Dd',  // Chef\n    },\n    poolCategory: PoolCategory.CORE,\n    projectLink: 'https://www.coin98.com/',\n    harvest: true,\n    tokenPerBlock: '0.0001',\n    sortOrder: 1,\n    isFinished: true,\n    tokenDecimals: 18,\n  },\n\n  // {\n    // sousId: 2,\n    // tokenName: 'TEN',\n    // stakingTokenName: QuoteToken.MILK,\n    // stakingTokenAddress: '0x75650fcb9b679c1634F6E30d6850b0045f567E8B', // Milk\n    // contractAddress: {\n      // 97: '',\n      // 56: '0x481055C4182B9A5e90d8E7EDe9f65b957dC0Ec22', // Chef\n    // },\n    // poolCategory: PoolCategory.CORE,\n    // projectLink: 'https://www.tenet.farm/',\n    // harvest: true,\n    // tokenPerBlock: '1',\n    // sortOrder: 998,\n    // isFinished: true,\n    // tokenDecimals: 18,\n  // },\n  // {\n    // sousId: 3,\n    // tokenName: 'HELMET',\n    // stakingTokenName: QuoteToken.MILK,\n    // stakingTokenAddress: '0x75650fcb9b679c1634F6E30d6850b0045f567E8B',  // Milk\n    // contractAddress: {\n      // 97: '',\n      // 56: '0x481055C4182B9A5e90d8E7EDe9f65b957dC0Ec22',   // Chef\n    // },\n    // poolCategory: PoolCategory.CORE,\n    // projectLink: 'https://www.helmet.insure/',\n    // harvest: true,\n    // tokenPerBlock: '1',\n    // sortOrder: 999,\n    // isFinished: true,\n    // tokenDecimals: 18,\n  // },\n  // {\n    // sousId: 4,\n    // tokenName: 'C98',\n    // stakingTokenName: QuoteToken.MILK,\n    // stakingTokenAddress: '0x75650fcb9b679c1634F6E30d6850b0045f567E8B',  // Milk\n    // contractAddress: {\n      // 97: '',\n      // 56: '0x8f3b8638d5a766dfa685032f1eC681B1AfC0d047',   // Chef\n    // },\n    // poolCategory: PoolCategory.CORE,\n    // projectLink: 'https://www.helmet.insure/',\n    // harvest: true,\n    // tokenPerBlock: '1',\n    // sortOrder: 999,\n    // isFinished: false,\n    // tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingMilk('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0, // Has zero aloc, we use this just to calculate USD price\n    risk: 3,\n    isTokenOnly: false,\n    hide: false,\n    lpSymbol: 'BNB-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n\n  {\n    pid: 4,\n    risk: 3,\n    isTokenOnly: false,\n    lpSymbol: 'MILK-BUSD LP',\n    lpAddresses: {\n      97: '', // MILK-BUSD LP\n      56: '0xF740BF9C6b85da62f21f0B3F324e4D7e35EB3a08', // MILK-BUSD LP\n    },\n    tokenSymbol: 'MILK-BUSD',\n    tokenAddresses: {\n      97: '', // MILK\n      56: '0x75650fcb9b679c1634F6E30d6850b0045f567E8B', // MILK\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n\n  {\n    pid: 3,\n    risk: 0,\n    decimals: 9,\n    isTokenOnly: true,\n    lpSymbol: 'BUSD',\n    lpAddresses: {\n      97: '',  // COW BUSD LP\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB BUSD LP\n    },\n    tokenSymbol: 'BUSD',\n    tokenAddresses: {\n      97: '', // COW\n      56: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', // BUSD\n    },\n     quoteTokenSymbol: QuoteToken.BUSD,\n     quoteTokenAdresses: contracts.busd,\n  },\n\n  {\n    pid: 1,\n    risk: 2,\n    isTokenOnly: true,\n    lpSymbol: 'MILK',\n    lpAddresses: {\n      97: '', // MILK-BUSD LP\n      56: '0xF740BF9C6b85da62f21f0B3F324e4D7e35EB3a08', // MILK-BUSD LP\n    },\n    tokenSymbol: 'MILK',\n    tokenAddresses: {\n      97: '', // MILK\n      56: '0x75650fcb9b679c1634F6E30d6850b0045f567E8B', // MILK\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n\tisCommunity:false,\n  },\n\n  {\n    pid: 2, // Has zero aloc, we use this just to calculate USD price\n    risk: 3,\t\n    isTokenOnly: true,\n    hide: false,\n    lpSymbol: 'WBNB',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n\n\n  {\n    pid: 5, \n    risk: 4,\n\tdecimals: 18,\n    isTokenOnly: false,\n    lpSymbol: 'MILK-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0x09D81E52b9e3D587b1dC4f34C4A743EFBbf7d154', // MILK-BNB GLP\n    },\n    tokenSymbol: 'MILK-BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0x75650fcb9b679c1634F6E30d6850b0045f567E8B', // MILK\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n]\n\nexport default farms\n","import React from 'react'\nimport styled from 'styled-components'\nimport useTheme from 'hooks/useTheme'\nimport { Spinner } from 'cashcow-uikit'\n\n\nconst BackLoader: React.FC = () => {\n  const { isDark } = useTheme();\n\n  const Wrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    background: ${isDark ? '#00000090' : '#ffffff80'};\n    top: 0;\n    left: 0;\n    backdrop-filter: blur(2px);\n    z-index: 20;\n\n    svg {\n      filter: drop-shadow(2px 4px 6px  ${isDark ? '#ffffff80' : '#00000090'});\n    }\n  `\n\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default BackLoader\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from 'cashcow-uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Orbitron', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n\n    #root {\n      position: relative;\n    }\n  }\n  .ReactModal__Overlay {\n    z-index: 999;\n  }\n  iframe\n  {\n      display: none;\n  }\n  .LinkItemContainer {\n    width: 25%;\n    @media (max-width: 500px) {\n      width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import { MenuEntry } from 'cashcow-uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  // {\n    // label: 'Trade',\n    // icon: 'TradeIcon',\n    // items: [\n      // {\n        // label: 'Exchange',\n        // href: 'https://pancakeswap.finance/swap?outputCurrency=0x75650fcb9b679c1634F6E30d6850b0045f567E8B',\n      // },\n      // {\n        // label: 'Liquidity',\n        // href: 'https://pancakeswap.finance/add/0xe9e7cea3dedca5984780bafc599bd69add087d56/0x75650fcb9b679c1634F6E30d6850b0045f567E8B',\n      // },\n    // ],\n  // },\n\n  {\n    label: 'Earn',\n    icon: 'FarmIcon',\n    items: [\n      {\n        label: 'Farms',\n        href: '/farms',\n      },\n      {\n        label: 'Pools',\n        href: '/milkbar',\n      },\n    ],\n  },\n  {\n    label: 'NFT',\n    icon: 'NftIcon',\n    items: [\n  // {\n    // label: 'Genesis Lands',       \n    // href: '/nft'\n  // },\t\n\t {\n    label: 'Happy Cows',       \n    href: '/blind-box'\n  },\n  {\n    label: 'Marketplace',       \n    href: '/nft-market'\n  },\n  {\n    label: 'My NFTs',    \n    href: '/myNFTs'\n  },\n     \n    ]\n  },  \n  \n  {\n    label: 'NFT Staking',    \n    icon: 'TicketIcon',\n\titems:[\n\t// {\n        // label: 'Genesis Lands',\n        // href: '/stakes/2',\n      // },\n     {\n        label: 'Happy Cows',\n        href: '/stakes/1',\n      }\n      \n\t  ]\n  },\n  {\n    label: 'IFO',\n    icon: 'IfoIcon',\n\titems:[\n\t{\n        label: 'Launchpad',\n        href: '/ifo',\n      },\n     {\n        label: 'Launchpool',\n        href: '/pools',\n      }\n      \n\t  ]   \n  },  \n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n\t{\n        label: 'Roadmap',\n        href: 'https://finance-milk.gitbook.io/home/',\n      },\n\t {\n        label: 'Voting',\n        href: '#',\n      },\t     \n      {\n        label: 'Github',\n        href: 'https://github.com/CashMilk/',\n      },\n    ],\n  },\n  \n  \n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd, /*  usePriceCowBusd */ } from 'state/hooks'\nimport { Menu as UikitMenu } from 'cashcow-uikit'\n\nimport config from './config'\n\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n // const cowPriceUsd = usePriceCowBusd()\n  \n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n     // cowPriceUsd={cowPriceUsd.toNumber()}\n      links={config}\n      // profile={{\n      //   username: \"MyNFTS\",\n      //   image: \"https://ibb.co/xh2Fxyc\",\n      //   profileLink: \"/myNFTs\",\n      //   noProfileLink: \"/no-myNFTs\",\n      // }}\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from 'cashcow-uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy, useContext } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Toaster } from 'react-hot-toast'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from 'cashcow-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport { LoadingContext } from 'contexts/LoadingContext'\nimport BackLoader from 'components/BackLoader'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport './App.css'\n\n// import NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\nconst Stakes = lazy(() => import('./views/Stakes'))\n// const Lottery = lazy(() => import('./views/Lottery'))\nconst Pools = lazy(() => import('./views/Pools'))\nconst Ifos = lazy(() => import('./views/Ifos'))\nconst Nft = lazy(() => import('./views/Nft'))\nconst NotFound = lazy(() => import('./views/NotFound'))\nconst Blindbox = lazy(() => import('./views/Blindbox'))\nconst BlindboxDetail = lazy(() => import('./views/Blindbox/BlindboxDetail'))\nconst NftMarket = lazy(() => import('./views/NftMarket'))\nconst NftMarketDetail = lazy(() => import('./views/NftMarket/NftMarketDetail'))\nconst MyNfts = lazy(() => import('./views/MyNfts'))\nconst MyNftsDetail = lazy(() => import('./views/MyNfts/MyNftsDeatail'))\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n\n  }, [account, connect]);\n\n  const { loading } = useContext(LoadingContext);\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      {loading &&\n        <BackLoader/>\n      }\n      <Toaster \n        position=\"top-right\"\n        reverseOrder={false}\n        toastOptions={{\n          duration: 5000,\n        }}\n      />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/stakes/:index\"> \n            <Stakes /> \n            </Route> \n            <Route path=\"/milkbar\">\n              <Farms tokenMode />\n            </Route>\n            <Route path=\"/pools\">\n              <Pools />\n            </Route>\n            <Route exact path=\"/blind-box\">\n            <Blindbox />\n            </Route>\n            <Route path=\"/blind-box/:index\">\n            <BlindboxDetail />\n            </Route>\n            <Route exact path=\"/nft-market\">\n            <NftMarket /> \n            </Route>\n            <Route path=\"/nft-market/:itemId\">\n            <NftMarketDetail />\n            </Route>\n            <Route exact path=\"/MyNfts\">\n              <MyNfts />\n            </Route>\n            <Route path=\"/MyNfts/:myTokenId\">\n              <MyNftsDetail />\n            </Route>\n            <Route path=\"/ifo\">\n            <Ifos />\n            </Route>\n            <Route path=\"/nft\"> \n            <Nft /> \n            </Route> \t\t\t\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n            \n          </Switch>\n        </Suspense>\n      </Menu>\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\nimport marketsReducer from './markets'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n    markets: marketsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from 'cashcow-uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport { LoadingContextProvider } from 'contexts/LoadingContext'\nimport { StakeContextProvider } from 'contexts/StakeContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl();\n\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={Number(process.env.REACT_APP_CHAIN_ID)}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <LoadingContextProvider>\n                  <StakeContextProvider>\n                    <ModalProvider>{children}</ModalProvider>\n                  </StakeContextProvider>\n                </LoadingContextProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}
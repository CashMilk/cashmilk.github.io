{"version":3,"sources":["../node_modules/lodash/every.js","../node_modules/lodash/_arrayEvery.js","../node_modules/lodash/_baseEvery.js","views/Ifos/components/IfoFoldableCard/types.ts","views/Ifos/components/Hero.tsx","views/Ifos/hooks/helpers.ts","views/Ifos/hooks/v2/useGetPublicIfoData.ts","views/Ifos/hooks/useIfoAllowance.ts","views/Ifos/hooks/v2/useGetWalletIfoData.ts","views/Profile/components/ApproveConfirmButtons.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/PercentageOfTotal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/Skeletons.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardTokens.tsx","hooks/useApproveConfirmTransaction.ts","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/GetLpModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardActions.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/index.tsx","views/Ifos/components/IfoFoldableCard/Timer.tsx","views/Ifos/components/IfoFoldableCard/Achievement.tsx","views/Ifos/hooks/useIfoApprove.ts","views/Ifos/components/IfoFoldableCard/index.tsx","views/Ifos/components/IfoLayout.tsx","views/Ifos/components/IfoSteps.tsx","views/Ifos/CurrentIfo.tsx","views/Ifos/components/IfoCardV2Data.tsx","views/Ifos/hooks/v1/useGetPublicIfoData.ts","views/Ifos/hooks/v1/useGetWalletIfoData.ts","views/Ifos/components/IfoCardV1Data.tsx","views/Ifos/PastIfo.tsx","views/Ifos/index.tsx"],"names":["arrayEvery","require","baseEvery","baseIteratee","isArray","isIterateeCall","module","exports","collection","predicate","guard","func","undefined","array","index","length","baseEach","result","value","EnableStatus","StyledHero","styled","div","theme","isDark","Hero","t","useTranslation","mb","Container","as","scale","bold","fontSize","getStatus","currentBlock","startBlock","endBlock","formatPool","pool","raisingAmountPool","BigNumber","toString","BIG_ZERO","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","useLpTokenPrice","currency","symbol","lpTokenPriceInUsd2","currency2","fastRefresh","useRefresh","useState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","state","setState","useBlock","fetchIfoData","useCallback","a","ifoCalls","name","params","multicallv2","ifoV2Abi","poolBasicFormatted","poolUnlimitedFormatted","toNumber","taxRateNum","totalBlocks","prev","BSC_BLOCK_TIME","useEffect","currencyPriceInUSD","currencyPriceInUSD2","useIfoAllowance","tokenContract","spenderAddress","dependency","account","useWeb3React","allowance","setAllowance","res","console","error","fetch","useGetWalletIfoData","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","contract","useIfoV2Contract","currencyContract","useERC20","getAddress","map","method","userInfo","amounts","prevState","setPendingTx","poolId","setIsClaimed","ButtonArrangement","PercentageOfTotal","userAmount","totalAmount","props","percentOfUserDisplay","isGreaterThan","times","toLocaleString","maximumFractionDigits","color","num","SkeletonCardActions","height","SkeletonCardTokens","justifyContent","alignItems","variant","width","mr","SkeletonCardDetails","TokenSection","primaryToken","secondaryToken","children","TokenImage","token","Label","textTransform","Value","style","wordBreak","IfoCardTokens","publicIfoData","walletIfoData","isLoading","onApprove","enableStatus","useTooltip","placement","targetRef","tooltip","tooltipVisible","publicPoolCharacteristics","userPoolCharacteristics","distributionRatio","tokens","teslasafe","rice","lpToken","pb","getBalanceNumber","decimals","pl","ratio","ENABLED","mt","onClick","IS_ENABLING","endIcon","spin","wbnb","isEqualTo","flexDirection","ml","toFixed","ref","display","marginLeft","StyledApproveConfirmButtonRow","mediaQueries","md","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","ApproveConfirmButtons","isApproveDisabled","isApproving","isConfirming","isConfirmDisabled","onConfirm","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","disabled","id","initialState","approvalState","confirmState","reducer","actions","type","useApproveConfirmTransaction","onRequiresApproval","onSuccess","noop","onApproveSuccess","useReducer","dispatch","handlePreApprove","useRef","toastError","useToast","current","then","isApproved","isConfirmed","handleApprove","tx","wait","handleConfirm","multiplierValues","gasPrice","BIG_TEN","pow","BIG_NINE","ContributeModal","userCurrencyBalance","onDismiss","currency1","setValue","raisingTokenContract","valueWithTokenDecimals","DEFAULT_TOKEN_DECIMAL","decimalPlaces","response","currentAllowance","gt","approve","ethers","constants","MaxUint256","depositPool","PoolIds","maximumLpCommitable","minus","isLessThanOrEqualTo","title","maxWidth","getBalanceAmount","flexGrow","src","split","toLocaleLowerCase","currencyValue","onUserInput","isWarning","textAlign","balance","multiplierValue","isNaN","eq","GetLpModal","ADD_RICE_LIQUIDITY","BASE_ADD_LIQUIDITY_URL","ADD_TS_LIQUIDITY","BASE_V1_ADD_LIQUIDITY_URL","margin","Link","external","href","minWidth","ContributeButton","toastSuccess","useTokenBalance","handleContributeSuccess","amount","Promise","all","lpName","useModal","onPresentContributeModal","onPresentGetLpModal","isDisabled","isGreaterThanOrEqualTo","ClaimButton","ifoVersion","isPending","handleClaim","harvest","harvestPool","IfoCardActions","version","ConnectWalletButton","FooterEntry","label","small","IfoCardDetails","currencyPriceInUSD1","poolCharacteristic","ifoPool","burnText","maxLpTokens","totalCommittedPercent","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","formatNumber","paddingTop","raiseAmount","cakeToBurn","tokenOfferingPrice","cardConfig","SmallCard","config","Timer","countdownToUse","timeUntil","getTimePeriods","suffix","toLowerCase","animation","day","days","hour","hours","minute","minutes","getBscScanLink","target","rel","Flex","StyledLinkExternal","LinkExternal","StyledLink","Text","Achievement","campaignTitle","articleUrl","p","registerToken","process","useIfoApprove","StyledCard","Card","Header","CardHeader","ifoId","FoldableContent","isVisible","isActive","colors","gradients","bubblegum","dropdown","CardsWrapper","singleCard","StyledCardBody","CardBody","StyledCardFooter","CardFooter","backgroundAlt","IfoFoldableCard","isInitiallyVisible","setIsVisible","DISABLED","setEnableStatus","enableStatus2","setEnableStatus2","raisingTokenContract2","Ribbon","variantColor","ribbonPosition","text","getRibbonComponent","onApprove2","handleApprove2","lte","checkAllowance","checkAllowance2","ribbon","expanded","primaryStep","IfoPoolCard","IfoLayout","textSubtle","Wrapper","sm","IfoSteps","balance2","stepsValidationStatus","getStatusProp","arePreviousValid","every","slice","Boolean","renderCardBody","step","_","activeIfo","ifosConfig","find","Ifo","useGetPublicIfoV2Data","useGetWalletIfoV2Data","IfoCardV2Data","numberPoints","ifoV1Abi","raisingAmount","useIfoV1Contract","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","claimed","IfoCardV1Data","useGetPublicIfoV1Data","useGetWalletIfoV1Data","inactiveIfo","filter","PastIfo","Ifos","useRouteMatch","path","url","isExact","activeIndex","to","exact","CurrentIfo"],"mappings":"kHAAA,IAAIA,EAAaC,EAAQ,MACrBC,EAAYD,EAAQ,MACpBE,EAAeF,EAAQ,KACvBG,EAAUH,EAAQ,KAClBI,EAAiBJ,EAAQ,KAmD7BK,EAAOC,QARP,SAAeC,EAAYC,EAAWC,GACpC,IAAIC,EAAOP,EAAQI,GAAcR,EAAaE,EAI9C,OAHIQ,GAASL,EAAeG,EAAYC,EAAWC,KACjDD,OAAYG,GAEPD,EAAKH,EAAYL,EAAaM,EAAW,M,mBC9BlDH,EAAOC,QAZP,SAAoBM,EAAOJ,GAIzB,IAHA,IAAIK,GAAS,EACTC,EAAkB,MAATF,EAAgB,EAAIA,EAAME,SAE9BD,EAAQC,GACf,IAAKN,EAAUI,EAAMC,GAAQA,EAAOD,GAClC,OAAO,EAGX,OAAO,I,qBCnBT,IAAIG,EAAWf,EAAQ,KAoBvBK,EAAOC,QATP,SAAmBC,EAAYC,GAC7B,IAAIQ,GAAS,EAKb,OAJAD,EAASR,GAAY,SAASU,EAAOJ,EAAON,GAE1C,OADAS,IAAWR,EAAUS,EAAOJ,EAAON,MAG9BS,I,+CCjBGE,E,oECMNC,EAAaC,IAAOC,IAAV,sMACM,qBAAGC,MAAmBC,OAAS,UAAY,aA4BlDC,EAnBF,WACX,IAAQC,EAAMC,cAAND,EAER,OACE,cAAC,IAAD,CAAKE,GAAG,OAAR,SACE,cAACR,EAAD,UACE,eAACS,EAAA,EAAD,WACE,cAAC,IAAD,CAASC,GAAG,KAAKC,MAAM,KAAKH,GAAG,OAA/B,SACGF,EAAE,iCAEL,cAAC,KAAD,CAAMM,MAAI,EAACC,SAAS,OAApB,SACGP,EAAE,+D,0HCzBFQ,EAAY,SAACC,EAAsBC,EAAoBC,GAGlE,OAAqB,IAAjBF,EACK,OAGLA,EAAeC,EACV,cAGLD,GAAgBC,GAAcD,GAAgBE,EACzC,OAGLF,EAAeE,EACV,WAGF,QCJHC,EAAa,SAACC,GAAD,MAAW,CAC5BC,kBAAmBD,EAAO,IAAIE,IAAUF,EAAK,GAAGG,YAAcC,IAC9DC,mBAAoBL,EAAO,IAAIE,IAAUF,EAAK,GAAGG,YAAcC,IAC/DE,iBAAkBN,EAAO,IAAIE,IAAUF,EAAK,GAAGG,YAAcC,IAC7DG,SAAQP,GAAOA,EAAK,GACpBQ,gBAAiBR,EAAO,IAAIE,IAAUF,EAAK,GAAGG,YAAcC,IAC5DK,iBAAkBT,EAAO,IAAIE,IAAUF,EAAK,GAAGG,YAAcC,MAgHhDM,EA1Ga,SAACC,GAC3B,IAAQC,EAAgCD,EAAhCC,QAASC,EAAuBF,EAAvBE,mBACXC,EAAoBC,YAAgBJ,EAAIK,SAASC,QACjDC,EAAqBH,YAAgBJ,EAAIQ,UAAUF,QACjDG,EAAgBC,cAAhBD,YAER,EAA0BE,mBAAS,CACjCC,OAAQ,OACRC,gBAAiB,EACjBC,kBAAmB,EACnBC,SAAU,EACVC,gBAAiB,EACjBC,UAAW,CACT3B,kBAAmBG,IACnBC,mBAAoBD,IACpBE,iBAAkBF,IAClByB,QAAS,EACTrB,gBAAiBJ,IACjBK,iBAAkBL,KAEpB0B,cAAe,CACb7B,kBAAmBG,IACnBC,mBAAoBD,IACpBE,iBAAkBF,IAClByB,QAAS,EACTrB,gBAAiBJ,IACjBK,iBAAkBL,KAEpB2B,cAAe,EACfC,YAAa,IAvBf,mBAAOC,EAAP,KAAcC,EAAd,KA0BQtC,EAAiBuC,cAAjBvC,aAEFwC,EAAeC,sBAAW,sBAAC,4DAAAC,EAAA,6DACzBC,EAAW,CACf,CACE3B,UACA4B,KAAM,cAER,CACE5B,UACA4B,KAAM,YAER,CACE5B,UACA4B,KAAM,sBACNC,OAAQ,CAAC,IAEX,CACE7B,UACA4B,KAAM,sBACNC,OAAQ,CAAC,IAEX,CACE7B,UACA4B,KAAM,0BACNC,OAAQ,CAAC,KAvBkB,SA+ByCC,YAAYC,EAAUJ,GA/B/D,mCA+BxB1C,EA/BwB,KA+BZC,EA/BY,KA+BF8B,EA/BE,KA+BSE,EA/BT,KA+BwBD,EA/BxB,KAiCzBe,EAAqB7C,EAAW6B,GAChCiB,EAAyB9C,EAAW+B,GAEpCC,EAAgBlC,EAAaA,EAAW,GAAGiD,WAAa,EACxDd,EAAclC,EAAWA,EAAS,GAAGgD,WAAa,EAClDC,EAAalB,EAAUA,EAAQ,GAAG9C,IAtFtB,MAsFyC+D,WAAa,EAElEvB,EAAS5B,EAAUC,EAAcmC,EAAeC,GAChDgB,EAAchB,EAAcD,EAC5BP,EAAkBQ,EAAcpC,EAGhC8B,EACJ9B,EAAemC,GACTnC,EAAemC,GAAiBiB,EAAe,KAC/CpD,EAAeiB,IAAuBkB,EAAgBlB,GAAuB,IAErFqB,GAAS,SAACe,GAAD,mBAAC,eACLA,GADI,IAEPtB,gBAAiBH,EAAkB0B,IACnCzB,mBAAoBM,EAAgBnC,GAAgBsD,IACpDtB,UAAU,2BAAMgB,GAAP,IAA2Bf,QAAS,IAC7CC,cAAc,2BAAMe,GAAP,IAA+BhB,QAASkB,IACrDxB,SACAG,WACAF,kBACAO,gBACAC,mBA5D6B,4CA+D9B,CAACpB,EAAShB,EAAciB,IAM3B,OAJAsC,qBAAU,WACRf,MACC,CAACA,EAAchB,IAEX,2BAAKa,GAAZ,IAAmBmB,mBAAoBtC,EAAmBuC,oBAAqBnC,EAAoBkB,kB,gCCvGtFkB,EAtBS,SAACC,EAAyBC,EAAwBC,GACxE,IAAQC,EAAYC,cAAZD,QACR,EAAkCpC,mBAASlB,KAA3C,mBAAOwD,EAAP,KAAkBC,EAAlB,KAiBA,OAfAV,qBAAU,WAUJO,GATO,uCAAG,4BAAApB,EAAA,+EAEQiB,EAAcK,UAAUF,EAASF,GAFzC,OAEJM,EAFI,OAGVD,EAAa,IAAI3D,IAAU4D,EAAI3D,aAHrB,gDAKV4D,QAAQC,MAAR,MALU,yDAAH,oDAUTC,KAED,CAACP,EAASF,EAAgBD,EAAeE,IAErCG,GC4EMM,EAtFa,SAACvD,GAC3B,IAAQS,EAAgBC,cAAhBD,YACR,EAA0BE,mBAAyB,CACjDM,UAAW,CACTuC,yBAA0B/D,IAC1BgE,sBAAuBhE,IACvBiE,oBAAqBjE,IACrBkE,cAAelE,IACfmE,YAAY,EACZC,aAAa,GAEf1C,cAAe,CACbqC,yBAA0B/D,IAC1BgE,sBAAuBhE,IACvBiE,oBAAqBjE,IACrBkE,cAAelE,IACfmE,YAAY,EACZC,aAAa,KAfjB,mBAAOvC,EAAP,KAAcC,EAAd,KAmBQtB,EAAsBD,EAAtBC,QAASI,EAAaL,EAAbK,SAET0C,EAAYC,cAAZD,QACFe,EAAWC,YAAiB9D,GAC5B+D,EAAmBC,YAASC,YAAW7D,EAASJ,UAChDgD,EAAYN,EAAgBqB,EAAkB/D,GAqB9CwB,EAAeC,sBAAW,sBAAC,oCAAAC,EAAA,6DACzBC,EAAW,CAAC,eAAgB,+CAA+CuC,KAAI,SAACC,GAAD,MAAa,CAChGnE,UACA4B,KAAMuC,EACNtC,OAAQ,CAACiB,EAAS,CAAC,EAAG,QAJO,SAOGhB,YAAYC,EAAUJ,GAPzB,mCAOxByC,EAPwB,KAOdC,EAPc,KAS/B/C,GAAS,SAACgD,GAAD,mBAAC,eACLA,GADI,IAEPtD,UAAU,2BACLsD,EAAUtD,WADN,IAEPuC,yBAA0B,IAAIjE,IAAU8E,EAAS,GAAG,GAAG7E,YACvDiE,sBAAuB,IAAIlE,IAAU+E,EAAQ,GAAG,GAAG,GAAG9E,YACtDkE,oBAAqB,IAAInE,IAAU+E,EAAQ,GAAG,GAAG,GAAG9E,YACpDmE,cAAe,IAAIpE,IAAU+E,EAAQ,GAAG,GAAG,GAAG9E,YAC9CoE,WAAYS,EAAS,GAAG,KAE1BlD,cAAc,2BACToD,EAAUpD,eADF,IAEXqC,yBAA0B,IAAIjE,IAAU8E,EAAS,GAAG,GAAG7E,YACvDiE,sBAAuB,IAAIlE,IAAU+E,EAAQ,GAAG,GAAG,GAAG9E,YACtDkE,oBAAqB,IAAInE,IAAU+E,EAAQ,GAAG,GAAG,GAAG9E,YACpDmE,cAAe,IAAIpE,IAAU+E,EAAQ,GAAG,GAAG,GAAG9E,YAC9CoE,WAAYS,EAAS,GAAG,UAzBG,2CA4B9B,CAACtB,EAAS9C,IAQb,OANAuC,qBAAU,WACJO,GACFtB,MAED,CAACsB,EAAStB,EAAchB,IAEpB,2BAAKa,GAAZ,IAAmB2B,YAAWa,WAAUU,aAvDnB,SAAC5D,EAAiB6D,GAAlB,OACnBlD,GAAS,SAACgD,GAAD,mBAAC,eACLA,GADI,kBAENE,EAFM,YAAC,eAGHF,EAAUE,IAHR,IAILZ,YAAajD,UAkDmC8D,aA9CjC,SAACD,GACpBlD,GAAS,SAACgD,GAAD,mBAAC,eACLA,GADI,kBAENE,EAFM,YAAC,eAGHF,EAAUE,IAHR,IAILb,YAAY,UAyCkDnC,kB,0BLnG1DxD,K,kBAAAA,E,oBAAAA,E,2BAAAA,M,KAMGA,I,QMDH0G,E,gECoBGC,EAd6C,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,YAAgBC,EAAY,iBAC7FvG,EAAMC,cAAND,EAIFwG,GAH4BF,EAAYG,cAAc,GACxDJ,EAAWzG,IAAI0G,GAAaI,MAAM,KAAK/C,WACvC1C,KACmD0F,oBAAezH,EAAW,CAAE0H,sBAAuB,IAE1G,OACE,cAAC,KAAD,yBAAMrG,SAAS,OAAOsG,MAAM,cAAiBN,GAA7C,aACGvG,EAAE,iBAAkB,CAAE8G,IAAKN,QCjBrBO,EAAsB,WACjC,OAAO,cAAC,KAAD,CAAUC,OAAO,UAGbC,GAAqB,WAChC,OACE,gCACE,eAAC,IAAD,CAAMC,eAAe,gBAAgBC,WAAW,SAASjH,GAAG,OAA5D,UACE,cAAC,KAAD,CAAUkH,QAAQ,SAASC,MAAM,OAAOL,OAAO,OAAOM,GAAG,SACzD,cAAC,KAAD,CAAUD,MAAM,WAElB,eAAC,IAAD,CAAMH,eAAe,gBAAgBC,WAAW,SAAhD,UACE,cAAC,KAAD,CAAUC,QAAQ,SAASC,MAAM,OAAOL,OAAO,OAAOM,GAAG,SACzD,cAAC,KAAD,CAAUD,MAAM,eAMXE,GAAsB,WACjC,OACE,gCACE,cAAC,KAAD,CAAUrH,GAAG,QACb,cAAC,KAAD,Q,gDCGAsH,GAA4C,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,aAAcC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,SAAapB,EAAY,kBAsB1G,OACE,eAAC,IAAD,2BAAUA,GAAV,cArBKkB,EAIDA,GAAgBC,EAEhB,cAAC,IAAD,CACEN,QAAQ,WACRK,aAAcA,EACdT,OAAQ,GACRK,MAAO,GACPK,eAAgBA,EAChBJ,GAAG,SAKF,cAACM,EAAA,EAAD,CAAYC,MAAOJ,EAAcT,OAAQ,GAAIK,MAAO,GAAIC,GAAG,SAhBzD,cAAC,IAAD,CAAsBD,MAAO,GAAIC,GAAG,SAsB3C,8BAAMK,SASNG,GAAQ,SAACvB,GAAD,OAAW,cAAC,KAAD,aAAMjG,MAAI,EAACC,SAAS,OAAOsG,MAAM,YAAYkB,cAAc,aAAgBxB,KAE9FyB,GAAQ,SAACzB,GAAD,OAAW,cAAC,KAAD,aAAMjG,MAAI,EAACC,SAAS,OAAO0H,MAAO,CAAEC,UAAW,cAAmB3B,KAkJ5E4B,GArIqC,SAAC,GAS9C,IARLlC,EAQI,EARJA,OACAzE,EAOI,EAPJA,IACA4G,EAMI,EANJA,cACAC,EAKI,EALJA,cAEAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,UACAC,EACI,EADJA,aAEQjE,EAAYC,cAAZD,QACAvE,EAAMC,cAAND,EACR,EAA+CyI,aAC7CzI,EACE,0KAEF,CAAE0I,UAAW,WAJPC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,eAOtBC,EAA4BV,EAAcnC,GAC1C8C,EAA0BV,EAAcpC,GAEtCpE,EAA+BL,EAA/BK,SAAUG,EAAqBR,EAArBQ,UAAW6F,EAAUrG,EAAVqG,MACrBzC,EAAe2D,EAAf3D,WACF4D,EAAoD,IAAhCxH,EAAIyE,GAAQ+C,kBAEhCvB,EAA0B,cAAXxB,EAAyBgD,IAAOC,UAAYD,IAAOE,KAClEC,GAAsB,cAAXnD,EAAyBpE,EAAWG,IAAcH,EAkGnE,OACE,eAAC,IAAD,CAAKwH,GAAG,OAAR,UACGR,GAAkBD,EAjGjBN,EACK,cAAC,GAAD,IAQoB,gBAAzBF,EAAchG,OAEd,qCACE,eAAC,GAAD,WACE,cAAC,GAAD,UAAQpC,EAAE,0BAA2B,CAAE8B,OAAQsH,EAAQtH,WACvD,cAAC,GAAD,UAAQwH,YAAiBP,EAAwB/D,yBAA0BnD,EAAS0H,YACpF,cAAC,EAAD,CACElD,WAAY0C,EAAwB/D,yBACpCsB,YAAawC,EAA0BzH,qBAG3C,cAAC,KAAD,CAAMd,SAAS,OAAOsG,MAAM,aAAa2C,GAAG,OAA5C,SACGxJ,EAAE,yBAA0B,CAAEyJ,MAAOT,MAEvCR,IAAiB/I,EAAaiK,SAAWnF,GACxC,cAAC,IAAD,CACE8C,MAAM,OACNsC,GAAG,OACHC,QAASrB,EACTD,UAAWE,IAAiB/I,EAAaoK,YACzCC,QAAStB,IAAiB/I,EAAaoK,YAAc,cAAC,IAAD,CAAeE,MAAI,EAAClD,MAAM,iBAAoB,KALrG,SAOG7G,EAAE,eAMgB,SAAzBoI,EAAchG,OAEd,qCACE,eAAC,GAAD,CAAcqF,aAAcA,EAAcC,eAAgBuB,IAAOe,KAAM9J,GAAG,OAA1E,UACE,cAAC,GAAD,UAAQF,EAAE,0BAA2B,CAAE8B,OAAQsH,EAAQtH,WACvD,cAAC,GAAD,UAAQwH,YAAiBP,EAAwB/D,yBAA0BoE,EAAQG,YACnF,cAAC,EAAD,CACElD,WAAY0C,EAAwB/D,yBACpCsB,YAAawC,EAA0BzH,qBAG3C,eAAC,GAAD,CAAcoG,aAAcjG,EAAIqG,MAAhC,UACE,cAAC,GAAD,UAAQ7H,EAAE,sBAAuB,CAAE8B,OAAQ+F,EAAM/F,WACjD,cAAC,GAAD,UAAQwH,YAAiBP,EAAwB9D,sBAAuB4C,EAAM0B,kBAKzD,aAAzBnB,EAAchG,OACT2G,EAAwB/D,yBAAyBiF,UAAU,GAChE,cAAC,IAAD,CAAMC,cAAc,SAAS/C,WAAW,SAAxC,SAEE,cAAC,KAAD,UAAOnH,EAAE,iDAGX,qCACE,eAAC,GAAD,CAAcyH,aAAcA,EAAcC,eAAgBuB,IAAOe,KAAM9J,GAAG,OAA1E,UACE,cAAC,GAAD,UACGF,EAAEoF,EAAa,0BAA4B,2BAA4B,CAAEtD,OAAQsH,EAAQtH,WAE5F,eAAC,IAAD,CAAMqF,WAAW,SAAjB,UACE,cAAC,GAAD,UAAQmC,YAAiBP,EAAwB7D,oBAAqBrD,EAAS0H,YAC9EnE,GAAc,cAAC,IAAD,CAAqByB,MAAM,UAAUsD,GAAG,WAEzD,cAAC,EAAD,CACE9D,WAAY0C,EAAwB/D,yBACpCsB,YAAawC,EAA0BzH,qBAG3C,eAAC,GAAD,CAAcoG,aAAcjG,EAAIqG,MAAhC,UACE,eAAC,GAAD,eAAS7H,EAAEoF,EAAa,oBAAsB,sBAAuB,CAAEtD,OAAQ+F,EAAM/F,YACrF,eAAC,IAAD,CAAMqF,WAAW,SAAjB,UACE,cAAC,GAAD,UACGmC,YAAiBP,EAAwB9D,sBAAuB4C,EAAM0B,UAAUa,QAAQ,MAEzFhF,GAAc2D,EAAwB9D,sBAAsBgF,UAAU,IACtE,qBAAKI,IAAK1B,EAAWV,MAAO,CAAEqC,QAAS,OAAQC,WAAY,OAA3D,SACE,cAAC,IAAD,MAGHnF,GAAc,cAAC,IAAD,CAAqByB,MAAM,UAAUsD,GAAG,iBAM1D,S,uCHpMChE,K,UAAAA,E,yBAAAA,M,KAiBZ,I,oCAAMqE,GAAgC7K,IAAOC,IAAV,2LAM/B,qBAAGC,MAAkB4K,aAAaC,MAKhCC,GAAShL,YAAOiL,IAAPjL,CAAH,4CAINkL,GAAY,CAAExD,MAAO,OAAQR,MAAO,gBAEpCiE,GAAenL,YAAOoL,KAAkBC,MAAMH,GAA/BlL,CAAH,mFAGd,qBAAGE,MAAkB4K,aAAaC,MAKhCO,GAAgBtL,YAAOuL,KAAiBF,MAAMH,GAA9BlL,CAAH,mFAGf,qBAAGE,MAAkB4K,aAAaC,MAKhCS,GAAc,cAAC,IAAD,CAAepB,MAAI,EAAClD,MAAM,iBA6E/BuE,GA3EqD,SAAC,GAU9D,IATLC,EASI,EATJA,kBACAC,EAQI,EARJA,YACAC,EAOI,EAPJA,aACAC,EAMI,EANJA,kBACAjD,EAKI,EALJA,UACAkD,EAII,EAJJA,UAII,IAHJC,yBAGI,MAHgBvF,EAAkBwF,IAGlC,EAFJC,EAEI,EAFJA,aACAC,EACI,EADJA,UAEQ7L,EAAMC,cAAND,EACF8L,EAAiB,OAAGF,QAAH,IAAGA,IAAgB5L,EAAE,WA4D5C,OAAO0L,IAAsBvF,EAAkBwF,IAxD3C,eAACnB,GAAD,WACE,cAAC,IAAD,UACE,cAACG,GAAD,CACEoB,SAAUV,EACVzB,QAASrB,EACTuB,QAASwB,EAAcH,QAAcjM,EACrCoJ,UAAWgD,EAJb,SAMiBtL,EAAdsL,EAAgB,YAAiB,eAGtC,eAAC,IAAD,CAAMpE,eAAe,SAArB,UACE,cAAC4D,GAAD,IACA,cAACG,GAAD,OAEF,cAAC,IAAD,UACE,cAACN,GAAD,CACEqB,GAAIH,EACJjC,QAAS6B,EACTM,SAAUP,EACVlD,UAAWiD,EACXzB,QAASyB,EAAeJ,QAAcjM,EALxC,SAOGqM,EAAevL,EAAE,cAAgB8L,SASxC,mCACGT,EACC,cAAC,IAAD,UACE,cAACV,GAAD,CACEqB,GAAIH,EACJjC,QAAS6B,EACTM,SAAUP,EACVlD,UAAWiD,EACXzB,QAASyB,EAAeJ,QAAcjM,EALxC,SAOGqM,EAAevL,EAAE,cAAgB8L,MAItC,cAAC,IAAD,UACE,cAACnB,GAAD,CAAQf,QAASrB,EAAWuB,QAASwB,EAAcH,QAAcjM,EAAWoJ,UAAWgD,EAAvF,SACiBtL,EAAdsL,EAAgB,YAAiB,kB,UIlG1CW,GAAsB,CAC1BC,cAAe,OACfC,aAAc,QAGVC,GAAU,SAACtJ,EAAcuJ,GAC7B,OAAQA,EAAQC,MACd,IAAK,oBACH,OAAO,2BACFxJ,GADL,IAEEoJ,cAAe,YAEnB,IAAK,kBACH,OAAO,2BACFpJ,GADL,IAEEoJ,cAAe,YAEnB,IAAK,kBACH,OAAO,2BACFpJ,GADL,IAEEoJ,cAAe,YAEnB,IAAK,gBACH,OAAO,2BACFpJ,GADL,IAEEoJ,cAAe,SAEnB,IAAK,kBACH,OAAO,2BACFpJ,GADL,IAEEqJ,aAAc,YAElB,IAAK,kBACH,OAAO,2BACFrJ,GADL,IAEEqJ,aAAc,YAElB,IAAK,gBACH,OAAO,2BACFrJ,GADL,IAEEqJ,aAAc,SAElB,QACE,OAAOrJ,IAwEEyJ,GA5DsB,SAAC,GAMJ,IALhChE,EAK+B,EAL/BA,UACAkD,EAI+B,EAJ/BA,UACAe,EAG+B,EAH/BA,mBAG+B,IAF/BC,iBAE+B,MAFnBC,QAEmB,MAD/BC,wBAC+B,MADZD,QACY,EACvB1M,EAAMC,cAAND,EACAuE,EAAYC,cAAZD,QACR,EAA0BqI,qBAAWR,GAASH,IAA9C,mBAAOnJ,EAAP,KAAc+J,EAAd,KACMC,EAAmBC,iBAAOP,GACxBQ,EAAeC,cAAfD,WAaR,OAVAhJ,qBAAU,WACJO,GAAWuI,EAAiBI,SAC9BJ,EAAiBI,UAAUC,MAAK,SAAC5N,GAC3BA,GACFsN,EAAS,CAAEP,KAAM,2BAItB,CAAC/H,EAASuI,EAAkBD,IAExB,CACLvB,YAAqC,YAAxBxI,EAAMoJ,cACnBkB,WAAoC,YAAxBtK,EAAMoJ,cAClBX,aAAqC,YAAvBzI,EAAMqJ,aACpBkB,YAAoC,YAAvBvK,EAAMqJ,aACnBmB,cAAc,WAAD,4BAAE,4BAAAnK,EAAA,+EAEMoF,IAFN,cAELgF,EAFK,OAGXV,EAAS,CAAEP,KAAM,oBAHN,SAIWiB,EAAGC,OAJd,cAKCpL,SACVyK,EAAS,CAAEP,KAAM,oBACjBK,EAAiB7J,IAPR,kDAUX+J,EAAS,CAAEP,KAAM,kBACjBU,EAAWhN,EAAE,SAAUA,EAAE,uFAXd,0DAAF,kDAAC,GAcdyN,cAAc,WAAD,4BAAE,4BAAAtK,EAAA,6DACb0J,EAAS,CAAEP,KAAM,oBADJ,kBAGMb,IAHN,cAGL8B,EAHK,gBAIWA,EAAGC,OAJd,cAKCpL,SACVyK,EAAS,CAAEP,KAAM,oBACjBG,EAAU3J,IAPD,kDAUX+J,EAAS,CAAEP,KAAM,kBACjBU,EAAWhN,EAAE,SAAUA,EAAE,uFAXd,0DAAF,kDAAC,KC/FZ0N,GAAmB,CAAC,GAAK,IAAM,GAAK,IAAM,GAG1CC,GAAWC,IAAQlH,MAAMkH,IAAQC,IAAIC,MAAW9M,WAiIvC+M,GA/H0B,SAAC,GAQnC,IAPL9H,EAOI,EAPJA,OACAzE,EAMI,EANJA,IACA4G,EAKI,EALJA,cACAC,EAII,EAJJA,cACA2F,EAGI,EAHJA,oBACAC,EAEI,EAFJA,UACAxB,EACI,EADJA,UAEM3D,EAA4BV,EAAcnC,GAC1C8C,EAA0BV,EAAcpC,GAE5BiI,EAAyB1M,EAAnCK,SAAqBG,EAAcR,EAAdQ,UACvBH,EAAsB,cAAXoE,EAAyBiI,EAAYlM,EAChDiC,EACO,cAAXgC,EACImC,EAAcnE,mBACdmE,EAAclE,qBAAuBkE,EAAcnE,mBACjD9C,EAAqB2H,EAArB3H,iBACA6D,EAA6B+D,EAA7B/D,yBACAM,EAAa+C,EAAb/C,SACR,EAA0BnD,mBAAS,IAAnC,mBAAO3C,EAAP,KAAc2O,EAAd,KACQ5J,EAAYC,cAAZD,QACF6J,EAAuB3I,YAASC,YAAW7D,EAASJ,UAClDzB,EAAMC,cAAND,EACFqO,EAAyB,IAAItN,IAAUvB,GAAOkH,MAAM4H,KAAuBC,cAAc,GAE/F,EACEhC,GAA6B,CAC3BC,mBAAmB,WAAD,4BAAE,8BAAArJ,EAAA,+EAEOiL,EAAqB3J,UAAUF,EAASe,EAAS7D,SAFxD,cAEV+M,EAFU,OAGVC,EAAmB,IAAI1N,IAAUyN,EAASxN,YAHhC,kBAITyN,EAAiBC,GAAG,IAJX,0DAMT,GANS,yDAAF,kDAAC,GASnBnG,UAAW,WACT,OAAO6F,EAAqBO,QAAQrJ,EAAS7D,QAASmN,KAAOC,UAAUC,WAAY,CAAEnB,eAEvFlC,UAAW,WACT,OAAOnG,EAASyJ,YAAYV,EAAuBrN,WAAYiF,IAAW+I,IAAQvM,UAAY,EAAI,EAAG,CACnGkL,eAGJlB,UAAU,WAAD,4BAAE,sBAAAtJ,EAAA,sEACHsJ,EAAU4B,GADP,OAETJ,IAFS,2CAAF,kDAAC,KAnBN3C,EAAR,EAAQA,YAAa8B,EAArB,EAAqBA,WAAYC,EAAjC,EAAiCA,YAAa9B,EAA9C,EAA8CA,aAAc+B,EAA5D,EAA4DA,cAAeG,EAA3E,EAA2EA,cAyBrEwB,EACA9N,EAAiBsF,cAAc,IAC1BtF,EAAiB+N,MAAMlK,GAA0BmK,oBAAoBnB,GACxE7M,EAGC6M,EAGT,OACE,cAAC,KAAD,CAAOoB,MAAOpP,EAAE,sBAAuB,CAAE8B,OAAQD,EAASC,SAAWmM,UAAWA,EAAhF,SACE,eAAC,KAAD,CAAWoB,SAAS,QAApB,UACGlO,EAAiBsF,cAAc,IAC9B,eAAC,IAAD,CAAMS,eAAe,gBAAgBhH,GAAG,OAAxC,UACE,cAAC,KAAD,UAAOF,EAAE,yBACT,cAAC,KAAD,UAAOsP,YAAiBnO,EAAkBU,EAAS0H,UAAUvI,gBAGjE,eAAC,IAAD,CAAMkG,eAAe,gBAAgBhH,GAAG,MAAxC,UACE,eAAC,KAAD,WAAOF,EAAE,UAAT,OACA,eAAC,IAAD,CAAMuP,SAAU,EAAGrI,eAAe,WAAlC,UACE,cAAC,IAAD,CACEsI,IAAG,wBAAmB3N,EAASC,OAAO2N,MAAM,KAAK,GAAGC,oBAAjD,QACHrI,MAAO,GACPL,OAAQ,KAEV,cAAC,KAAD,UAAOnF,EAASC,eAGpB,cAAC,IAAD,CACEtC,MAAOA,EACPmQ,cAAe1L,EAAmByC,MAAMlH,GAAS,GAAG4K,QAAQ,GAC5DwF,YAAazB,EACb0B,UAAWxB,EAAuB5H,cAAcwI,GAChD1F,SAAU1H,EAAS0H,SACnBrJ,GAAG,QAEL,cAAC,KAAD,CAAM2G,MAAM,aAAaiJ,UAAU,QAAQvP,SAAS,OAAOL,GAAG,OAA9D,SACGF,EAAE,qBAAsB,CACvB+P,QAAST,YAAiBtB,EAAqBnM,EAAS0H,UAAUvI,eAGtE,cAAC,IAAD,CAAMkG,eAAe,gBAAgBhH,GAAG,OAAxC,SACGwN,GAAiB/H,KAAI,SAACqK,EAAiB5Q,GAAlB,OACpB,eAAC,IAAD,CAEEiB,MAAM,KACN+G,QAAQ,WACRwC,QAAS,kBAAMuE,EAASmB,YAAiBL,EAAoBvI,MAAMsJ,IAAkBhP,aACrFsG,GAAIlI,EAAQsO,GAAiBrO,OAAS,EAAI,MAAQ,EALpD,UAOqB,IAAlB2Q,EAPH,MACOA,QAUX,cAAC,KAAD,CAAMnJ,MAAM,aAAatG,SAAS,OAAOL,GAAG,OAA5C,SACGF,EACC,iJAGJ,cAAC,GAAD,CACEqL,kBAAmBgC,GAAe9B,GAAgB6B,EAClD9B,YAAaA,EACbE,mBACG4B,GAAcC,GAAegB,EAAuB4B,SAAW5B,EAAuB6B,GAAG,GAE5F3E,aAAcA,EACdhD,UAAW+E,EACX7B,UAAWgC,UC9GN0C,GA9B8B,SAAC,GAA6B,IAA3BtO,EAA0B,EAA1BA,SAAUoM,EAAgB,EAAhBA,UAChDjO,EAAMC,cAAND,EACFoQ,EAAkB,UAAMC,IAAN,mDAClBC,EAAgB,UAAMC,IAAN,mDACtB,OACE,cAAC,KAAD,CAAOnB,MAAOpP,EAAE,sBAAuBiO,UAAWA,EAAlD,SACE,eAAC,KAAD,CAAWoB,SAAS,QAApB,UACE,cAAC,IAAD,CACEG,IAAG,wBAAmB3N,EAASC,OAAO2N,MAAM,KAAK,GAAGC,oBAAjD,QACHrI,MAAO,GACPL,OAAQ,GACRwJ,OAAO,OACPtQ,GAAG,SAEL,cAAC,KAAD,CAAMA,GAAG,OAAT,SAAiBF,EAAE,oBAAD,OAAgB6B,EAASC,OAAzB,yCAClB,cAAC,KAAD,CAAM5B,GAAG,OAAT,SAAiBF,EAAE,gFACnB,cAAC,IAAD,CACEI,GAAIqQ,IACJC,UAAQ,EACRC,KAA0B,gBAApB9O,EAASC,OAA2BsO,EAAqBE,EAC/DxG,QAAS,cAAC,KAAD,CAAajD,MAAM,UAC5B+J,SAAS,OALX,SAOG5Q,EAAE,yBCoCE6Q,GAnD2B,SAAC,GAAmD,IAAjD5K,EAAgD,EAAhDA,OAAQzE,EAAwC,EAAxCA,IAAK4G,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,cACjES,EAA4BV,EAAcnC,GAC1C8C,EAA0BV,EAAcpC,GACtCZ,EAA0C0D,EAA1C1D,YAAaL,EAA6B+D,EAA7B/D,yBACb7D,EAAqB2H,EAArB3H,iBACAnB,EAAMC,cAAND,EACA8Q,EAAiB7D,cAAjB6D,aACFjP,GAAuB,cAAXoE,EAAyBzE,EAAIK,SAAWL,EAAIQ,YAAcR,EAAIK,SAC/DmM,EAAwB+C,aAAgBrL,YAAW7D,EAASJ,UAArEsO,QAGFiB,EAAuB,uCAAG,WAAOC,GAAP,SAAA9N,EAAA,sEACxB+N,QAAQC,IAAI,CAAC/I,EAAcnF,eAAgBoF,EAAcpF,iBADjC,OAE9B6N,EACE9Q,EAAE,YACFA,EAAE,6DAA8D,CAC9DiR,OAAQ3H,YAAiB2H,GACzBG,OAAQvP,EAASC,UANS,2CAAH,sDAW7B,EAAmCuP,aACjC,cAAC,GAAD,CACEpL,OAAQA,EACRzE,IAAKA,EACL4G,cAAeA,EACfC,cAAeA,EACfoE,UAAWuE,EACXhD,oBAAqBA,KAEvB,GATKsD,EAAP,oBAYA,EAA8BD,aAAS,cAAC,GAAD,CAAYxP,SAAUA,KAAc,GAApE0P,EAAP,oBAEMC,EACJnM,GACClE,EAAiBsF,cAAc,IAAMzB,EAAyByM,uBAAuBtQ,GAExF,OACE,cAAC,IAAD,CACEyI,QAASoE,EAAoB/D,UAAU,GAAKsH,EAAsBD,EAClEjK,MAAM,OACN0E,SAAUyF,EAHZ,SAKgBxR,EAAbwR,EAAe,iBAAsB,uBCV7BE,GA1CsB,SAAC,GAA2C,IAAzCzL,EAAwC,EAAxCA,OAAQ0L,EAAgC,EAAhCA,WAAYtJ,EAAoB,EAApBA,cACpDU,EAA0BV,EAAcpC,GACtCjG,EAAMC,cAAND,EACR,EAAqCiN,cAA7BD,EAAR,EAAQA,WAAY8D,EAApB,EAAoBA,aAEd9K,EAAe,SAAC4L,GAAD,OAAwBvJ,EAAcrC,aAAa4L,EAAW3L,IAE7E4L,EAAW,uCAAG,8BAAA1O,EAAA,kEAEhB6C,GAAa,GAEM,IAAf2L,EAJY,iCAKGtJ,EAAc/C,SAASwM,UAL1B,cAKRvE,EALQ,gBAMRA,EAAGC,OANK,gDAQGnF,EAAc/C,SAASyM,YAAY9L,IAAW+I,IAAQvM,UAAY,EAAI,GARzE,eAQR8K,EARQ,iBASRA,EAAGC,OATK,QAYhBnF,EAAcnC,aAAaD,GAC3B6K,EAAa9Q,EAAE,YAAaA,EAAE,gDAbd,kDAehBgN,EAAWhN,EAAE,SAAUA,EAAE,uFACzB4E,QAAQC,MAAR,MAhBgB,yBAkBhBmB,GAAa,GAlBG,6EAAH,qDAsBjB,OACE,cAAC,IAAD,CACE4D,QAASiI,EACT9F,SAAUhD,EAAwB1D,YAClCgC,MAAM,OACNiB,UAAWS,EAAwB1D,YACnCyE,QAASf,EAAwB1D,YAAc,cAAC,IAAD,CAAe0E,MAAI,EAAClD,MAAM,iBAAoB,KAL/F,SAOG7G,EAAE,YCaMgS,GA1CyB,SAAC,GAMlC,IALL/L,EAKI,EALJA,OACAzE,EAII,EAJJA,IACA4G,EAGI,EAHJA,cACAC,EAEI,EAFJA,cACkBC,EACd,EADcA,UAGV/D,EAAYC,cAAZD,QACFwE,EAA0BV,EAAcpC,GAE9C,OAAIqC,EACK,cAAC,EAAD,IAGJ/D,EAaH,qCAC4B,SAAzB6D,EAAchG,QACb,cAAC,GAAD,CAAkB6D,OAAQA,EAAQzE,IAAKA,EAAK4G,cAAeA,EAAeC,cAAeA,IAEjE,aAAzBD,EAAchG,SACZ2G,EAAwB3D,aACxB2D,EAAwB9D,sBAAsBwB,cAAc,IAC3DsC,EAAwB7D,oBAAoBuB,cAAc,KAC1D,cAAC,GAAD,CAAaR,OAAQA,EAAQ0L,WAAYnQ,EAAIyQ,QAAS5J,cAAeA,OApBpE,cAAC6J,GAAA,EAAD,CAAqB7K,MAAM,UClBhC8K,GAA0C,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAO5S,EAAY,EAAZA,MACxD,OACE,eAAC,IAAD,CAAM0H,eAAe,gBAAgBC,WAAW,SAAhD,UACE,cAAC,KAAD,CAAMkL,OAAK,EAACxL,MAAM,aAAlB,SACGuL,IAEF5S,EACC,cAAC,KAAD,CAAM6S,OAAK,EAACvC,UAAU,QAAtB,SACGtQ,IAGH,cAAC,KAAD,CAAUwH,OAAQ,GAAIK,MAAO,SAwEtBiL,GAlEuC,SAAC,GAAoC,IAAlCrM,EAAiC,EAAjCA,OAAQzE,EAAyB,EAAzBA,IAAK4G,EAAoB,EAApBA,cAC5DpI,EAAMC,cAAND,EACAoC,EAAyEgG,EAAzEhG,OAA4BmQ,EAA6CnK,EAAjEnE,mBAAyCC,EAAwBkE,EAAxBlE,oBACnDsO,EAAqBpK,EAAcnC,GACnCwM,EAAUjR,EAAIyE,GACdyM,EAAsB,cAAXzM,EAAyB,uBAAyB,gBAC7DhC,EAAgC,cAAXgC,EAAyBsM,EAAsBrO,GAAuBqO,EAG3FI,EAAcrJ,YAAiBkJ,EAAmBrR,iBAAkBK,EAAIK,SAAS0H,UACjF7G,EAAO,UAAM8P,EAAmB9P,QAAzB,KAEPkQ,EAAwBJ,EAAmBnR,gBAC9CzB,IAAI4S,EAAmB1R,mBACvB4F,MAAM,KACN0D,QAAQ,GACLyI,EAAmBvJ,YAAiBkJ,EAAmBnR,gBAAiBG,EAAIK,SAAS0H,UACrFuJ,EAAwB7O,EAAmByC,MAAMmM,GACjDE,EAAc,YAAQC,YAAaF,EAAsBnP,WAAY,EAAG,GAA1D,aAAiEiP,EAAjE,MA6CpB,OAAO,cAAC,IAAD,CAAKK,WAAW,OAAhB,SAxCU,gBAAX7Q,EAEA,qCACG6D,IAAW+I,IAAQvM,WAAa,cAAC,GAAD,CAAa2P,MAAOpS,EAAE,uBAAwBR,MAAOmT,IACtF,cAAC,GAAD,CAAaP,MAAOpS,EAAE,mBAAoBR,MAAOgC,EAAIyE,GAAQiN,cAC7D,cAAC,GAAD,CAAad,MAAOpS,EAAE0S,GAAWlT,MAAOgC,EAAIyE,GAAQkN,aACpD,cAAC,GAAD,CACEf,MAAOpS,EAAE,sBAAuB,CAAE8B,OAAQN,EAAIqG,MAAM/F,SACpDtC,MAAK,WAAMiT,EAAQW,oBAAsB5R,EAAI4R,yBAKtC,SAAXhR,EAEA,qCACG6D,IAAW+I,IAAQvM,WAAa,cAAC,GAAD,CAAa2P,MAAOpS,EAAE,uBAAwBR,MAAOmT,IACrF1M,IAAW+I,IAAQrM,eAAiB,cAAC,GAAD,CAAayP,MAAOpS,EAAE,mBAAoBR,MAAOkD,IACtF,cAAC,GAAD,CAAa0P,MAAOpS,EAAE,oBAAqBR,MAAOyE,EAAmByK,GAAG,GAAKqE,EAAiB,UAIrF,aAAX3Q,EAEA,qCACG6D,IAAW+I,IAAQvM,WAAa,cAAC,GAAD,CAAa2P,MAAOpS,EAAE,uBAAwBR,MAAOmT,IACrF1M,IAAW+I,IAAQrM,eAAiB,cAAC,GAAD,CAAayP,MAAOpS,EAAE,mBAAoBR,MAAOkD,IACtF,cAAC,GAAD,CAAa0P,MAAOpS,EAAE,oBAAqBR,MAAOyE,EAAmByK,GAAG,GAAKqE,EAAiB,OAC9F,cAAC,GAAD,CAAaX,MAAOpS,EAAE,mBAAoBR,MAAOgC,EAAIyE,GAAQiN,cAC7D,cAAC,GAAD,CAAad,MAAOpS,EAAE,iBAAkBR,MAAOgC,EAAIyE,GAAQkN,aAC3D,cAAC,GAAD,CACEf,MAAOpS,EAAE,sBAAuB,CAAE8B,OAAQN,EAAIqG,MAAM/F,SACpDtC,MAAK,WAAMgC,EAAI4R,mBAAqB5R,EAAI4R,mBAAqB,UAK9D,cAAC,GAAD,OCpELC,IAAsB,qBACzBrE,IAAQvM,UAAY,CACnB2M,MAAO,iBACPhI,QAAS,SACTwB,QAAS,uGAJe,eAMzBoG,IAAQrM,cAAgB,CACvByM,MAAO,mBACPhI,QAAS,OACTwB,QAAS,kFATe,IA6Db0K,GAhD2B,SAAC,GAA4E,IAA1ErN,EAAyE,EAAzEA,OAAQzE,EAAiE,EAAjEA,IAAK4G,EAA4D,EAA5DA,cAAeC,EAA6C,EAA7CA,cAAeE,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACzFxI,EAAMC,cAAND,EACFuT,EAASF,GAAWpN,GAE1B,EAA+CwC,aAAWzI,EAAEuT,EAAO3K,SAAU,CAAEF,UAAW,WAAlFC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,eAEtBP,EAA+D,SAAzBF,EAAchG,OAE1D,OACE,qCACGyG,GAAkBD,EACnB,eAAC,IAAD,WACE,cAAC,IAAD,CAAYxB,QAASmM,EAAOnM,QAA5B,SACE,eAAC,IAAD,CAAMF,eAAe,gBAAgBC,WAAW,SAAhD,UACE,cAAC,KAAD,CAAM7G,MAAI,EAACC,SAAS,OAApB,SACGP,EAAEuT,EAAOnE,SAEZ,qBAAK/E,IAAK1B,EAAV,SACE,cAAC,IAAD,WAIN,eAAC,IAAD,WACE,cAAC,GAAD,CACE1C,OAAQA,EACRzE,IAAKA,EACL4G,cAAeA,EACfC,cAAeA,EAEfC,UAAWA,EACXC,UAAWA,EACXC,aAAcA,IAEhB,cAAC,GAAD,CACEvC,OAAQA,EACRzE,IAAKA,EACL4G,cAAeA,EACfC,cAAeA,EAEfC,UAAWA,IAEb,cAAC,GAAD,CAAgBrC,OAAQA,EAAQzE,IAAKA,EAAK4G,cAAeA,c,mBC/BpDoL,GAxCgB,SAAC,GAAuB,IAArBpL,EAAoB,EAApBA,cACxBpI,EAAMC,cAAND,EACAoC,EAA8DgG,EAA9DhG,OAAQE,EAAsD8F,EAAtD9F,kBAAmBE,EAAmC4F,EAAnC5F,gBAAiBI,EAAkBwF,EAAlBxF,cAC9C6Q,EAA4B,gBAAXrR,EAA2BE,EAAoBE,EAChEkR,EAAYC,aAAeF,GAC3BG,EAAoB,gBAAXxR,EAA2BpC,EAAE,SAAS6T,cAAgB7T,EAAE,UAAU6T,cACjF,OACE,cAAC,IAAD,CAAM3M,eAAe,SAAShH,GAAG,OAAjC,SACc,SAAXkC,EACC,cAAC,KAAD,CAAU0R,UAAU,QAAQ1M,QAAQ,OAAOC,MAAM,OAAOL,OAAO,SAE/D,qCACE,cAAC,KAAD,CAAiBK,MAAM,OAAOC,GAAG,SACjC,eAAC,IAAD,CAAMH,WAAW,SAAjB,UACE,eAAC,KAAD,CAAM7G,MAAI,EAACgH,GAAG,OAAd,UACGsM,EADH,OAGA,cAAC,KAAD,UACG5T,EAAE,2BAA4B,CAC7B+T,IAAKL,EAAUM,KACfC,KAAMP,EAAUQ,MAChBC,OAAQT,EAAUU,YAGtB,cAAC,IAAD,CACEzD,KAAM0D,aAAezR,EAAe,aACpC0R,OAAO,QACPC,IAAI,sBACJpK,GAAG,MACHpC,cAAc,YALhB,oBAOO/H,EAAE,UAPT,gB,UClBNG,GAAYR,YAAO6U,IAAP7U,CAAH,uLAIX,qBAAGE,MAAkB4K,aAAaC,MAUhC+J,GAAqB9U,YAAO+U,IAAP/U,CAAH,qFAEpB,qBAAGE,MAAkB4K,aAAaC,MAIhCiK,GAAahV,YAAOiV,KAAPjV,CAAH,kJAmEDkV,GA1DsB,SAAC,GAAiC,IAA/BrT,EAA8B,EAA9BA,IAC9BxB,EAAMC,cAAND,EAEF8U,EAAgBtT,EAAI6B,KAG1B,OACE,eAAC,GAAD,WAyBE,cAAC,IAAD,CAAM6G,cAAc,WACpB,eAAC,IAAD,CAAM/C,WAAW,WAAW+C,cAAc,SAA1C,UACE,cAACuK,GAAD,CAAoB9D,KAAMnP,EAAIuT,WAAY7U,GAAG,MAA7C,SACGF,EAAE,2BAA4B,CAAEoP,MAAO0F,MAE1C,cAACL,GAAD,CAAoB9D,KAAM0D,aAAe7S,EAAIC,QAAS,WAAtD,SAAmEzB,EAAE,mBACrE,cAAC2U,GAAD,UACE,eAAC,IAAD,CACEvN,QAAQ,OACR4N,EAAE,IACFhO,OAAO,OACP4C,QAAS,kBACPqL,aAAczT,EAAIqG,MAAMpG,QAAQyT,IAAiC1T,EAAIqG,MAAM/F,OAAQN,EAAIqG,MAAM0B,WALjG,UAQE,cAAC,KAAD,CAAM1C,MAAM,UAAUvG,MAAI,EAACC,SAAS,OAApC,6BAGA,cAAC,KAAD,CAAc4J,GAAG,oBCpFdgL,GATO,SAAC/Q,EAAyBC,GAM9C,OALkBnB,sBAAW,sBAAC,4BAAAC,EAAA,sEACXiB,EAAcuK,QAAQtK,EAAgBuK,KAAOC,UAAUC,YAD5C,cACtBvB,EADsB,gBAEtBA,EAAGC,OAFmB,2CAG3B,CAACnJ,EAAgBD,KC8ChBgR,GAAazV,YAAO0V,IAAP1V,CAAH,oFAMV2V,GAAS3V,YAAO4V,IAAP5V,CAAH,8OAQU,gBAAG6V,EAAH,EAAGA,MAAH,kCAAoCA,EAApC,gBAGhBC,GAAkB9V,IAAOC,IAAV,mEACR,qBAAG8V,UAA6B,QAAU,UACvC,gBAAGC,EAAH,EAAGA,SAAU9V,EAAb,EAAaA,MAAb,OAA0B8V,EAAW9V,EAAM+V,OAAOC,UAAUC,UAAYjW,EAAM+V,OAAOG,YAG/FC,GAAerW,IAAOC,IAAV,kMAKd,qBAAGC,MAAkB4K,aAAaC,MACT,qBAAGuL,WAA+B,MAAQ,aAClD,qBAAGA,WAA+B,SAAW,WAI5DC,GAAiBvW,YAAOwW,IAAPxW,CAAH,uFAEhB,qBAAGE,MAAkB4K,aAAaC,MAKhC0L,GAAmBzW,YAAO0W,IAAP1W,CAAH,0FAGN,qBAAGE,MAAkB+V,OAAOU,iBAkI7BC,GA/HyC,SAAC,GAA+D,IAA7D/U,EAA4D,EAA5DA,IAAK4G,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,cAC7E,GADqH,EAAzBmO,mBAC1DrU,oBAAS,IAA3C,mBAAOuT,EAAP,KAAkBe,EAAlB,KACA,EAAwCtU,mBAAS1C,EAAaiX,UAA9D,mBAAOlO,EAAP,KAAqBmO,EAArB,KACA,EAA0CxU,mBAAS1C,EAAaiX,UAAhE,mBAAOE,EAAP,KAAsBC,EAAtB,KACQ7W,EAAMC,cAAND,EACAuE,EAAYC,cAAZD,QACFvC,EAA4B,IAAhBR,EAAIyQ,QAAgBzQ,EAAIK,SAAWL,EAAIQ,UACnDoM,EAAuB3I,YAASC,YAAWlE,EAAIK,SAASJ,UACxDqV,EAAwBrR,YAASC,YAAW1D,EAAUP,UACtDsV,EA1EmB,SAACvV,EAAUY,EAAmBpC,GACvD,MAAe,gBAAXoC,EACK,cAAC,IAAD,CAAY4U,aAAa,eAAeC,eAAe,OAAOC,KAAMlX,EAAE,iBAGhE,SAAXoC,GAAiC,aAAXA,GAAyBZ,EAAImU,SAEnD,cAAC,IAAD,CACEqB,aAAa,UACbC,eAAe,OACfhP,MAAO,CAAEF,cAAe,aACxBmP,KAAM,UAAuBlX,EAAZ,SAAXoC,EAAyB,OAAkB,YAA3C,OAKL,KA0DQ+U,CAAmB3V,EAAK4G,EAAchG,OAAQpC,GACvD2V,EAAoC,aAAzBvN,EAAchG,QAAyBZ,EAAImU,SACpDrQ,EAAa+C,EAAb/C,SACFiD,EAAY4M,GAAc/G,EAAsB9I,EAAS7D,SACzD2V,EAAajC,GAAc2B,EAAuBxR,EAAS7D,SACzDqP,EAAiB7D,cAAjB6D,aAEFxD,EAAa,uCAAG,sBAAAnK,EAAA,sEAElBwT,EAAgBlX,EAAaoK,aAFX,SAIZtB,IAJY,OAMlBoO,EAAgBlX,EAAaiK,SAC7BoH,EACE9Q,EAAE,yBACFA,EAAE,+DAAgE,CAChE8B,OAAQN,EAAIqG,MAAM/F,OAClBD,SAAUL,EAAIK,SAASC,UAXT,gDAelB6U,EAAgBlX,EAAaiX,UAfX,yDAAH,qDAmBbW,EAAc,uCAAG,sBAAAlU,EAAA,sEAEnB0T,EAAiBpX,EAAaoK,aAFX,SAIbuN,IAJa,OAMnBP,EAAiBpX,EAAaiK,SAC9BoH,EACE9Q,EAAE,yBACFA,EAAE,+DAAgE,CAChE8B,OAAQN,EAAIqG,MAAM/F,OAClBD,SAAUL,EAAIQ,UAAUF,UAXT,gDAenB+U,EAAiBpX,EAAaiX,UAfX,yDAAH,qDAmDpB,OAhCA1S,qBAAU,WAWJO,GAVgB,uCAAG,8BAAApB,EAAA,+EAEIiL,EAAqB3J,UAAUF,EAASe,EAAS7D,SAFrD,OAEb+M,EAFa,OAGbC,EAAmB,IAAI1N,IAAUyN,EAASxN,YAChD2V,EAAgBlI,EAAiB6I,IAAI,GAAK7X,EAAaiX,SAAWjX,EAAaiK,SAJ5D,gDAMnBiN,EAAgBlX,EAAaiX,UANV,yDAAH,oDAWlBa,KAED,CAAChT,EAAS6J,EAAsB9I,EAAUqR,IAE7C3S,qBAAU,WAWJO,GAViB,uCAAG,8BAAApB,EAAA,+EAEG2T,EAAsBrS,UAAUF,EAASe,EAAS7D,SAFrD,OAEd+M,EAFc,OAGdC,EAAmB,IAAI1N,IAAUyN,GACvCqI,EAAiBpI,EAAiB6I,IAAI,GAAK7X,EAAaiX,SAAWjX,EAAaiK,SAJ5D,gDAMpBmN,EAAiBpX,EAAaiX,UANV,yDAAH,oDAWnBc,KAED,CAACjT,EAASuS,EAAuBxR,EAAUuR,IAG5C,eAACzB,GAAD,CAAYqC,OAAQV,EAApB,UACE,cAACzB,GAAD,CAAQE,MAAOhU,EAAIwK,GAAnB,SACE,cAAC,IAAD,CAAkB0L,SAAUhC,EAAW9L,QAAS,kBAAM6M,GAAa,SAAC3S,GAAD,OAAWA,UAEhF,eAAC2R,GAAD,CAAiBC,UAAWA,EAAWC,SAAmC,SAAzBvN,EAAchG,QAAqBuT,EAApF,UACGA,GAAY,cAAC,KAAD,CAAUvO,QAAQ,OAAOuQ,YAAavP,EAAc7F,WACjE,eAAC2T,GAAD,WACGP,GAAY,cAAC,GAAD,CAAOvN,cAAeA,IACnC,eAAC4N,GAAD,CAAcC,YAAa7N,EAAc3F,YAAc4F,EAAc5F,UAArE,UACG2F,EAAc3F,WAAa4F,EAAc5F,WACxC,cAACmV,GAAD,CACE3R,OAAQ+I,IAAQvM,UAChBjB,IAAKA,EACL4G,cAAeA,EACfC,cAAeA,EACfE,UAAW+E,EACX9E,aAAcA,IAGlB,cAACoP,GAAD,CACE3R,OAAQ+I,IAAQrM,cAChBnB,IAAKA,EACL4G,cAAeA,EACfC,cAAeA,EACfE,UAAW8O,EACX7O,aAAcoO,OAGlB,cAAC,GAAD,CAAapV,IAAKA,EAAK4G,cAAeA,OAExC,cAACgO,GAAD,UACE,cAAC,IAAD,CAAQhP,QAAQ,OAAO0C,QAAS,cAAC,IAAD,CAAejD,MAAM,YAAc+C,QAAS,kBAAM6M,GAAa,IAA/F,SACGzW,EAAE,oBCjNA6X,GAPGlY,IAAOC,IAAV,qHAIW,qBAAGC,MAAkB+V,OAAOkC,c,sBCYhDC,GAAUpY,YAAOQ,IAAPR,CAAH,mNACG,qBAAGE,MAAkB+V,OAAOC,UAAUC,aAMlD,qBAAGjW,MAAkB4K,aAAauN,MAuHvBC,GAjHmB,SAAC,GAA4B,IAA1BzW,EAAyB,EAAzBA,IAAK6G,EAAoB,EAApBA,cAChC5F,EAA6B4F,EAA7B5F,UAAWE,EAAkB0F,EAAlB1F,cAEX3C,EAAMC,cAAND,EACA+P,EAAYgB,aAAgBrL,YAAWlE,EAAIK,SAASJ,UAApDsO,QACSmI,EAAanH,aAAgBrL,YAAWlE,EAAIQ,UAAUP,UAA/DsO,QACFoI,EAAwB,CAC5BpI,EAAQtJ,cAAc,GACtByR,EAASzR,cAAc,GACvBhE,EAAUuC,yBAAyByB,cAAc,IAAM9D,EAAcqC,yBAAyByB,cAAc,GAC5GhE,EAAU2C,YAAczC,EAAcyC,YAGlCgT,EAAgB,SAAChZ,GACrB,IAAMiZ,EAA6B,IAAVjZ,GAAqBkZ,KAAMH,EAAsBI,MAAM,EAAGnZ,GAAQoZ,SAC3F,OAAIL,EAAsB/Y,GACjBiZ,EAAmB,OAAS,SAE9BA,EAAmB,UAAY,UAGlCI,EAAiB,SAACC,GAEtB,OAAQA,GACN,KAAK,EACH,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAStY,GAAG,KAAKyG,MAAM,YAAY3G,GAAG,OAAtC,SACGF,EAAE,qBAEL,eAAC,KAAD,CAAM6G,MAAM,aAAawL,OAAK,EAA9B,UACGrS,EAAE,2BADL,IACiC,uBAC9BA,EAAE,qDAEL,cAAC,IAAD,CACEI,GAAIqQ,IACJC,UAAQ,EACRC,KAAI,UAAKN,IAAL,mDACJvG,QAAS,cAAC,KAAD,CAAajD,MAAM,UAC5B8C,GAAG,OALL,SAOG3J,EAAE,iBAIX,KAAK,EACH,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASI,GAAG,KAAKyG,MAAM,YAAY3G,GAAG,OAAtC,SACGF,EAAE,4BAEL,eAAC,KAAD,CAAM6G,MAAM,aAAawL,OAAK,EAA9B,UACGrS,EAAE,8DADL,IACoE,uBACjEA,EAAE,qDAEL,cAAC,IAAD,CACEI,GAAIqQ,IACJC,UAAQ,EACRC,KAAI,UAAKN,IAAL,mDACJvG,QAAS,cAAC,KAAD,CAAajD,MAAM,UAC5B8C,GAAG,OALL,SAOG3J,EAAE,+BAIX,KAAK,EACH,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASI,GAAG,KAAKyG,MAAM,YAAY3G,GAAG,OAAtC,SACGF,EAAE,sBAEL,eAAC,KAAD,CAAM6G,MAAM,aAAawL,OAAK,EAA9B,UACGrS,EAAE,wGADL,IACoG,uBACjGA,EAAE,sGAIX,KAAK,EACH,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASI,GAAG,KAAKyG,MAAM,YAAY3G,GAAG,OAAtC,SACGF,EAAE,uBAEL,cAAC,KAAD,CAAM6G,MAAM,aAAawL,OAAK,EAA9B,SACGrS,EACC,sJAKV,QACE,OAAO,OAIb,OACE,eAAC+X,GAAD,WACE,cAAC,IAAD,CAAS3X,GAAG,KAAKC,MAAM,KAAKwG,MAAM,YAAY3G,GAAG,OAAO4P,UAAU,SAAlE,SACG9P,EAAE,sBAEL,cAAC,KAAD,UACGmY,EAAsBxS,KAAI,SAACgT,EAAGvZ,GAAJ,OAEzB,aADA,CACC,KAAD,CAAkBA,MAAOA,EAAOgD,OAAQgW,EAAchZ,GAAtD,SACE,cAAC,IAAD,UAAOqZ,EAAerZ,MADbA,YC3HfwZ,GAAYC,IAAWC,MAAK,SAACtX,GAAD,OAASA,EAAImU,YAehCoD,GAbH,WACV,IAAM3Q,EAAgB4Q,EAAsBJ,IACtCvQ,EAAgB4Q,EAAsBL,IAE5C,OACE,eAAC,GAAD,WACE,cAAC,GAAD,CAAiBpX,IAAKoX,GAAWxQ,cAAeA,EAAeC,cAAeA,EAAemO,oBAAkB,IAC/G,cAAC,GAAD,CAAUhV,IAAKoX,GAAWvQ,cAAeA,QCIhC6Q,GAdwB,SAAC,GAAiC,IAA/B1X,EAA8B,EAA9BA,IAAKgV,EAAyB,EAAzBA,mBACvCpO,EAAgB4Q,EAAsBxX,GACtC6G,EAAgB4Q,EAAsBzX,GAE5C,OACE,cAAC,GAAD,CACEA,IAAKA,EACL4G,cAAeA,EACfC,cAAeA,EACfmO,mBAAoBA,K,UC+DXjV,GApEa,SAACC,GAC3B,IAAQC,EAAgCD,EAAhCC,QAASC,EAAuBF,EAAvBE,mBACXC,EAAoBC,YAAgBJ,EAAIK,SAASC,QACvD,EAA0BK,mBAAS,aACjCC,OAAQ,OACRC,gBAAiB,EACjBC,kBAAmB,EACnBC,SAAU,EACVC,gBAAiB,EACjBI,cAAe,EACfC,YAAa,EACbsW,aAAc,MACbnK,IAAQrM,cAAgB,CACvB7B,kBAAmBG,IACnBI,gBAAiBJ,IACjBC,mBAAoBD,IACpBE,iBAAkBF,IAClByB,QAAS,EACTpB,iBAAkBL,OAftB,mBAAO6B,EAAP,KAAcC,EAAd,KAkBQtC,EAAiBuC,cAAjBvC,aACFwC,EAAeC,sBAAW,sBAAC,oDAAAC,EAAA,6DACzBC,EAAW,CAAC,aAAc,WAAY,gBAAiB,eAAeuC,KAAI,SAACC,GAAD,MAAa,CAC3FnE,UACA4B,KAAMuC,MAHuB,SAMkCrC,YAAY6V,GAAUhW,GANxD,mCAMxB1C,EANwB,KAMZC,EANY,KAMF0Y,EANE,KAMa/S,EANb,KAQzB1D,EAAgBlC,EAAaA,EAAW,GAAGiD,WAAa,EACxDd,EAAclC,EAAWA,EAAS,GAAGgD,WAAa,EAElDvB,EAAS5B,EAAUC,EAAcmC,EAAeC,GAChDgB,EAAchB,EAAcD,EAC5BP,EAAkBQ,EAAcpC,EAGhC8B,EACJ9B,EAAemC,GACTnC,EAAemC,GAAiBiB,EAAe,KAC/CpD,EAAeiB,IAAuBkB,EAAgBlB,GAAuB,IAErFqB,GAAS,SAACe,GAAD,oBACP1B,SACAC,kBACAC,mBAAoBM,EAAgBnC,GAAgBsD,IACpDxB,WACAC,gBAAiBH,EAAkB0B,IACnCnB,gBACAC,cACAoB,mBAAoB,KACpBkV,aAAc,MACbnK,IAAQrM,cAVF,YAAC,eAWHmB,EAAKnB,eAXH,IAYL7B,kBAAmBuY,EAAgB,IAAItY,IAAUsY,EAAc,GAAGrY,YAAcC,IAChFI,gBAAiBiF,EAAc,IAAIvF,IAAUuF,EAAY,GAAGtF,YAAcC,UAlC/C,4CAqC9B,CAACQ,EAAShB,EAAciB,IAM3B,OAJAsC,qBAAU,WACRf,MACC,CAACA,IAEG,2BAAKH,GAAZ,IAAmBmB,mBAAoBtC,EAAmBsB,kBCY7C8B,GAxEa,SAACvD,GAC3B,MAA0BW,mBAAQ,eAC/B6M,IAAQrM,cAAgB,CACvBqC,yBAA0B/D,IAC1BmE,YAAY,EACZC,aAAa,EACbJ,sBAAuBhE,IACvBiE,oBAAqBjE,IACrBkE,cAAelE,OAPnB,mBAAO6B,EAAP,KAAcC,EAAd,KAWQtB,EAAsBD,EAAtBC,QAASI,EAAaL,EAAbK,SACTc,EAAkBG,EAAlBH,cAEA4B,EAAYC,cAAZD,QACFe,EAAWgU,YAAiB7X,GAC5B+D,EAAmBC,YAASC,YAAW7D,EAASJ,UAChDgD,EAAYN,EAAgBqB,EAAkB/D,EAASkB,EAAc0C,aAmBrEpC,EAAeC,sBAAW,sBAAC,wCAAAC,EAAA,6DACzBC,EAAW,CAAC,oBAAqB,WAAY,sBAAsBuC,KAAI,SAACC,GAAD,MAAa,CACxFnE,UACA4B,KAAMuC,EACNtC,OAAQ,CAACiB,OAJoB,SAOmChB,YAAY6V,GAAUhW,GAPzD,mCAOxBmW,EAPwB,KAORC,EAPQ,KAOUC,EAPV,KAQzBC,EAA2BF,EAC7B,CACEvI,OAAQ,IAAIlQ,IAAUyY,EAAiBvI,OAAOjQ,YAC9C2Y,QAASH,EAAiBG,SAE5B,CAAE1I,OAAQhQ,IAAU0Y,SAAS,GAEjC5W,GAAS,SAACgD,GAAD,sBACNiJ,IAAQrM,cADF,YAAC,eAEHoD,EAAUpD,eAFR,IAGLqC,yBAA0B0U,EAAezI,OACzC7L,WAAYsU,EAAeC,QAC3B1U,sBAAuBsU,EAAiB,IAAIxY,IAAUwY,EAAe,GAAGvY,YAAcC,IACtFiE,oBAAqBuU,EAAkB,IAAI1Y,IAAU0Y,EAAgB,GAAGzY,YAAcC,UArB3D,4CAwB9B,CAACsD,EAAS9C,IAQb,OANAuC,qBAAU,WACJO,GACFtB,MAED,CAACsB,EAAStB,IAEN,2BAAKH,GAAZ,IAAmB2B,YAAWa,WAAUU,aAjDnB,SAAC5D,GAAD,OACnBW,GAAS,SAACgD,GAAD,sBACNiJ,IAAQrM,cADF,YAAC,eAEHoD,EAAUpD,eAFR,IAGL0C,YAAajD,SA6CmC8D,aAzCjC,WACnBnD,GAAS,SAACgD,GAAD,sBACNiJ,IAAQrM,cADF,YAAC,eAEHoD,EAAUpD,eAFR,IAGLyC,YAAY,SAqCkDnC,kBCtEvD2W,GATwB,SAAC,GAAa,IAAXpY,EAAU,EAAVA,IAClC4G,EAAgByR,GAAsBrY,GACtC6G,EAAgByR,GAAsBtY,GAE5C,OACE,cAAC,GAAD,CAAiBA,IAAKA,EAAK4G,cAAeA,EAAeC,cAAeA,EAAemO,oBAAoB,KCRzGuD,GAAqBlB,IAAWmB,QAAO,SAACxY,GAAD,OAAUA,EAAImU,YAgB5CsE,GAdC,WACd,OACE,cAAC,GAAD,UACGF,GAAYpU,KAAI,SAACnE,GAAD,OACC,IAAhBA,EAAIyQ,QACF,cAAC,GAAD,CAA4BzQ,IAAKA,GAAbA,EAAIwK,IAExB,cAAC,GAAD,CAA4BxK,IAAKA,EAAKgV,oBAAoB,GAAtChV,EAAIwK,UCsBnBkO,UA7BF,WACX,IAAQla,EAAMC,cAAND,EACR,EAA+Bma,cAAvBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,QAEnB,OACE,qCACE,cAAC,EAAD,IACA,eAACna,EAAA,EAAD,WACE,cAAC,IAAD,CAAM+G,eAAe,SAASC,WAAW,SAASjH,GAAG,OAArD,SACE,eAAC,IAAD,CAAYqa,YAAcD,EAAc,EAAJ,EAAOja,MAAM,KAAK+G,QAAQ,SAA9D,UACE,cAAC,IAAD,CAAgBhH,GAAIqQ,IAAM+J,GAAE,UAAKH,GAAjC,SACGra,EAAE,cAEL,cAAC,IAAD,CAAgBI,GAAIqQ,IAAM+J,GAAE,UAAKH,EAAL,YAA5B,SACGra,EAAE,oBAIT,cAAC,IAAD,CAAOya,OAAK,EAACL,KAAI,UAAKA,GAAtB,SACE,cAACM,GAAD,MAEF,cAAC,IAAD,CAAON,KAAI,UAAKA,EAAL,YAAX,SACE,cAAC,GAAD","file":"static/js/4.8e4031af.chunk.js","sourcesContent":["var arrayEvery = require('./_arrayEvery'),\n    baseEvery = require('./_baseEvery'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = every;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = arrayEvery;\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nmodule.exports = baseEvery;\n","export enum EnableStatus {\n  ENABLED = 'enabled',\n  DISABLED = 'disabled',\n  IS_ENABLING = 'is_enabling',\n}\n\nexport default EnableStatus\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Heading, Text } from '@ricefarm/uikitv2'\nimport Container from 'components/Layout/Container'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledHero = styled.div`\n  background-color: ${({ theme }) => (theme.isDark ? '#396a63' : '#e9faff')};\n \n  background-repeat: no-repeat;\n  background-position: bottom;\n  background-size: contain;\n  padding-bottom: 60px;\n  padding-top: 40px;\n`\n\nconst Hero = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Box mb=\"32px\">\n      <StyledHero>\n        <Container>\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\">\n            {t('IFO: Initial Farm Offerings')}\n          </Heading>\n          <Text bold fontSize=\"20px\">\n            {t('Buy new tokens with a brand new token sale model.')}\n          </Text>\n        </Container>\n      </StyledHero>\n    </Box>\n  )\n}\n\nexport default Hero\n","import { IfoStatus } from 'config/constants/types'\n\nexport const getStatus = (currentBlock: number, startBlock: number, endBlock: number): IfoStatus => {\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\n  // making the UI change to an inaccurate status\n  if (currentBlock === 0) {\n    return 'idle'\n  }\n\n  if (currentBlock < startBlock) {\n    return 'coming_soon'\n  }\n\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\n    return 'live'\n  }\n\n  if (currentBlock > endBlock) {\n    return 'finished'\n  }\n\n  return 'idle'\n}\n\nexport default null\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock } from 'state/block/hooks'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\n  hasTax: pool ? pool[3] : false,\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO,\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const lpTokenPriceInUsd2 = useLpTokenPrice(ifo.currency2.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    // numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = [\n      {\n        address,\n        name: 'startBlock',\n      },\n      {\n        address,\n        name: 'endBlock',\n      },\n      {\n        address,\n        name: 'viewPoolInformation',\n        params: [0],\n      },\n      {\n        address,\n        name: 'viewPoolInformation',\n        params: [1],\n      },\n      {\n        address,\n        name: 'viewPoolTaxRateOverflow',\n        params: [1],\n      },\n      // {\n      //   address,\n      //   name: 'numberPoints',\n      // },\n    ]\n\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate] = await multicallv2(ifoV2Abi, ifoCalls)\n\n    const poolBasicFormatted = formatPool(poolBasic)\n    const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n    const taxRateNum = taxRate ? taxRate[0].div(TAX_PRECISION).toNumber() : 0\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n      poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRateNum },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      // numberPoints: numberPoints ? numberPoints[0].toNumber() : 0,\n    }))\n  }, [address, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, currencyPriceInUSD2: lpTokenPriceInUsd2, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'ethers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\n// Retrieve IFO allowance\nconst useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.allowance(account, spenderAddress)\n        setAllowance(new BigNumber(res.toString()))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\nexport default useIfoAllowance\n","import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const { fastRefresh } = useRefresh()\n  const [state, setState] = useState<WalletIfoState>({\n    poolBasic: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n  })\n\n  const { address, currency } = ifo\n\n  const { account } = useWeb3React()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\n      address,\n      name: method,\n      params: [account, [0, 1]],\n    }))\n\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\n\n    setState((prevState) => ({\n      ...prevState,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\n        hasClaimed: userInfo[1][0],\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\n        hasClaimed: userInfo[1][1],\n      },\n    }))\n  }, [account, address])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData, fastRefresh])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@ricefarm/uikitv2'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Approving') : t('Approve')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Approving') : t('Approve')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Text, TextProps } from '@ricefarm/uikitv2'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\ninterface PercentageOfTotalProps extends TextProps {\n  userAmount: BigNumber\n  totalAmount: BigNumber\n}\n\nconst PercentageOfTotal: React.FC<PercentageOfTotalProps> = ({ userAmount, totalAmount, ...props }) => {\n  const { t } = useTranslation()\n  const percentOfUserContribution = totalAmount.isGreaterThan(0)\n    ? userAmount.div(totalAmount).times(100).toNumber()\n    : BIG_ZERO\n  const percentOfUserDisplay = percentOfUserContribution.toLocaleString(undefined, { maximumFractionDigits: 5 })\n\n  return (\n    <Text fontSize=\"14px\" color=\"textSubtle\" {...props}>\n      {t('%num% of total', { num: percentOfUserDisplay })}\n    </Text>\n  )\n}\n\nexport default PercentageOfTotal\n","import React from 'react'\nimport { Flex, Skeleton } from '@ricefarm/uikitv2'\n\nexport const SkeletonCardActions = () => {\n  return <Skeleton height=\"48px\" />\n}\n\nexport const SkeletonCardTokens = () => {\n  return (\n    <div>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n    </div>\n  )\n}\n\nexport const SkeletonCardDetails = () => {\n  return (\n    <div>\n      <Skeleton mb=\"8px\" />\n      <Skeleton />\n    </div>\n  )\n}\n\nexport default null\n","import React from 'react'\nimport {\n  Text,\n  Flex,\n  Box,\n  CheckmarkCircleIcon,\n  FlexProps,\n  HelpIcon,\n  useTooltip,\n  Button,\n  AutoRenewIcon,\n  BunnyPlaceholderIcon,\n} from '@ricefarm/uikitv2'\nimport { useWeb3React } from '@web3-react/core'\nimport { Ifo, PoolIds, Token } from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\nimport { EnableStatus } from '../types'\nimport PercentageOfTotal from './PercentageOfTotal'\nimport { SkeletonCardTokens } from './Skeletons'\n\ninterface TokenSectionProps extends FlexProps {\n  primaryToken?: Token\n  secondaryToken?: Token\n}\n\nconst TokenSection: React.FC<TokenSectionProps> = ({ primaryToken, secondaryToken, children, ...props }) => {\n  const renderTokenComponent = () => {\n    if (!primaryToken) {\n      return <BunnyPlaceholderIcon width={32} mr=\"16px\" />\n    }\n\n    if (primaryToken && secondaryToken) {\n      return (\n        <TokenPairImage\n          variant=\"inverted\"\n          primaryToken={primaryToken}\n          height={32}\n          width={32}\n          secondaryToken={secondaryToken}\n          mr=\"16px\"\n        />\n      )\n    }\n\n    return <TokenImage token={primaryToken} height={32} width={32} mr=\"16px\" />\n  }\n\n  return (\n    <Flex {...props}>\n      {renderTokenComponent()}\n      <div>{children}</div>\n    </Flex>\n  )\n}\n\n// const CakeBnbTokenSection: React.FC<TokenSectionProps> = (props) => {\n//   return <TokenSection primaryToken={tokens.cake} secondaryToken={tokens.wbnb} {...props} />\n// }\n\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" {...props} />\n\nconst Value = (props) => <Text bold fontSize=\"20px\" style={{ wordBreak: 'break-all' }} {...props} />\n\ninterface IfoCardTokensProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  // hasProfile: boolean\n  isLoading: boolean\n  onApprove: () => Promise<any>\n  enableStatus: EnableStatus\n}\n\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  // hasProfile,\n  isLoading,\n  onApprove,\n  enableStatus,\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\n      'Sorry, you didn’t contribute enough LP tokens to meet the minimum threshold. You didn’t buy anything in this sale, but you can still reclaim your LP tokens.',\n    ),\n    { placement: 'bottom' },\n  )\n\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  const { currency, currency2, token } = ifo\n  const { hasClaimed } = userPoolCharacteristics\n  const distributionRatio = ifo[poolId].distributionRatio * 100\n\n  const primaryToken = poolId === 'poolBasic' ? tokens.teslasafe : tokens.rice\n  const lpToken = (poolId === 'poolBasic' ? currency : currency2) || currency\n\n  const renderTokenSection = () => {\n    if (isLoading) {\n      return <SkeletonCardTokens />\n    }\n    // if (account && !hasProfile) {\n    //   if (publicIfoData.status === 'finished') {\n    //     return <Text textAlign=\"center\">{t('Activate PancakeSwap Profile to take part in next IFO‘s!')}</Text>\n    //   }\n    //   return <Text textAlign=\"center\">{t('You need an active PancakeSwap Profile to take part in an IFO!')}</Text>\n    // }\n    if (publicIfoData.status === 'coming_soon') {\n      return (\n        <>\n          <TokenSection>\n            <Label>{t('Your %symbol% committed', { symbol: lpToken.symbol })}</Label>\n            <Value>{getBalanceNumber(userPoolCharacteristics.amountTokenCommittedInLP, currency.decimals)}</Value>\n            <PercentageOfTotal\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\n            />\n          </TokenSection>\n          <Text fontSize=\"14px\" color=\"textSubtle\" pl=\"48px\">\n            {t('%ratio%% of total sale', { ratio: distributionRatio })}\n          </Text>\n          {enableStatus !== EnableStatus.ENABLED && account && (\n            <Button\n              width=\"100%\"\n              mt=\"16px\"\n              onClick={onApprove}\n              isLoading={enableStatus === EnableStatus.IS_ENABLING}\n              endIcon={enableStatus === EnableStatus.IS_ENABLING ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            >\n              {t('Enable')}\n            </Button>\n          )}\n        </>\n      )\n    }\n    if (publicIfoData.status === 'live') {\n      return (\n        <>\n          <TokenSection primaryToken={primaryToken} secondaryToken={tokens.wbnb} mb=\"24px\">\n            <Label>{t('Your %symbol% committed', { symbol: lpToken.symbol })}</Label>\n            <Value>{getBalanceNumber(userPoolCharacteristics.amountTokenCommittedInLP, lpToken.decimals)}</Value>\n            <PercentageOfTotal\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\n            />\n          </TokenSection>\n          <TokenSection primaryToken={ifo.token}>\n            <Label>{t('%symbol% to receive', { symbol: token.symbol })}</Label>\n            <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\n          </TokenSection>\n        </>\n      )\n    }\n    if (publicIfoData.status === 'finished') {\n      return userPoolCharacteristics.amountTokenCommittedInLP.isEqualTo(0) ? (\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n\t\t{/* <BunnyPlaceholderIcon width={80} mb=\"16px\" /> */}\n          <Text>{t('You didn’t participate in this sale!')}</Text>\n        </Flex>\n      ) : (\n        <>\n          <TokenSection primaryToken={primaryToken} secondaryToken={tokens.wbnb} mb=\"24px\">\n            <Label>\n              {t(hasClaimed ? 'Your %symbol% RECLAIMED' : 'Your %symbol% TO RECLAIM', { symbol: lpToken.symbol })}\n            </Label>\n            <Flex alignItems=\"center\">\n              <Value>{getBalanceNumber(userPoolCharacteristics.refundingAmountInLP, currency.decimals)}</Value>\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\n            </Flex>\n            <PercentageOfTotal\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\n            />\n          </TokenSection>\n          <TokenSection primaryToken={ifo.token}>\n            <Label> {t(hasClaimed ? '%symbol% received' : '%symbol% to receive', { symbol: token.symbol })}</Label>\n            <Flex alignItems=\"center\">\n              <Value>\n                {getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals).toFixed(6)}\n              </Value>\n              {!hasClaimed && userPoolCharacteristics.offeringAmountInToken.isEqualTo(0) && (\n                <div ref={targetRef} style={{ display: 'flex', marginLeft: '8px' }}>\n                  <HelpIcon />\n                </div>\n              )}\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\n            </Flex>\n          </TokenSection>\n        </>\n      )\n    }\n    return null\n  }\n  return (\n    <Box pb=\"24px\">\n      {tooltipVisible && tooltip}\n      {renderTokenSection()}\n    </Box>\n  )\n}\n\nexport default IfoCardTokens\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => ethers.providers.TransactionResponse\n  onConfirm: () => ethers.providers.TransactionResponse\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: (state: State) => void\n  onApproveSuccess?: (state: State) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess(state)\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async () => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm()\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess(state)\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@ricefarm/uikitv2'\nimport { PoolIds, Ifo } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { getAddress } from 'utils/addressHelpers'\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useERC20 } from 'hooks/useContract'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  userCurrencyBalance: BigNumber\n  onSuccess: (amount: BigNumber) => void\n  onDismiss?: () => void\n}\n\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\n\n// Default value for transaction setting, tweak based on BSC network congestion.\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst ContributeModal: React.FC<Props> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  userCurrencyBalance,\n  onDismiss,\n  onSuccess,\n}) => {\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  const { currency: currency1, currency2 } = ifo\n  const currency = poolId === 'poolBasic' ? currency1 : currency2\n  const currencyPriceInUSD =\n    poolId === 'poolBasic'\n      ? publicIfoData.currencyPriceInUSD\n      : publicIfoData.currencyPriceInUSD2 || publicIfoData.currencyPriceInUSD\n  const { limitPerUserInLP } = publicPoolCharacteristics\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\n  const { contract } = walletIfoData\n  const [value, setValue] = useState('')\n  const { account } = useWeb3React()\n  const raisingTokenContract = useERC20(getAddress(currency.address))\n  const { t } = useTranslation()\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL).decimalPlaces(0)\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await raisingTokenContract.allowance(account, contract.address)\n          const currentAllowance = new BigNumber(response.toString())\n          return currentAllowance.gt(0)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return raisingTokenContract.approve(contract.address, ethers.constants.MaxUint256, { gasPrice })\n      },\n      onConfirm: () => {\n        return contract.depositPool(valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1, {\n          gasPrice,\n        })\n      },\n      onSuccess: async () => {\n        await onSuccess(valueWithTokenDecimals)\n        onDismiss()\n      },\n    })\n\n  const maximumLpCommitable = (() => {\n    if (limitPerUserInLP.isGreaterThan(0)) {\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance)\n        ? limitPerUserInLP\n        : userCurrencyBalance\n    }\n    return userCurrencyBalance\n  })()\n\n  return (\n    <Modal title={t('Contribute %symbol%', { symbol: currency.symbol })} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"320px\">\n        {limitPerUserInLP.isGreaterThan(0) && (\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\n            <Text>{t('Max. LP token entry')}</Text>\n            <Text>{getBalanceAmount(limitPerUserInLP, currency.decimals).toString()}</Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Commit')}:</Text>\n          <Flex flexGrow={1} justifyContent=\"flex-end\">\n            <Image\n              src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`}\n              width={24}\n              height={24}\n            />\n            <Text>{currency.symbol}</Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          currencyValue={currencyPriceInUSD.times(value || 0).toFixed(2)}\n          onUserInput={setValue}\n          isWarning={valueWithTokenDecimals.isGreaterThan(maximumLpCommitable)}\n          decimals={currency.decimals}\n          mb=\"8px\"\n        />\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\n          {t('Balance: %balance%', {\n            balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString(),\n          })}\n        </Text>\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\n          {multiplierValues.map((multiplierValue, index) => (\n            <Button\n              key={multiplierValue}\n              scale=\"xs\"\n              variant=\"tertiary\"\n              onClick={() => setValue(getBalanceAmount(maximumLpCommitable.times(multiplierValue)).toString())}\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\n            >\n              {multiplierValue * 100}%\n            </Button>\n          ))}\n        </Flex>\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\n          {t(\n            'If you don’t commit enough LP tokens, you may not receive any IFO tokens at all and will only receive a full refund of your LP tokens.',\n          )}\n        </Text>\n        <ApproveConfirmButtons\n          isApproveDisabled={isConfirmed || isConfirming || isApproved}\n          isApproving={isApproving}\n          isConfirmDisabled={\n            !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0)\n          }\n          isConfirming={isConfirming}\n          onApprove={handleApprove}\n          onConfirm={handleConfirm}\n        />\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default ContributeModal\n","import React from 'react'\nimport { Modal, ModalBody, Text, Image, Button, Link, OpenNewIcon } from '@ricefarm/uikitv2'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_V1_ADD_LIQUIDITY_URL } from 'config'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface Props {\n  currency: Token\n  onDismiss?: () => void\n}\n\nconst GetLpModal: React.FC<Partial<Props>> = ({ currency, onDismiss }) => {\n  const { t } = useTranslation()\n  const ADD_RICE_LIQUIDITY = `${BASE_ADD_LIQUIDITY_URL}/BNB/0xAf734D39312c19e1C541E9c5BfBC4A6Ea5892746`\n  const ADD_TS_LIQUIDITY = `${BASE_V1_ADD_LIQUIDITY_URL}/BNB/0x3504de9e61FDFf2Fc70f5cC8a6D1Ee493434C1Aa`\n  return (\n    <Modal title={t('LP Tokens required')} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"288px\">\n        <Image\n          src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`}\n          width={72}\n          height={72}\n          margin=\"auto\"\n          mb=\"24px\"\n        />\n        <Text mb=\"16px\">{t(`You’ll need ${currency.symbol} tokens to participate in the IFO!`)}</Text>\n        <Text mb=\"24px\">{t('Get LP tokens, or make sure your tokens aren’t staked somewhere else.')}</Text>\n        <Button\n          as={Link}\n          external\n          href={currency.symbol === 'RICE-BNB LP' ? ADD_RICE_LIQUIDITY : ADD_TS_LIQUIDITY}\n          endIcon={<OpenNewIcon color=\"white\" />}\n          minWidth=\"100%\" // Bypass the width=\"fit-content\" on Links\n        >\n          {t('Get LP tokens')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default GetLpModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal } from '@ricefarm/uikitv2'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { getAddress } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\nimport ContributeModal from './ContributeModal'\nimport GetLpModal from './GetLpModal'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n}\nconst ContributeButton: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { isPendingTx, amountTokenCommittedInLP } = userPoolCharacteristics\n  const { limitPerUserInLP } = publicPoolCharacteristics\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const currency = (poolId === 'poolBasic' ? ifo.currency : ifo.currency2) || ifo.currency\n  const { balance: userCurrencyBalance } = useTokenBalance(getAddress(currency.address))\n\n  // Re-fetch all the data, and display a message when fetching is done\n  const handleContributeSuccess = async (amount: BigNumber) => {\n    await Promise.all([publicIfoData.fetchIfoData(), walletIfoData.fetchIfoData()])\n    toastSuccess(\n      t('Success!'),\n      t('You have contributed %amount% %lpName% tokens to this IFO!', {\n        amount: getBalanceNumber(amount),\n        lpName: currency.symbol,\n      }),\n    )\n  }\n\n  const [onPresentContributeModal] = useModal(\n    <ContributeModal\n      poolId={poolId}\n      ifo={ifo}\n      publicIfoData={publicIfoData}\n      walletIfoData={walletIfoData}\n      onSuccess={handleContributeSuccess}\n      userCurrencyBalance={userCurrencyBalance}\n    />,\n    false,\n  )\n\n  const [onPresentGetLpModal] = useModal(<GetLpModal currency={currency} />, false)\n\n  const isDisabled =\n    isPendingTx ||\n    (limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP))\n\n  return (\n    <Button\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\n      width=\"100%\"\n      disabled={isDisabled}\n    >\n      {isDisabled ? t('Max. Committed') : t('Commit LP Tokens')}\n    </Button>\n  )\n}\n\nexport default ContributeButton\n","import React from 'react'\nimport { AutoRenewIcon, Button } from '@ricefarm/uikitv2'\nimport { PoolIds } from 'config/constants/types'\nimport { WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface Props {\n  poolId: PoolIds\n  ifoVersion: number\n  walletIfoData: WalletIfoData\n}\n\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\n\n  const handleClaim = async () => {\n    try {\n      setPendingTx(true)\n\n      if (ifoVersion === 1) {\n        const tx = await walletIfoData.contract.harvest()\n        await tx.wait()\n      } else {\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\n        await tx.wait()\n      }\n\n      walletIfoData.setIsClaimed(poolId)\n      toastSuccess(t('Success!'), t('You have successfully claimed your rewards.'))\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(error)\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleClaim}\n      disabled={userPoolCharacteristics.isPendingTx}\n      width=\"100%\"\n      isLoading={userPoolCharacteristics.isPendingTx}\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n    >\n      {t('Claim')}\n    </Button>\n  )\n}\n\nexport default ClaimButton\n","import React from 'react'\n// import { useTranslation } from 'contexts/Localization'\n// import { Button } from '@ricefarm/uikitv2'\nimport { useWeb3React } from '@web3-react/core'\n// import { Link } from 'react-router-dom'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport ContributeButton from './ContributeButton'\nimport ClaimButton from './ClaimButton'\nimport { SkeletonCardActions } from './Skeletons'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  // hasProfile: boolean\n  isLoading: boolean\n}\n\nconst IfoCardActions: React.FC<Props> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  /* hasProfile, */ isLoading,\n}) => {\n  // const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  if (isLoading) {\n    return <SkeletonCardActions />\n  }\n\n  if (!account) {\n    return <ConnectWalletButton width=\"100%\" />\n  }\n\n  // if (!hasProfile) {\n  //   return (\n  //     <Button as={Link} to=\"/profile\" width=\"100%\">\n  //       {t('Activate your Profile')}\n  //     </Button>\n  //   )\n  // }\n\n  return (\n    <>\n      {publicIfoData.status === 'live' && (\n        <ContributeButton poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n      )}\n      {publicIfoData.status === 'finished' &&\n        !userPoolCharacteristics.hasClaimed &&\n        (userPoolCharacteristics.offeringAmountInToken.isGreaterThan(0) ||\n          userPoolCharacteristics.refundingAmountInLP.isGreaterThan(0)) && (\n          <ClaimButton poolId={poolId} ifoVersion={ifo.version} walletIfoData={walletIfoData} />\n        )}\n    </>\n  )\n}\n\nexport default IfoCardActions\n","import React from 'react'\nimport { Text, Flex, Box, Skeleton } from '@ricefarm/uikitv2'\nimport { PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { SkeletonCardDetails } from './Skeletons'\n\nexport interface IfoCardDetailsProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n}\n\nexport interface FooterEntryProps {\n  label: string\n  value: string | number\n}\n\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text small color=\"textSubtle\">\n        {label}\n      </Text>\n      {value ? (\n        <Text small textAlign=\"right\">\n          {value}\n        </Text>\n      ) : (\n        <Skeleton height={21} width={80} />\n      )}\n    </Flex>\n  )\n}\n\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData }) => {\n  const { t } = useTranslation()\n  const { status, currencyPriceInUSD: currencyPriceInUSD1, currencyPriceInUSD2 } = publicIfoData\n  const poolCharacteristic = publicIfoData[poolId]\n  const ifoPool = ifo[poolId]\n  const burnText = poolId === 'poolBasic' ? 'TeslaSafe to Pledge:' : 'RICE to Burn:'\n  const currencyPriceInUSD = poolId === 'poolBasic' ? currencyPriceInUSD1 : currencyPriceInUSD2 || currencyPriceInUSD1\n\n  /* Format start */\n  const maxLpTokens = getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\n  const taxRate = `${poolCharacteristic.taxRate}%`\n\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\n    .div(poolCharacteristic.raisingAmountPool)\n    .times(100)\n    .toFixed(2)\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber(), 0, 0)} (${totalCommittedPercent}%)`\n\n  /* Format end */\n\n  const renderBasedOnIfoStatus = () => {\n    if (status === 'coming_soon') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          <FooterEntry label={t(burnText)} value={ifo[poolId].cakeToBurn} />\n          <FooterEntry\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\n            value={`$${ifoPool.tokenOfferingPrice || ifo.tokenOfferingPrice}`}\n          />\n        </>\n      )\n    }\n    if (status === 'live') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\n        </>\n      )\n    }\n    if (status === 'finished') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          <FooterEntry label={t('RICE to burn:')} value={ifo[poolId].cakeToBurn} />\n          <FooterEntry\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\n            value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\n          />\n        </>\n      )\n    }\n    return <SkeletonCardDetails />\n  }\n\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoStatus()}</Box>\n}\n\nexport default IfoCardDetails\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Card, CardBody, CardHeader, Text, useTooltip, HelpIcon, Flex } from '@ricefarm/uikitv2'\nimport { Ifo, PoolIds } from 'config/constants/types'\n// import { useProfile } from 'state/profile/hooks'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport { EnableStatus } from '../types'\nimport IfoCardTokens from './IfoCardTokens'\nimport IfoCardActions from './IfoCardActions'\nimport IfoCardDetails from './IfoCardDetails'\n\ninterface IfoCardProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  onApprove: () => Promise<any>\n  enableStatus: EnableStatus\n}\n\ninterface CardConfig {\n  [key: string]: {\n    title: string\n    variant: 'blue' | 'violet'\n    tooltip: string\n  }\n}\n\nconst cardConfig: CardConfig = {\n  [PoolIds.poolBasic]: {\n    title: 'USDT (Limited)',\n    variant: 'violet',\n    tooltip: 'Every person can only commit a limited amount, but may expect a higher return per token committed.',\n  },\n  [PoolIds.poolUnlimited]: {\n    title: 'Rice (Unlimited)',\n    variant: 'blue',\n    tooltip: 'No limits on the amount you can commit. Additional fee applies when claiming.',\n  },\n}\n\nconst SmallCard: React.FC<IfoCardProps> = ({ poolId, ifo, publicIfoData, walletIfoData, onApprove, enableStatus }) => {\n  const { t } = useTranslation()\n  const config = cardConfig[poolId]\n  // const { hasProfile, isLoading: isProfileLoading } = useProfile()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t(config.tooltip), { placement: 'bottom' })\n\n  const isLoading = /* isProfileLoading || */ publicIfoData.status === 'idle'\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <Card>\n        <CardHeader variant={config.variant}>\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text bold fontSize=\"20px\">\n              {t(config.title)}\n            </Text>\n            <div ref={targetRef}>\n              <HelpIcon />\n            </div>\n          </Flex>\n        </CardHeader>\n        <CardBody>\n          <IfoCardTokens\n            poolId={poolId}\n            ifo={ifo}\n            publicIfoData={publicIfoData}\n            walletIfoData={walletIfoData}\n            // hasProfile={hasProfile}\n            isLoading={isLoading}\n            onApprove={onApprove}\n            enableStatus={enableStatus}\n          />\n          <IfoCardActions\n            poolId={poolId}\n            ifo={ifo}\n            publicIfoData={publicIfoData}\n            walletIfoData={walletIfoData}\n            // hasProfile={hasProfile}\n            isLoading={isLoading}\n          />\n          <IfoCardDetails poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} />\n        </CardBody>\n      </Card>\n    </>\n  )\n}\n\nexport default SmallCard\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Link, PocketWatchIcon, Text, Skeleton } from '@ricefarm/uikitv2'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { PublicIfoData } from 'views/Ifos/types'\n\ninterface Props {\n  publicIfoData: PublicIfoData\n}\n\nconst Timer: React.FC<Props> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n  const { status, secondsUntilStart, secondsUntilEnd, startBlockNum } = publicIfoData\n  const countdownToUse = status === 'coming_soon' ? secondsUntilStart : secondsUntilEnd\n  const timeUntil = getTimePeriods(countdownToUse)\n  const suffix = status === 'coming_soon' ? t('Start').toLowerCase() : t('Finish').toLowerCase()\n  return (\n    <Flex justifyContent=\"center\" mb=\"32px\">\n      {status === 'idle' ? (\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\n      ) : (\n        <>\n          <PocketWatchIcon width=\"48px\" mr=\"16px\" />\n          <Flex alignItems=\"center\">\n            <Text bold mr=\"16px\">\n              {suffix}:\n            </Text>\n            <Text>\n              {t('%day%d %hour%h %minute%m', {\n                day: timeUntil.days,\n                hour: timeUntil.hours,\n                minute: timeUntil.minutes,\n              })}\n            </Text>\n            <Link\n              href={getBscScanLink(startBlockNum, 'countdown')}\n              target=\"blank\"\n              rel=\"noopener noreferrer\"\n              ml=\"8px\"\n              textTransform=\"lowercase\"\n            >\n              {`(${t('Blocks')})`}\n            </Link>\n          </Flex>\n        </>\n      )}\n    </Flex>\n  )\n}\n\nexport default Timer\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, LinkExternal, Button, Text, MetamaskIcon /* Skeleton */ } from '@ricefarm/uikitv2'\nimport { useTranslation } from 'contexts/Localization'\nimport { PublicIfoData } from 'views/Ifos/types'\nimport { Ifo } from 'config/constants/types'\n// import { BIG_TEN } from 'utils/bigNumber'\nimport { getBscScanLink } from 'utils'\nimport { registerToken } from 'utils/wallet'\n\n// const MIN_DOLLAR_FOR_ACHIEVEMENT = BIG_TEN\n\ninterface Props {\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n}\n\nconst Container = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n    align-items: initial;\n  }\n`\n\n// const AchievementFlex = styled(Flex)<{ isFinished: boolean }>`\n//   ${({ isFinished }) => (isFinished ? 'filter: grayscale(100%)' : '')};\n// `\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  margin-top: 32px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-top: 0;\n  }\n`\nconst StyledLink = styled(Text)`\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  &:hover {\n    text-decoration: underline;\n  }\n`\n\nconst Achievement: React.FC<Props> = ({ ifo /* publicIfoData */ }) => {\n  const { t } = useTranslation()\n  // const tokenName = ifo.token.symbol.toLowerCase()\n  const campaignTitle = ifo.name\n  // const minLpForAchievement = MIN_DOLLAR_FOR_ACHIEVEMENT.div(publicIfoData.currencyPriceInUSD).toNumber()\n\n  return (\n    <Container>\n      {/* <AchievementFlex isFinished={publicIfoData.status === 'finished'} alignItems=\"center\" flexGrow={1}>\n        <Image src={`/images/achievements/ifo-${tokenName}.svg`} width={56} height={56} mr=\"8px\" />\n        <Flex flexDirection=\"column\">\n          <Text color=\"secondary\" fontSize=\"12px\">\n            {`${t('Achievement')}:`}\n          </Text>\n          <Flex>\n            <Text bold mr=\"8px\">\n              {t('IFO Shopper: %title%', { title: campaignTitle })}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <PrizeIcon color=\"textSubtle\" width=\"16px\" mr=\"4px\" />\n              <Text color=\"textSubtle\">{publicIfoData.numberPoints}</Text>\n            </Flex>\n          </Flex>\n          {publicIfoData.currencyPriceInUSD.gt(0) ? (\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {t('Commit ~%amount% LP in total to earn!', { amount: minLpForAchievement.toFixed(3) })}\n            </Text>\n          ) : (\n            <Skeleton minHeight={18} width={80} />\n          )}\n        </Flex>\n      </AchievementFlex> */}\n      <Flex flexDirection=\"column\" />\n      <Flex alignItems=\"flex-end\" flexDirection=\"column\">\n        <StyledLinkExternal href={ifo.articleUrl} mb=\"8px\">\n          {t('Learn more about %title%', { title: campaignTitle })}\n        </StyledLinkExternal>\n        <StyledLinkExternal href={getBscScanLink(ifo.address, 'address')}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLink>\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() =>\n              registerToken(ifo.token.address[process.env.REACT_APP_CHAIN_ID], ifo.token.symbol, ifo.token.decimals)\n            }\n          >\n            <Text color=\"primary\" bold fontSize=\"16px\">\n              Add to Metamask\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </StyledLink>\n      </Flex>\n    </Container>\n  )\n}\n\nexport default Achievement\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\n\nconst useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.approve(spenderAddress, ethers.constants.MaxUint256)\n    await tx.wait()\n  }, [spenderAddress, tokenContract])\n\n  return onApprove\n}\n\nexport default useIfoApprove\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardRibbon,\n  ExpandableButton,\n  Progress,\n  Button,\n  ChevronUpIcon,\n} from '@ricefarm/uikitv2'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport { EnableStatus } from './types'\nimport IfoPoolCard from './IfoPoolCard'\nimport Timer from './Timer'\nimport Achievement from './Achievement'\nimport useIfoApprove from '../../hooks/useIfoApprove'\n\ninterface IfoFoldableCardProps {\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  isInitiallyVisible: boolean\n}\n\nconst getRibbonComponent = (ifo: Ifo, status: IfoStatus, t: any) => {\n  if (status === 'coming_soon') {\n    return <CardRibbon variantColor=\"textDisabled\" ribbonPosition=\"left\" text={t('Coming Soon')} />\n  }\n\n  if (status === 'live' || (status === 'finished' && ifo.isActive)) {\n    return (\n      <CardRibbon\n        variantColor=\"primary\"\n        ribbonPosition=\"left\"\n        style={{ textTransform: 'uppercase' }}\n        text={status === 'live' ? `${t('Live')}!` : `${t('Finished')}!`}\n      />\n    )\n  }\n\n  return null\n}\n\nconst StyledCard = styled(Card)`\n  max-width: 736px;\n  width: 100%;\n  margin: auto;\n`\n\nconst Header = styled(CardHeader)<{ ifoId: string }>`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  height: 112px;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  background-image: ${({ ifoId }) => `url('/images/ifos/${ifoId}-bg.png')`};\n`\n\nconst FoldableContent = styled.div<{ isVisible: boolean; isActive: boolean }>`\n  display: ${({ isVisible }) => (isVisible ? 'block' : 'none')};\n  background: ${({ isActive, theme }) => (isActive ? theme.colors.gradients.bubblegum : theme.colors.dropdown)};\n`\n\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-bottom: 32px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: ${({ singleCard }) => (singleCard ? '1fr' : '1fr 1fr')};\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\n  }\n`\n\nconst StyledCardBody = styled(CardBody)`\n  padding: 24px 16px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 24px;\n  }\n`\n\nconst StyledCardFooter = styled(CardFooter)`\n  text-align: center;\n  padding: 8px;\n  background: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\nconst IfoFoldableCard: React.FC<IfoFoldableCardProps> = ({ ifo, publicIfoData, walletIfoData, isInitiallyVisible }) => {\n  const [isVisible, setIsVisible] = useState(false)\n  const [enableStatus, setEnableStatus] = useState(EnableStatus.DISABLED)\n  const [enableStatus2, setEnableStatus2] = useState(EnableStatus.DISABLED)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currency2 = ifo.version === 1 ? ifo.currency : ifo.currency2\n  const raisingTokenContract = useERC20(getAddress(ifo.currency.address))\n  const raisingTokenContract2 = useERC20(getAddress(currency2.address))\n  const Ribbon = getRibbonComponent(ifo, publicIfoData.status, t)\n  const isActive = publicIfoData.status !== 'finished' && ifo.isActive\n  const { contract } = walletIfoData\n  const onApprove = useIfoApprove(raisingTokenContract, contract.address)\n  const onApprove2 = useIfoApprove(raisingTokenContract2, contract.address)\n  const { toastSuccess } = useToast()\n\n  const handleApprove = async () => {\n    try {\n      setEnableStatus(EnableStatus.IS_ENABLING)\n\n      await onApprove()\n\n      setEnableStatus(EnableStatus.ENABLED)\n      toastSuccess(\n        t('Successfully Enabled!'),\n        t('You can now participate in the %symbol% IFO with %currency%.', {\n          symbol: ifo.token.symbol,\n          currency: ifo.currency.symbol,\n        }),\n      )\n    } catch (error) {\n      setEnableStatus(EnableStatus.DISABLED)\n    }\n  }\n\n  const handleApprove2 = async () => {\n    try {\n      setEnableStatus2(EnableStatus.IS_ENABLING)\n\n      await onApprove2()\n\n      setEnableStatus2(EnableStatus.ENABLED)\n      toastSuccess(\n        t('Successfully Enabled!'),\n        t('You can now participate in the %symbol% IFO with %currency%.', {\n          symbol: ifo.token.symbol,\n          currency: ifo.currency2.symbol,\n        }),\n      )\n    } catch (error) {\n      setEnableStatus2(EnableStatus.DISABLED)\n    }\n  }\n\n  useEffect(() => {\n    const checkAllowance = async () => {\n      try {\n        const response = await raisingTokenContract.allowance(account, contract.address)\n        const currentAllowance = new BigNumber(response.toString())\n        setEnableStatus(currentAllowance.lte(0) ? EnableStatus.DISABLED : EnableStatus.ENABLED)\n      } catch (error) {\n        setEnableStatus(EnableStatus.DISABLED)\n      }\n    }\n\n    if (account) {\n      checkAllowance()\n    }\n  }, [account, raisingTokenContract, contract, setEnableStatus])\n\n  useEffect(() => {\n    const checkAllowance2 = async () => {\n      try {\n        const response = await raisingTokenContract2.allowance(account, contract.address)\n        const currentAllowance = new BigNumber(response)\n        setEnableStatus2(currentAllowance.lte(0) ? EnableStatus.DISABLED : EnableStatus.ENABLED)\n      } catch (error) {\n        setEnableStatus2(EnableStatus.DISABLED)\n      }\n    }\n\n    if (account) {\n      checkAllowance2()\n    }\n  }, [account, raisingTokenContract2, contract, setEnableStatus2])\n\n  return (\n    <StyledCard ribbon={Ribbon}>\n      <Header ifoId={ifo.id}>\n        <ExpandableButton expanded={isVisible} onClick={() => setIsVisible((prev) => !prev)} />\n      </Header>\n      <FoldableContent isVisible={isVisible} isActive={publicIfoData.status !== 'idle' && isActive}>\n        {isActive && <Progress variant=\"flat\" primaryStep={publicIfoData.progress} />}\n        <StyledCardBody>\n          {isActive && <Timer publicIfoData={publicIfoData} />}\n          <CardsWrapper singleCard={!publicIfoData.poolBasic || !walletIfoData.poolBasic}>\n            {publicIfoData.poolBasic && walletIfoData.poolBasic && (\n              <IfoPoolCard\n                poolId={PoolIds.poolBasic}\n                ifo={ifo}\n                publicIfoData={publicIfoData}\n                walletIfoData={walletIfoData}\n                onApprove={handleApprove}\n                enableStatus={enableStatus}\n              />\n            )}\n            <IfoPoolCard\n              poolId={PoolIds.poolUnlimited}\n              ifo={ifo}\n              publicIfoData={publicIfoData}\n              walletIfoData={walletIfoData}\n              onApprove={handleApprove2}\n              enableStatus={enableStatus2}\n            />\n          </CardsWrapper>\n          <Achievement ifo={ifo} publicIfoData={publicIfoData} />\n        </StyledCardBody>\n        <StyledCardFooter>\n          <Button variant=\"text\" endIcon={<ChevronUpIcon color=\"primary\" />} onClick={() => setIsVisible(false)}>\n            {t('Close')}\n          </Button>\n        </StyledCardFooter>\n      </FoldableContent>\n    </StyledCard>\n  )\n}\n\nexport default IfoFoldableCard\n","import styled from 'styled-components'\n\nconst IfoLayout = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  padding: 40px 0;\n  border-top: 2px solid ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport default IfoLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport every from 'lodash/every'\nimport { Stepper, Step, StepStatus, Card, CardBody, Heading, Text, Button, Link, OpenNewIcon } from '@ricefarm/uikitv2'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_V1_ADD_LIQUIDITY_URL } from 'config'\nimport { Ifo } from 'config/constants/types'\nimport { WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport Container from 'components/Layout/Container'\n// import { useProfile } from 'state/profile/hooks'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface Props {\n  ifo: Ifo\n  walletIfoData: WalletIfoData\n}\n\nconst Wrapper = styled(Container)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  margin-left: -16px;\n  margin-right: -16px;\n  padding-top: 48px;\n  padding-bottom: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: -24px;\n    margin-right: -24px;\n  }\n`\n\nconst IfoSteps: React.FC<Props> = ({ ifo, walletIfoData }) => {\n  const { poolBasic, poolUnlimited } = walletIfoData\n  // const { hasProfile } = useProfile()\n  const { t } = useTranslation()\n  const { balance } = useTokenBalance(getAddress(ifo.currency.address))\n  const { balance: balance2 } = useTokenBalance(getAddress(ifo.currency2.address))\n  const stepsValidationStatus = [\n    balance.isGreaterThan(0),\n    balance2.isGreaterThan(0),\n    poolBasic.amountTokenCommittedInLP.isGreaterThan(0) || poolUnlimited.amountTokenCommittedInLP.isGreaterThan(0),\n    poolBasic.hasClaimed || poolUnlimited.hasClaimed,\n  ]\n\n  const getStatusProp = (index: number): StepStatus => {\n    const arePreviousValid = index === 0 ? true : every(stepsValidationStatus.slice(0, index), Boolean)\n    if (stepsValidationStatus[index]) {\n      return arePreviousValid ? 'past' : 'future'\n    }\n    return arePreviousValid ? 'current' : 'future'\n  }\n\n  const renderCardBody = (step: number) => {\n    // const isStepValid = stepsValidationStatus[step]\n    switch (step) {\n      case 0:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Get USDT Tokens')}\n            </Heading>\n            <Text color=\"textSubtle\" small>\n              {t('Use USDT to buy tokens.')} <br />\n              {t('You’ll spend them to buy IFO sale tokens.')}\n            </Text>\n            <Button\n              as={Link}\n              external\n              href={`${BASE_ADD_LIQUIDITY_URL}/BNB/0x55d398326f99059fF775485246999027B3197955`}\n              endIcon={<OpenNewIcon color=\"white\" />}\n              mt=\"16px\"\n            >\n              {t('Get USDT')}\n            </Button>\n          </CardBody>\n        )\n      case 1:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Get RICE-BNB LP Tokens')}\n            </Heading>\n            <Text color=\"textSubtle\" small>\n              {t('Stake RICE and BNB in the liquidity pool to get LP tokens.')} <br />\n              {t('You’ll spend them to buy IFO sale tokens.')}\n            </Text>\n            <Button\n              as={Link}\n              external\n              href={`${BASE_ADD_LIQUIDITY_URL}/BNB/0xAf734D39312c19e1C541E9c5BfBC4A6Ea5892746`}\n              endIcon={<OpenNewIcon color=\"white\" />}\n              mt=\"16px\"\n            >\n              {t('Get RICE-BNB LP tokens')}\n            </Button>\n          </CardBody>\n        )\n      case 2:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Commit LP Tokens')}\n            </Heading>\n            <Text color=\"textSubtle\" small>\n              {t('When the IFO sales are live, you can “commit” your LP tokens to buy the tokens being sold.')} <br />\n              {t('We recommend committing to both TeslaSafe and Rice Sales, but you can also do just one sale.')}\n            </Text>\n          </CardBody>\n        )\n      case 3:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Claim your tokens')}\n            </Heading>\n            <Text color=\"textSubtle\" small>\n              {t(\n                'After the IFO sales finish, you can claim any IFO tokens that you bought, and any unspent RICE-BNB LP tokens will be returned to your wallet.',\n              )}\n            </Text>\n          </CardBody>\n        )\n      default:\n        return null\n    }\n  }\n\n  return (\n    <Wrapper>\n      <Heading as=\"h2\" scale=\"xl\" color=\"secondary\" mb=\"24px\" textAlign=\"center\">\n        {t('How to Take Part')}\n      </Heading>\n      <Stepper>\n        {stepsValidationStatus.map((_, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <Step key={index} index={index} status={getStatusProp(index)}>\n            <Card>{renderCardBody(index)}</Card>\n          </Step>\n        ))}\n      </Stepper>\n    </Wrapper>\n  )\n}\n\nexport default IfoSteps\n","import React from 'react'\nimport { ifosConfig } from 'config/constants'\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\nimport IfoFoldableCard from './components/IfoFoldableCard'\nimport IfoLayout from './components/IfoLayout'\nimport IfoSteps from './components/IfoSteps'\nimport IfoQuestions from './components/IfoQuestions'\n\n/**\n * Note: currently there should be only 1 active IFO at a time\n */\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\n\nconst Ifo = () => {\n  const publicIfoData = useGetPublicIfoV2Data(activeIfo)\n  const walletIfoData = useGetWalletIfoV2Data(activeIfo)\n\n  return (\n    <IfoLayout>\n      <IfoFoldableCard ifo={activeIfo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} isInitiallyVisible />\n      <IfoSteps ifo={activeIfo} walletIfoData={walletIfoData} />\n\t\t  {/* <IfoQuestions /> */}\n    </IfoLayout>\n  )\n}\n\nexport default Ifo\n","import React from 'react'\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n  isInitiallyVisible: boolean\n}\n\nconst IfoCardV2Data: React.FC<Props> = ({ ifo, isInitiallyVisible }) => {\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\n  const walletIfoData = useGetWalletIfoV2Data(ifo)\n\n  return (\n    <IfoFoldableCard\n      ifo={ifo}\n      publicIfoData={publicIfoData}\n      walletIfoData={walletIfoData}\n      isInitiallyVisible={isInitiallyVisible}\n    />\n  )\n}\n\nexport default IfoCardV2Data\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { useBlock } from 'state/block/hooks'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO, // Not know\n      limitPerUserInLP: BIG_ZERO, //  Not used\n      taxRate: 0, //  Not used\n      sumTaxesOverflow: BIG_ZERO, //  Not used\n    },\n  })\n  const { currentBlock } = useBlock()\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\n      address,\n      name: method,\n    }))\n\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      status,\n      blocksRemaining,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      progress,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      startBlockNum,\n      endBlockNum,\n      currencyPriceInUSD: null,\n      numberPoints: null,\n      [PoolIds.poolUnlimited]: {\n        ...prev.poolUnlimited,\n        raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\n        totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\n      },\n    }))\n  }, [address, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\ninterface UserInfo {\n  amount: BigNumber\n  claimed: boolean\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO, // Not used\n    },\n  })\n\n  const { address, currency } = ifo\n  const { poolUnlimited } = state\n\n  const { account } = useWeb3React()\n  const contract = useIfoV1Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\n      address,\n      name: method,\n      params: [account],\n    }))\n\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n    const parsedUserInfo: UserInfo = userInfoResponse\n      ? {\n          amount: new BigNumber(userInfoResponse.amount.toString()),\n          claimed: userInfoResponse.claimed,\n        }\n      : { amount: BIG_ZERO, claimed: false }\n\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: parsedUserInfo.amount,\n        hasClaimed: parsedUserInfo.claimed,\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\n      },\n    }))\n  }, [account, address])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n","import React from 'react'\nimport useGetPublicIfoV1Data from 'views/Ifos/hooks/v1/useGetPublicIfoData'\nimport useGetWalletIfoV1Data from 'views/Ifos/hooks/v1/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n}\n\nconst IfoCardV1Data: React.FC<Props> = ({ ifo }) => {\n  const publicIfoData = useGetPublicIfoV1Data(ifo)\n  const walletIfoData = useGetWalletIfoV1Data(ifo)\n\n  return (\n    <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} isInitiallyVisible={false} />\n  )\n}\n\nexport default IfoCardV1Data\n","import React from 'react'\nimport { ifosConfig } from 'config/constants'\nimport { Ifo } from 'config/constants/types'\nimport IfoCardV2Data from './components/IfoCardV2Data'\nimport IfoCardV1Data from './components/IfoCardV1Data'\nimport IfoLayout from './components/IfoLayout'\n\nconst inactiveIfo: Ifo[] = ifosConfig.filter((ifo) => !ifo.isActive)\n\nconst PastIfo = () => {\n  return (\n    <IfoLayout>\n      {inactiveIfo.map((ifo) =>\n        ifo.version === 1 ? (\n          <IfoCardV1Data key={ifo.id} ifo={ifo} />\n        ) : (\n          <IfoCardV2Data key={ifo.id} ifo={ifo} isInitiallyVisible={false} />\n        ),\n      )}\n    </IfoLayout>\n  )\n}\n\nexport default PastIfo\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Flex } from '@ricefarm/uikitv2'\nimport Container from 'components/Layout/Container'\nimport Hero from './components/Hero'\nimport CurrentIfo from './CurrentIfo'\nimport PastIfo from './PastIfo'\n\nconst Ifos = () => {\n  const { t } = useTranslation()\n  const { path, url, isExact } = useRouteMatch()\n\n  return (\n    <>\n      <Hero />\n      <Container>\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"32px\">\n          <ButtonMenu activeIndex={!isExact ? 1 : 0} scale=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem as={Link} to={`${url}`}>\n              {t('Next IFO')}\n            </ButtonMenuItem>\n            <ButtonMenuItem as={Link} to={`${url}/history`}>\n              {t('Past IFOs')}\n            </ButtonMenuItem>\n          </ButtonMenu>\n        </Flex>\n        <Route exact path={`${path}`}>\n          <CurrentIfo />\n        </Route>\n        <Route path={`${path}/history`}>\n          <PastIfo />\n        </Route>\n      </Container>\n    </>\n  )\n}\n\nexport default Ifos\n"],"sourceRoot":""}
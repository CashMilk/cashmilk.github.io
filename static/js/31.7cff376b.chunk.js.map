{"version":3,"sources":["views/NftMarket/components/NftDataLeftComponent.tsx","views/NftMarket/components/NftDataRightComponent.tsx","views/NftMarket/components/NftData.tsx","views/NftMarket/components/NftMarketRule.tsx","views/NftMarket/components/NftDetailHeader.tsx","views/NftMarket/NftMarketDetail.tsx"],"names":["NftMetaDataContainer","styled","div","NftImageContainer","NftImage","NftInfo","NftTitleContainer","NftSalePriceContainer","NftSalePrice","NftSalePriceTitleContainer","TokenSelectContainer","NftSalePriceDetail","BuyNowBtnContainer","web3","Web3","givenProvider","NftDataLeftComponent","itemId","isDark","useTheme","history","useHistory","account","useWallet","useState","isAIR","setIsAIR","image","setImage","name","setName","salePrice","setSalePrice","milkPrice","setMilkPrice","description","setDescription","flgButtonState","setFlgButtonState","flgMyNft","setFlgMyNft","setLoading","useContext","LoadingContext","cakePriceUsd","usePriceCakeBusd","happyCowsContract","useMemo","eth","Contract","HappyCows","abi","getHappyCowAddress","marketContract","Market","getMarketAddress","airnftContract","AirNfts","getAirNftAddress","milkTokenContract","MilkToken","getMilkAddress","fetchNft","useCallback","a","methods","fetchMarketItems","call","from","marketItems","isAirToken","tokenId","i","length","nftContract","fromWei","price","seller","nftHash","tokenURI","toBN","fetch","res","json","imageUrl","slice","PINATA_BASE_URI","toNumber","useEffect","buyNft","priceWei","toWei","allowance","parseInt","toString","approve","send","toast","success","createMarketSale","push","message","error","style","backgroundImage","paddingTop","fontSize","color","background","boxShadow","fontWeight","display","alignItems","cursor","width","height","marginRight","transform","alt","src","getNumberSuffix","marginLeft","Math","round","flex","onClick","disabled","NftOnChainDataContainer","NftOnChainDataTitle","NftOnChainDetailContainer","NftOnChainDetail","NftOnChainEachData","NftOnChainLinkStyle","NftDataRightComponent","setTokenId","ownerAddress","setOwnerAddress","dna","setDna","attr","setAttr","index","isTokenAir","attributes","rel","target","href","textDecoration","map","item","trait_type","value","NftDataContainer","GradientBack","NftDataSeperation","NftData","NftMarketRuleContainer","NftMarketRuleTitle","NftMarketRuleContent","NftMarketRuleEach","NftMarketRule","NftDetailHeaderContainer","NftDetailPrevious","NftDetailHeader","collectionName","to","padding","StyledHero","NftDetailContainer","NftMarketDetail","useParams","Page","as","size","mb"],"mappings":"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","file":"static/js/31.7cff376b.chunk.js","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\nimport toast from 'react-hot-toast'\nimport { Button } from 'cashcow-uikit'\nimport AirNfts from 'config/abi/AirNft.json'\nimport Market from 'config/abi/Market.json'\nimport HappyCows from 'config/abi/HappyCows.json'\nimport MilkToken from 'config/abi/MilkToken.json'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { fromWei, AbiItem, toBN, toWei } from 'web3-utils'\nimport Web3 from 'web3'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { getHappyCowAddress, getMilkAddress, getMarketAddress, getAirNftAddress } from 'utils/addressHelpers'\nimport useTheme from 'hooks/useTheme'\nimport { LoadingContext } from 'contexts/LoadingContext'\nimport { PINATA_BASE_URI } from 'config/constants/nfts'\nimport { getNumberSuffix } from 'utils/formatBalance'\n\nconst NftMetaDataContainer = styled.div`\n  display: flex;\n  padding: 16px 32px;\n  flex: 1;\n  flex-wrap: wrap;\n  align-items: inherit;\n\n  @media (max-width: 768px) {\n    justify-content: center;\n  }\n`\nconst NftImageContainer = styled.div`\n  max-width: 332px;\n  max-height: 100%;\n  min-width: 240px;\n  min-height: 240px;\n  width: 46%;\n  border-radius: 16px 16px 0 0;\n  overflow: hidden;\n  margin: 16px 32px 16px 0;\n  position: relative;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst NftImage = styled.div`\n  width: 100%;\n  padding-bottom: 100%;\n  height: 0;\n  background-repeat: no-repeat;\n  background-position: 50%;\n  background-size: auto 100%;\n`\n\nconst NftInfo = styled.div`\n  flex: 1;\n  min-width: 220px;\n  margin: 16px 0;\n  display: flex;\n  flex-direction: column;\n`\n\nconst NftTitleContainer = styled.div`\n  font-size: 28px;\n  font-weight: 600;\n  color: #431216;\n  word-break: break-word;\n`\n\nconst NftSalePriceContainer = styled.div`\n  margin-top: 20px;\n  box-shadow: 0 6px 12px 0 rgb(0 0 0 / 6%), 0 -1px 2px 0 rgb(0 0 0 / 2%);\n  border-radius: 16px;\n  display: flex;\n`\n\nconst NftSalePrice = styled.div`\n  padding: 16px;\n  flex: 1;\n`\nconst NftSalePriceTitleContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n  color: #694f4e;\n`\n\nconst TokenSelectContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\nconst NftSalePriceDetail = styled.div`\n  font-size: 28px;\n  color: #431216;\n  font-weight: 700;\n  margin-top: 6px;\n  display: flex;\n  align-items: center;\n`\nconst BuyNowBtnContainer = styled.div`\n  margin-top: 24px;\n`\nconst web3 = new Web3(Web3.givenProvider)\n\nexport interface NftDataLeftComponentInterface {\n  itemId?: string\n}\n\nconst NftDataLeftComponent = ({ itemId }: NftDataLeftComponentInterface) => {\n  const { isDark } = useTheme()\n  const history = useHistory()\n  const { account } = useWallet()\n  // const [selectedToken, setSelectedToken] = useState('Milk');\n  const selectedToken = 'Milk'\n  const [isAIR, setIsAIR] = useState(false)\n  const [image, setImage] = useState('')\n  const [name, setName] = useState('')\n  const [salePrice, setSalePrice] = useState('')\n  const [milkPrice, setMilkPrice] = useState(0)\n  const [description, setDescription] = useState('')\n  const [flgButtonState, setFlgButtonState] = useState(true)\n  const [flgMyNft, setFlgMyNft] = useState(false)\n  const { setLoading } = useContext(LoadingContext)\n  const cakePriceUsd = usePriceCakeBusd()\n\n  const happyCowsContract = useMemo(() => {\n    return new web3.eth.Contract(HappyCows.abi as AbiItem[], getHappyCowAddress())\n  }, [])\n\n  const marketContract = useMemo(() => {\n    return new web3.eth.Contract(Market.abi as AbiItem[], getMarketAddress())\n  }, [])\n\n  const airnftContract = useMemo(() => {\n    return new web3.eth.Contract(AirNfts.abi as AbiItem[], getAirNftAddress())\n  }, [])\n  const milkTokenContract = new web3.eth.Contract(MilkToken.abi as AbiItem[], getMilkAddress())\n\n  const fetchNft = useCallback(async () => {\n    const marketItems = await marketContract.methods.fetchMarketItems().call({ from: account })\n    let isAirToken = false\n    let tokenId = null\n    for (let i = 0; i < marketItems.length; i++) {\n      if (marketItems[i].itemId === itemId) {\n        isAirToken = marketItems[i].nftContract === getAirNftAddress()\n        tokenId = marketItems[i].tokenId\n        setSalePrice(fromWei(marketItems[i].price, 'ether'))\n        if (marketItems[i].seller === account) {\n          setFlgMyNft(true)\n        }\n        break\n      }\n    }\n\n    if (!tokenId) return\n\n    let nftHash = null\n    if (isAirToken) nftHash = await airnftContract.methods.tokenURI(toBN(tokenId)).call({ from: account })\n    else nftHash = await happyCowsContract.methods.tokenURI(toBN(tokenId)).call({ from: account })\n    const res = await fetch(nftHash)\n    const json = await res.json()\n\n    let imageUrl = json.image\n    if (isAirToken) {\n      setImage('https://ipfs.io/ipfs/QmQVga2UJapPr4USAEtThiqxg9CRnhtrB4wyf2oSx3ZaJT')\n    } else {\n      imageUrl = imageUrl.slice(7)\n      setImage(`${PINATA_BASE_URI}${imageUrl}`)\n    }\n    setIsAIR(isAirToken)\n    setName(json.name)\n    setDescription(json.description)\n\n    setMilkPrice(cakePriceUsd.toNumber())\n  }, [account, marketContract, airnftContract, itemId, happyCowsContract, cakePriceUsd])\n  useEffect(() => {\n    fetchNft()\n  }, [fetchNft])\n\n  const buyNft = async () => {\n    setFlgButtonState(false)\n    setLoading(true)\n\n    try {\n      const priceWei = toWei(toBN('10000000000000000000000000000000000000000'), 'ether')\n      const allowance = await milkTokenContract.methods.allowance(account, getMarketAddress()).call()\n\n      if (parseInt(allowance.toString()) < parseInt(salePrice)) {\n        await milkTokenContract.methods.approve(getMarketAddress(), priceWei).send({ from: account })\n        toast.success('Approved Milk token.')\n      }\n      if (isAIR) await marketContract.methods.createMarketSale(getAirNftAddress(), itemId).send({ from: account })\n      else await marketContract.methods.createMarketSale(getHappyCowAddress(), itemId).send({ from: account })\n      history.push('/nft-market')\n      toast.success('Successfully bought NFT.')\n    } catch (error) {\n      const { message } = error as Error\n      toast.error(message)\n    }\n\n    setFlgButtonState(true)\n    setLoading(false)\n  }\n  return (\n    <NftMetaDataContainer>\n      <NftImageContainer>\n        <NftImage style={{ backgroundImage: `url(${image})` }} />\n        <div style={{ paddingTop: '10px', fontSize: '17px', color: isDark ? 'white' : 'rgb(105, 79, 78)' }}>\n          {description}\n        </div>\n      </NftImageContainer>\n      <NftInfo>\n        <NftTitleContainer style={{ color: isDark ? 'white' : '' }}>{name}</NftTitleContainer>\n        <NftSalePriceContainer\n          style={{\n            background: isDark ? '#16151a' : '',\n            boxShadow: isDark ? '0 6px 12px 0 rgb(255 255 255 / 6%), 0 -1px 2px 0 rgb(255 255 255 / 2%)' : '',\n          }}\n        >\n          <NftSalePrice>\n            <NftSalePriceTitleContainer style={{ color: isDark ? 'white' : '' }}>\n              Sale Price\n              <TokenSelectContainer>\n                <div\n                  style={{\n                    color: `${selectedToken === 'Milk' ? '#F0B90B' : '#694f4e'}`,\n                    fontWeight: selectedToken === 'Milk' ? 700 : 400,\n                  }}\n                >\n                  <div\n                    style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', color: isDark ? 'white' : '' }}\n                  >\n                    <img\n                      style={{ width: '16px', height: '16px', marginRight: '5px', transform: 'translateY(-.5px)' }}\n                      alt=\"Milk Token Icon\"\n                      src=\"/images/farms/milk.png\"\n                    />\n                    Milk\n                  </div>\n                </div>\n              </TokenSelectContainer>\n            </NftSalePriceTitleContainer>\n            <NftSalePriceDetail style={{ color: isDark ? 'white' : '' }}>\n              <img\n                style={{ width: '24px', height: '24px', marginRight: '8px' }}\n                src={selectedToken === 'Milk' ? '/images/farms/milk.png' : '/images/tokens/darkBNB.png'}\n                alt=\"Token Icon\"\n              />\n              {getNumberSuffix(salePrice,0)}\n              <span\n                style={{ fontSize: '14px', color: isDark ? 'white' : '#694f4e', fontWeight: 400, marginLeft: '4px' }}\n              >\n                ≈ ${getNumberSuffix(Math.round(milkPrice * parseInt(salePrice) * 100) / 100)}\n              </span>\n            </NftSalePriceDetail>\n          </NftSalePrice>\n        </NftSalePriceContainer>\n        <div style={{ flex: 1 }} />\n        <BuyNowBtnContainer>\n          <div>\n            {account && flgButtonState && !flgMyNft ? (\n              <Button style={{ width: '100%' }} onClick={buyNft}>\n                Buy NFT\n              </Button>\n            ) : (\n              <Button style={{ width: '100%' }} disabled>\n                {flgMyNft ? 'Your Listing NFT' : 'Buy NFT'}\n              </Button>\n            )}\n          </div>\n        </BuyNowBtnContainer>\n      </NftInfo>\n    </NftMetaDataContainer>\n  )\n}\n\nexport default NftDataLeftComponent\n","import React, { useEffect, useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport AirNfts from 'config/abi/AirNft.json'\nimport Market from 'config/abi/Market.json'\nimport HappyCows from 'config/abi/HappyCows.json'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { AbiItem, toBN } from 'web3-utils'\nimport Web3 from 'web3'\nimport { getHappyCowAddress, getMarketAddress, getAirNftAddress } from 'utils/addressHelpers'\nimport useTheme from 'hooks/useTheme'\n\nconst NftOnChainDataContainer = styled.div`\n  display: flex;\n  min-width: 280px;\n  max-width: 330px;\n  width: 30%;\n  padding: 32px;\n  box-sizing: border-box;\n  flex-direction: column;\n\n  @media (max-width: 768px) {\n    max-width: unset;\n    width: 100%;\n  }\n`\n\nconst NftOnChainDataTitle = styled.div`\n  font-size: 20px;\n  font-weight: 700;\n  color: #431216;\n`\n\nconst NftOnChainDetailContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 15px 0;\n`\n\nconst NftOnChainDetail = styled.div`\n  padding: 18px 0 0;\n  font-size: 14px;\n`\n\nconst NftOnChainEachData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n`\n\nconst NftOnChainLinkStyle = styled.div`\n  color: #431216;\n  font-weight: 500;\n  max-width: 50%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nconst web3 = new Web3(Web3.givenProvider)\n\nexport interface NftDataRightComponentInterface {\n  itemId?: string\n}\n\nconst NftDataRightComponent = ({ itemId }: NftDataRightComponentInterface) => {\n  const { isDark } = useTheme()\n  const { account } = useWallet()\n  const [isAIR, setIsAIR] = useState(false)\n  const [tokenId, setTokenId] = useState('')\n  const [ownerAddress, setOwnerAddress] = useState('')\n  const [dna, setDna] = useState('')\n  const [attr, setAttr] = useState([])\n\n  const marketContract = useMemo(() => {\n    return new web3.eth.Contract(Market.abi as AbiItem[], getMarketAddress())\n  }, [])\n\n  const happyCowsContract = useMemo(() => {\n    return new web3.eth.Contract(HappyCows.abi as AbiItem[], getHappyCowAddress())\n  }, [])\n\n  const airnftContract = useMemo(() => {\n    return new web3.eth.Contract(AirNfts.abi as AbiItem[], getAirNftAddress())\n  }, [])\n\n  const fetchNft = useCallback(async () => {\n    const marketItems = await marketContract.methods.fetchMarketItems().call({ from: account })\n    let index = 0\n    let isTokenAir = false\n    for (let i = 0; i < marketItems.length; i++) {\n      if (marketItems[i].itemId === itemId) {\n        isTokenAir = marketItems[i].nftContract === getAirNftAddress()\n        setTokenId(marketItems[i].tokenId.toString())\n        setOwnerAddress(marketItems[i].seller.toString())\n        index = i\n        break\n      }\n    }\n\n    let nftHash = null\n    if (isTokenAir)\n      nftHash = await airnftContract.methods.tokenURI(toBN(marketItems[index].tokenId)).call({ from: account })\n    else nftHash = await happyCowsContract.methods.tokenURI(toBN(marketItems[index].tokenId)).call({ from: account })\n\n    const res = await fetch(nftHash)\n    const json = await res.json()\n    setIsAIR(isTokenAir)\n    setDna(json.dna)\n    setAttr(json.attributes)\n  }, [account, marketContract, airnftContract, itemId, happyCowsContract])\n\n  useEffect(() => {\n    fetchNft()\n  }, [itemId, fetchNft])\n  return (\n    <NftOnChainDataContainer>\n      <NftOnChainDataTitle style={{ color: isDark ? 'white' : '' }}>Properties</NftOnChainDataTitle>\n      <NftOnChainDetailContainer>\n        <NftOnChainDetail>\n          <NftOnChainEachData>\n            <div style={{ color: isDark ? 'white' : '#694f4e' }}>Owner</div>\n            <NftOnChainLinkStyle>\n              <a\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                href={`https://bscscan.com/address/${ownerAddress}`}\n                style={{ textDecoration: 'underline', color: isDark ? 'white' : '#431216' }}\n              >\n                {ownerAddress}\n              </a>\n            </NftOnChainLinkStyle>\n          </NftOnChainEachData>\n          <NftOnChainEachData>\n            <div style={{ color: isDark ? 'white' : '#694f4e' }}>Contract Address</div>\n            <NftOnChainLinkStyle>\n              <a\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                href={`https://bscscan.com/address/${isAIR ? getAirNftAddress() : getHappyCowAddress()}`}\n                style={{ textDecoration: 'underline', color: isDark ? 'white' : '#431216' }}\n              >\n                {isAIR ? getAirNftAddress() : getHappyCowAddress()}\n              </a>\n            </NftOnChainLinkStyle>\n          </NftOnChainEachData>\n          <NftOnChainEachData>\n            <div style={{ color: isDark ? 'white' : '#694f4e' }}>Token ID</div>\n            <NftOnChainLinkStyle style={{ color: isDark ? 'white' : '' }}>{`#${tokenId}`}</NftOnChainLinkStyle>\n          </NftOnChainEachData>\n          {/* <NftOnChainEachData>\n                        <div style={{color: isDark ? 'white' : '#694f4e'}}>Asset Protocol</div>\n                        <NftOnChainLinkStyle>\n                            ERC721\n                        </NftOnChainLinkStyle>\n                    </NftOnChainEachData>\n                    <NftOnChainEachData>\n                        <div style={{color: isDark ? 'white' : '#694f4e'}}>Asset public chain</div>\n                        <NftOnChainLinkStyle>\n                            BSC\n                        </NftOnChainLinkStyle>\n                    </NftOnChainEachData> */}\n          {dna && (\n            <NftOnChainEachData>\n              <div style={{ color: isDark ? 'white' : '#694f4e' }}>DNA</div>\n              <NftOnChainLinkStyle style={{ color: isDark ? 'white' : '' }}>{dna}</NftOnChainLinkStyle>\n            </NftOnChainEachData>\n          )}\n          {attr.map((item) => (\n            <NftOnChainEachData key={item.trait_type}>\n              <div style={{ color: isDark ? 'white' : '#694f4e' }}>{item.trait_type}</div>\n              <NftOnChainLinkStyle style={{ color: isDark ? 'white' : '' }}>{item.value}</NftOnChainLinkStyle>\n            </NftOnChainEachData>\n          ))}\n        </NftOnChainDetail>\n      </NftOnChainDetailContainer>\n    </NftOnChainDataContainer>\n  )\n}\n\nexport default NftDataRightComponent\n","import React from 'react'\nimport styled from 'styled-components'\nimport useTheme from 'hooks/useTheme'\nimport NftDataLeftComponent from './NftDataLeftComponent'\nimport NftDataRightComponent from './NftDataRightComponent'\n\nconst NftDataContainer = styled.div`\n    position: relative;\n    display: flex;\n    background: #fff;\n    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 3%), 0 4px 6px -2px rgb(0 0 0 / 1%);\n    border-radius: 32px;\n    position: relative;\n\n    @media (max-width: 768px) {\n        flex-direction: column;\n    }\n`\n\nconst GradientBack = styled.div`\n    background: linear-gradient( 45deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100% );\n    background-size: 300% 300%;\n    animation: ilqnTz 2s linear infinite;\n    filter: blur(10px);\n    position: absolute;\n    top:-2px;\n    right:-2px;\n    bottom:-2px;\n    left:-2px;\n    z-index: -1;\n`\n\nconst NftDataSeperation = styled.div`\n    min-width: 2px;\n    position: relative;\n    background-image: url(https://jojo.fun/img/icon-ticket-line-vertical.be8361e4.svg);\n    background-repeat: repeat-y;\n    background-size: contain;\n    background-position: 50%;\n`\n\nexport interface NftDataInterface {\n    itemId?: string;\n  }\n\nconst NftData = ({itemId}: NftDataInterface) => {\n    const { isDark } = useTheme()\n\n    return (\n        <NftDataContainer style={{background: isDark ? \"#27262c\" : ''}}>\n            <GradientBack />\n            <NftDataLeftComponent itemId={itemId}/>\n            <NftDataSeperation />\n            <NftDataRightComponent itemId={itemId} />\n        </NftDataContainer>\n    )\n}\n\nexport default NftData\n","import React from 'react'\nimport styled from 'styled-components'\nimport useTheme from 'hooks/useTheme'\n\nconst NftMarketRuleContainer = styled.div`\n    margin-top: 40px;\n`\n\nconst NftMarketRuleTitle = styled.div`\n    font-weight: 700;\n    color: #F0B90B;\n    font-size: 20px;\n    padding-bottom: 14px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid #f5f8fb;\n`\nconst NftMarketRuleContent = styled.div`\n    font-size: 15px;\n    color: #694f4e;\n    margin-top: 0;\n`\n\nconst NftMarketRuleEach = styled.div`\n    margin: 12px 0;\n`\n\nconst NftMarketRule = () => {\n    const { isDark } = useTheme()\n\n    return (\n        <NftMarketRuleContainer>\n            <NftMarketRuleTitle style={{color: isDark ? 'white' : ''}}>\n                Market Rules\n            </NftMarketRuleTitle>\n            <NftMarketRuleContent style={{color: isDark ? 'white' : ''}}>\n                <NftMarketRuleEach>\n                    1. NFTs can be purchased in the NFT Market only by using $MILK;\n                </NftMarketRuleEach>\n                <NftMarketRuleEach>\n                    2. After NFT is listed in the trading market, operations such as transfer, auction and stake are not allowed.\n                </NftMarketRuleEach>\n                <NftMarketRuleEach>\n                    3. The market will charge 10% of the seller his revenue as a service fee, which is used for burning $MILK, adding $MILK liquidity and for Treasury.\n                </NftMarketRuleEach>\n            </NftMarketRuleContent>\n        </NftMarketRuleContainer>\n    )\n}\n\nexport default NftMarketRule\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport useTheme from 'hooks/useTheme'\n\nconst NftDetailHeaderContainer = styled.div`\n  font-size: 15px;\n  color: #694f4e;\n`\nconst NftDetailPrevious = styled.div`\n  display: inline;\n`\nexport interface NftDetailHeaderInterface {\n  collectionName?: string\n}\n\nconst NftDetailHeader = ({ collectionName }: NftDetailHeaderInterface) => {\n  const { isDark } = useTheme()\n\n  return (\n    <NftDetailHeaderContainer>\n      <NftDetailPrevious>\n        <Link to=\"/nft-market\" style={{ color: isDark ? 'white' : '#431216' }}>\n          NFT Market\n        </Link>\n        <span style={{ padding: '0 8px', color: isDark ? 'white' : '' }}>{'>'}</span>\n      </NftDetailPrevious>\n      <NftDetailPrevious>\n        <span style={{ fontSize: '15px', color: isDark ? 'white' : '#694f4e' }}>{collectionName}</span>\n      </NftDetailPrevious>\n    </NftDetailHeaderContainer>\n  )\n}\n\nexport default NftDetailHeader\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport styled, { useTheme } from 'styled-components'\nimport Page from 'components/layout/Page'\nimport { Heading } from 'cashcow-uikit'\nimport NftData from './components/NftData'\nimport NftMarketRule from './components/NftMarketRule'\nimport NftDetailHeader from './components/NftDetailHeader'\n\ntype boxParam = {\n    itemId: string;\n};\n\nconst StyledHero = styled.div`\n    border-bottom: 1px solid #e8e8e8;\n    margin-bottom: 20px;\n`\n\nconst NftDetailContainer = styled.div`\n    margin-top: 32px;\n`\n\n\nconst NftMarketDetail = () => {\n    const { itemId } = useParams<boxParam>();\n    const { isDark } = useTheme();\n\n    return (\n        <Page\n            style={{\n               \n            }}\n        >\n            <StyledHero>\n                <Heading as=\"h1\" size=\"lg\" color=\"text\" mb=\"20px\">\n                    NFT MARKETPLACE\n                </Heading>\n            </StyledHero>\n            <NftDetailHeader collectionName=\"NFT\" />\n            <NftDetailContainer>\n                <NftData itemId={itemId} />\n            </NftDetailContainer>\n            <NftMarketRule />\n        </Page>\n    )\n}\n\nexport default NftMarketDetail\n"],"sourceRoot":""}
{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/formatBalance.ts","config/constants/nfts.ts","config/constants/airnfts.ts","views/Stakes/components/StaticComponents/Harvest.tsx","views/Stakes/components/StaticComponents/TotalStaked.tsx","views/Stakes/components/StaticComponents/TotalRate.tsx","views/Stakes/components/StaticComponents/MyRate.tsx","views/Stakes/components/StaticComponents/RatePer.tsx","views/Stakes/components/StaticComponents/MyStaked.tsx","views/Stakes/components/StatisticsInfo.tsx","views/Stakes/components/ItemComponents/StakeItem.tsx","views/Stakes/components/ItemComponents/StakeCandidate.tsx","views/Stakes/components/ItemComponents/SelectNFT.tsx","views/Stakes/components/ItemComponents/NewItem.tsx","views/Stakes/components/StakeItems.tsx","views/Stakes/Stakes.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","getNumberSuffix","_value","value","Infinity","RABBIT_MINTING_FARM_ADDRESS","PANCAKE_RABBITS_ADDRESS","PINATA_BASE_URI","PINATA_METADATA_CID","Nfts","name","description","originalImage","previewImage","blurImage","sortOrder","bunnyId","airNFTs","web3","Web3","givenProvider","happyCowsContract","eth","Contract","HappyCows","abi","getHappyCowAddress","airnftContract","AirNfts","getAirNftAddress","stakingContract","Staking","getStakingAddress","Harvet","rewardAllMilk","index","TranslateString","cakePriceUsd","usePriceCakeBusd","account","useWallet","setLoading","LoadingContext","StakeContext","initMyNFTS","initSelectedNFTs","harvestHandler","a","methods","harvest","send","from","toast","success","message","error","getStakedItems","call","tmpStakingItems","stakingItems","i","contractAddress","push","tokenIds","tmpMyTokens","fetchMyNfts","happyCowTokens","_","map","itm","tokenId","isAIR","airNftOwners","nft","ownerOf","Promise","all","owners","owner","idx","toLowerCase","myTokenHashes","tokenURI","result","tokenHash","flexDirection","justifyContent","mt","fullWidth","onClick","style","fontSize","fontWeight","height","lineHeight","padding","whiteSpace","borderRadius","width","src","alt","color","pr","ml","textTransform","TotalStaked","totalStakedCount","textAlign","TotalRate","totalMilkPower","MyRate","myMilkPower","RatePer","dailyMilkRate","MyStaked","myStakedCount","StaticInfoCard","styled","BaseLayout","theme","mediaQueries","xs","sm","lg","StatisticsInfo","isDark","useTheme","selectedNFTS","useState","poolInfo","setPoolInfo","fetchInfo","useCallback","getPendingMilk","pendingMilk","pools","pool","totalStkCount","stakedCount","console","log","getTotalMilkPower","tmpTotalMilkPower","getMyMilkPower","tmpMyMilkPower","getDailyMilkRate","tmpDailyMilkRate","useEffect","BoxShadow","div","InfoWrapper","alignItems","marginTop","Harvest","ImageContainer","NftImage","Divider","StakeItem","appendCandidate","milkPower","setMilkPower","ItemContainer","StakeBtn","tokenName","imgUrl","nftInfo","setNFTInfo","fetchNft","fetch","res","json","imageUrl","image","slice","fetchMilkPower","tmpMilkPower","unstakeNFT","unstake","itemId","background","backgroundImage","display","marginBottom","MultiplierTag","Tag","TypeTag","HoverWrapper","CandidateWrapper","StakeCandidate","closeRequest","nftSelected","approve","stake","e","variant","outline","SelectNFT","isOpen","closeDialog","addNFTHandler","myNFTS","onRequestClose","content","top","left","right","bottom","marginRight","transform","maxWidth","minWidth","zindex","contentLabel","position","as","size","mb","cursor","onKeyDown","role","tabIndex","flexWrap","AddImage","NewItem","setModalOpen","val","StakeItemContainer","StakeItemEach","StakeItems","Stakes","useParams","fetchMyNFTS","Page"],"mappings":"iJAGMA,EAAgB,UASTC,EAAiB,SAACC,EAA0BC,EAAuBC,GAC9E,IAAMC,EAAmBH,EAAaI,MAAK,SAACC,GAC1C,OAAOA,EAAYC,KAAKC,WAAaN,KAEvC,GAAIE,EAAkB,CACpB,IAAMK,EAAmBL,EAAiBG,KAAKG,KAE/C,OADyBD,EAAiBE,SAAS,KAb1B,SAACP,EAA0BD,GACtD,IAAMS,EAAkBb,EAAcc,KAAKT,GAAkB,GAEvDU,EAAuBX,EAASY,MAAM,KAAK,GACjD,OAAOX,EAAiBY,QAAQJ,EAAiBE,GAWtCG,CAAqBR,EAAkBN,GAEzCM,EAET,OAAON,GCNMe,IAdC,WACd,IAAQjB,EAAiBkB,qBAAWC,KAA5BnB,aAER,OAAO,SAACC,EAAuBC,GAC7B,MAAwB,UAApBF,EAAa,GACRE,EAELF,EAAaoB,OAAS,EACjBrB,EAAeC,EAAcC,EAAeC,GAE9CA,K,iCCdX,2HAEamB,EAAmB,SAACC,GAAuC,IAAnBC,EAAkB,uDAAP,GACxDC,EAAiB,IAAIC,IAAUH,GAASI,UAAU,IAAID,IAAU,IAAIE,IAAIJ,IAC9E,OAAOC,EAAeI,YAGXC,EAAwB,SAACP,GAAuC,IAAnBC,EAAkB,uDAAP,GACnE,OAAOD,EAAQI,UAAU,IAAID,IAAU,IAAIE,IAAIJ,IAAWO,WAG/CC,EAAkB,SAACC,GAA0B,IAAlBT,EAAiB,uDAAN,EAC7CU,EAAQD,EAMZ,OAJsB,kBAAXA,IACTC,EAAS,IAAIR,IAAUO,GAASJ,aAG1B,GACJ,KAAKK,IAAUC,IACX,MAAO,WACX,KAAKD,EAAQ,IACT,MAAM,GAAN,QAAWA,EAAQ,KAAYH,QAAQ,GAAvC,MACJ,KAAKG,EAAQ,IACT,MAAM,GAAN,QAAWA,EAAQ,KAASH,QAAQ,GAApC,MACJ,KAAKG,EAAQ,IACT,MAAM,GAAN,QAAWA,EAAQ,KAAMH,QAAQP,GAAjC,MAEJ,QACI,OAAOU,EAAMH,QAAQP,M,iCC3B/B,wIAAO,IAAMY,EAA8B,6CAC9BC,EAA0B,6CAC1BC,EAAkB,gCAClBC,EAAsB,8DAE7BC,EAAc,CAClB,CACEC,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,+DACbM,aAAc,UACdC,UAAW,oBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,kEACbM,aAAc,UACdC,UAAW,uBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,+DACbM,aAAc,UACdC,UAAW,oBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEV,CACCN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEV,CACCN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEV,CACCN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,IAKEP,O,wmQCWAQ,IAvior9BClFMC,EAAO,IAAIC,IAAKA,IAAKC,eAErBC,GAAoB,IAAIH,EAAKI,IAAIC,SAASC,EAAUC,IAAkBC,eACtEC,GAAiB,IAAIT,EAAKI,IAAIC,SAASK,EAAQH,IAAkBI,eACjEC,GAAkB,IAAIZ,EAAKI,IAAIC,SAASQ,EAAQN,IAAkBO,eAgHzDC,GA9GA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,MACzBC,EAAkBjD,cAClBkD,EAAeC,cAEbC,EAAYC,cAAZD,QACAE,EAAerD,qBAAWsD,KAA1BD,WACR,EAAyCrD,qBAAWuD,KAA5CC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,iBAEdC,EAAc,uCAAG,sDAAAC,EAAA,6DACrBN,GAAW,GADU,kBAIbX,GAAgBkB,QAAQC,QAAQd,GAAOe,KAAK,CAAEC,KAAMZ,IAJvC,OAKnBa,IAAMC,QAAQ,qCALK,uDAOXC,EAPW,EAOXA,QACRF,IAAMG,MAAMD,GARO,yBAWSxB,GAAgBkB,QAAQQ,eAAejB,GAASkB,OAXzD,QAarB,IAFMC,EAXe,OAYfC,EAAe,GACZC,EAAI,EAAGA,EAAIF,EAAgBpE,OAAQsE,KAC5B,MAAVzB,GAAiBuB,EAAgBE,GAAGC,kBAAoBnC,eAEzC,MAAVS,GAAiBuB,EAAgBE,GAAGC,kBAAoBhC,gBAD/D8B,EAAaG,KAAKJ,EAAgBE,IAfjB,GAoBrBf,EAAiBc,GAIXI,EAAW,GACXC,EAAc,GACN,MAAV7B,EA1BiB,kCA2BUd,GAAkB2B,QAAQiB,cAAcR,KAAK,CAAEN,KAAMZ,IA3B/D,QA2Bb2B,EA3Ba,OA6BnBC,IAAEC,IAAIF,GAAgB,SAACG,GACrBN,EAASD,KAAK,CAAEQ,QAASD,EAAKE,OAAO,OA9BpB,+BAoCbC,EAAe,GACrBL,IAAEC,IAAInD,KAAS,SAACwD,GACdD,EAAaV,KAAKnC,GAAeqB,QAAQ0B,QAAQD,GAAKhB,WAtCrC,UAwCEkB,QAAQC,IAAIJ,GAxCd,QAwCbK,EAxCa,OAyCnBV,IAAEC,IAAIS,GAAQ,SAACC,EAAOC,GAChBD,EAAME,gBAAkBzC,EAAQyC,eACpCjB,EAASD,KAAK,CAAEQ,QAASrD,IAAQ8D,GAAMR,OAAO,OA3C7B,QAgDrB,IADMU,EAAgB,GACbrB,EAAI,EAAGA,EAAIG,EAASzE,OAAQsE,IAC9BG,EAASH,GAAGW,MACZU,EAAcnB,KAAKnC,GAAeqB,QAAQkC,SAASnB,EAASH,GAAGU,SAASb,QADrDwB,EAAcnB,KAAKzC,GAAkB2B,QAAQkC,SAASnB,EAASH,GAAGU,SAASb,QAjDhF,iBAoDAkB,QAAQC,IAAIK,GApDZ,QAsDrB,IAFME,EApDe,OAsDZvB,EAAI,EAAGA,EAAIG,EAASzE,OAAQsE,IAC9BI,EAAYJ,KAAII,EAAYJ,GAAK,IACtCI,EAAYJ,GAAGU,QAAUP,EAASH,GAAGU,QACrCN,EAAYJ,GAAGwB,UAAYD,EAAOvB,GAClCI,EAAYJ,GAAGW,MAAQR,EAASH,GAAGW,MAC9BR,EAASH,GAAGW,MACZP,EAAYJ,GAAGC,gBAAkBhC,cADdmC,EAAYJ,GAAGC,gBAAkBnC,cAI3DkB,EAAWoB,GAEXvB,GAAW,GAjEU,yDAAH,qDAmEpB,OACE,eAAC,IAAD,CAAM4C,cAAc,SAApB,UACE,eAAC,IAAD,CAAMC,eAAe,gBAArB,UACE,cAAC,IAAD,0BACA,cAAC,IAAD,CACEC,GAAG,MACHC,WAAS,EACTC,QAAS3C,EACT4C,MAAO,CACLC,SAAU,OACVC,WAAY,IACZC,OAAQ,OACRC,WAAY,IACZC,QAAS,QACTC,WAAY,SACZC,aAAc,OACdC,MAAO,QAZX,SAeG9D,EAAgB,MAAO,gBAG5B,eAAC,IAAD,CAAMmD,GAAG,OAAT,UACE,cAAC,IAAD,CAAOY,IAAI,yBAAyBC,IAAI,OAAOF,MAAO,GAAIL,OAAQ,KAClE,cAAC,IAAD,CAAMQ,MAAM,YAAYV,SAAS,OAAOW,GAAG,MAAMC,GAAG,MAApD,SACGtG,YAAgBiC,EAAgB,IAAS,KAE5C,cAAC,IAAD,CAAMsE,cAAc,YAAYH,MAAM,aAAaV,SAAS,OAAOD,MAAO,CAAEI,WAAY,GAAxF,2BACS7F,YAAiBoC,EAAavC,WAAaoC,EAAiB,IAAS,aCpGvEuE,GAlBK,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,iBACftE,EAAkBjD,cACxB,OACE,eAAC,IAAD,CAAMkG,cAAc,SAASC,eAAe,aAA5C,UACE,cAAC,IAAD,CAAMI,MAAO,CAACiB,UAAW,QAAzB,SAAmCvE,EAAgB,MAAO,kBAC1D,eAAC,IAAD,CAAMmD,GAAG,OAAT,UACE,cAAC,IAAD,CAAOY,IAAI,gCAAgCC,IAAI,OAAOF,MAAO,GAAIL,OAAQ,KACzE,cAAC,IAAD,CAAMQ,MAAM,YAAYV,SAAS,OAAOW,GAAG,MAAMC,GAAG,MAApD,SACGtG,YAAgByG,EAAkB,YCE9BE,GAdG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eACZzE,EAAkBjD,cACxB,OACE,eAAC,IAAD,CAAMkG,cAAc,SAApB,UACE,cAAC,IAAD,CAAMK,MAAO,CAACiB,UAAW,QAAzB,SAAmCvE,EAAgB,MAAO,qBAC1D,cAAC,IAAD,CAAMmD,GAAG,OAAT,SACE,cAAC,IAAD,CAAMc,MAAM,YAAYV,SAAS,OAAOW,GAAG,MAAMC,GAAG,MAApD,SACGtG,YAAgB4G,EAAgB,WCO5BC,GAdA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACT3E,EAAkBjD,cACxB,OACE,eAAC,IAAD,CAAMkG,cAAc,SAApB,UACE,cAAC,IAAD,CAAMK,MAAO,CAACiB,UAAW,QAAzB,SAAmCvE,EAAgB,MAAO,kBAC1D,cAAC,IAAD,CAAMmD,GAAG,OAAT,SACE,cAAC,IAAD,CAAMc,MAAM,YAAYV,SAAS,OAAOW,GAAG,MAAMC,GAAG,MAApD,SACGtG,YAAgB8G,EAAa,WCczBC,GApBC,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACV5E,EAAeC,cAEfF,EAAkBjD,cACxB,OACE,eAAC,IAAD,CAAMkG,cAAc,SAApB,UACE,cAAC,IAAD,CAAMK,MAAO,CAACiB,UAAW,QAAzB,SAAmCvE,EAAgB,MAAO,gCAC1D,eAAC,IAAD,CAAMmD,GAAG,OAAT,UACE,cAAC,IAAD,CAAOY,IAAI,yBAAyBC,IAAI,OAAOF,MAAO,GAAIL,OAAQ,KAClE,cAAC,IAAD,CAAMQ,MAAM,YAAYV,SAAS,OAAOW,GAAG,MAAMC,GAAG,MAApD,SACGtG,YAAgBgH,EAAgB,IAAS,KAE5C,cAAC,IAAD,CAAMT,cAAc,YAAYH,MAAM,aAAaV,SAAS,OAAOD,MAAO,CAACI,WAAY,GAAvF,2BACS7F,YAAgBoC,EAAavC,WAAamH,EAAgB,IAAU,aCQtEC,GAlBE,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,cACZ/E,EAAkBjD,cACxB,OACE,eAAC,IAAD,CAAMkG,cAAc,SAApB,UACE,cAAC,IAAD,CAAMK,MAAO,CAACiB,UAAW,QAAzB,SAAmCvE,EAAgB,MAAO,eAC1D,eAAC,IAAD,CAAMmD,GAAG,OAAT,UACE,cAAC,IAAD,CAAOY,IAAI,gCAAgCC,IAAI,OAAOF,MAAO,GAAIL,OAAQ,KACzE,cAAC,IAAD,CAAMQ,MAAM,YAAYV,SAAS,OAAOW,GAAG,MAAMC,GAAG,MAApD,SACGtG,YAAgBkH,EAAe,YCJpCC,GAAiBC,YAAOC,IAAPD,CAAH,0NAChB,qBAAGE,MAAkBC,aAAaC,MAGlC,qBAAGF,MAAkBC,aAAaE,MAGlC,qBAAGH,MAAkBC,aAAaG,MAMhC7F,GAAkB,IADX,IAAIX,IAAKA,IAAKC,eACME,IAAIC,UAASQ,EAAQN,IAAkBO,eAwEzD4F,GAtEQ,SAAC,GAAa,IAAZzF,EAAW,EAAXA,MAGf0F,EAAWC,cAAXD,OAEAtF,EAAYC,cAAZD,QAEAwF,EAAiB3I,qBAAWuD,KAA5BoF,aAER,EAAgCC,mBAAS,CAAC9F,cAAe,EAAGwE,iBAAiB,EAAGS,cAAe,EAAGN,eAAgB,EAAGE,YAAa,EAAGE,cAAe,IAApJ,mBAAOgB,EAAP,KAAiBC,EAAjB,KAEMC,EAAYC,sBAAW,sBAAC,sCAAArF,EAAA,sEAEFjB,GAAgBkB,QAAQqF,eAAelG,EAAOI,GAASkB,OAFrD,cAEtB6E,EAFsB,gBAGTxG,GAAgBkB,QAAQuF,MAAMpG,GAAOsB,OAH5B,cAGtB+E,EAHsB,OAItBC,EAAgBD,EAAKE,YAC3BC,QAAQC,IAAI,qBAAsBH,GALN,UAMI3G,GAAgBkB,QAAQ6F,kBAAkB1G,GAAOsB,OANrD,eAMtBqF,EANsB,iBAOChH,GAAgBkB,QAAQ+F,eAAe5G,EAAOI,GAASkB,OAPxD,eAOtBuF,EAPsB,iBAQGlH,GAAgBkB,QAAQiG,iBAAiB9G,GAAOsB,OARnD,QAQtByF,EARsB,OAS5BhB,EAAY,CAAChG,cAAeoG,EAAa5B,iBAAkB+B,EAAetB,cAAeY,EAAazI,OAAQuH,eAAgBiC,EAAmB/B,YAAaiC,EAAgB/B,cAAeiC,IATjK,4CAU3B,CAAC3G,EAASwF,EAAc5F,IAE3BgH,qBAAU,WACRhB,MACA,CAACA,IACH,IAAMiB,EAAY/B,IAAOgC,IAAV,uJACExB,EAAmB,UAAV,QACSA,EAAmC,2BAA1B,wBAAsEA,EAAoC,4BAA3B,0BAIrHyB,EAAcjC,IAAOgC,IAAV,sJACkBxB,EAAmC,2BAA1B,wBAAsEA,EAAoC,4BAA3B,0BAM3H,OACE,cAACuB,EAAD,CAAW1D,MAAO,CAACO,aAAc,OAAQF,QAAS,QAAlD,SACE,eAAC,IAAD,CAAMV,cAAc,SAASkE,WAAW,SAAxC,UACE,cAACH,EAAD,CAAW1D,MAAO,CAACO,aAAc,OAAQF,QAAS,QAAlD,SACa,MAAV5D,EAAgB,qBAAuB,0BAE1C,eAACiF,GAAD,CAAgB1B,MAAO,CAAC8D,UAAW,QAAnC,UACE,cAACF,EAAD,UACE,cAACG,GAAD,CAASvH,cAAe+F,EAAS/F,cAAeC,MAAOA,MAEzD,cAACmH,EAAD,UACE,cAAC,GAAD,CAAa5C,iBAAkBuB,EAASvB,qBAE1C,cAAC4C,EAAD,UACE,cAAC,GAAD,CAAUnC,cAAec,EAASd,kBAEpC,cAACmC,EAAD,UACE,cAAC,GAAD,CAAWzC,eAAgBoB,EAASpB,mBAEtC,cAACyC,EAAD,UACE,cAAC,GAAD,CAAQvC,YAAakB,EAASlB,gBAEhC,cAACuC,EAAD,UACE,cAAC,GAAD,CAASrC,cAAegB,EAAShB,2B,UCtEvCyC,GAAiBrC,IAAOgC,IAAV,sMAUdM,GAAWtC,IAAOgC,IAAV,qVAeRO,GAAUvC,IAAOgC,IAAV,gOAgBPnI,IANYmG,IAAOgC,IAAV,wHAMF,IAAIlI,IAAKA,IAAKC,gBAErBC,GAAoB,IAAIH,GAAKI,IAAIC,SAASC,EAAUC,IAAkBC,eACtEI,GAAkB,IAAIZ,GAAKI,IAAIC,SAASQ,EAAQN,IAAkBO,eAClEL,GAAiB,IAAIT,GAAKI,IAAIC,SAASK,EAAQH,IAAkBI,eA8JxDgI,GA5JG,SAAC,GAAqB,IAAnBrL,EAAkB,EAAlBA,KAAM2D,EAAY,EAAZA,MAEjB0F,GADgB1I,cACL2I,cAAXD,QACAtF,EAAYC,cAAZD,QACAE,EAAerD,qBAAWsD,KAA1BD,WACR,EAA0DrD,qBAAWuD,KAA5CC,GAAzB,EAAQkH,gBAAR,EAAyBlH,YAAYC,EAArC,EAAqCA,iBAErC,EAAkCmF,mBAAS,GAA3C,mBAAO+B,EAAP,KAAkBC,EAAlB,KAEMC,EAAgB5C,IAAOgC,IAAV,yNAIFxB,EAAmB,UAAV,QACSA,EAAmC,2BAA1B,wBACzBA,EAAoC,4BAA3B,0BAGtBqC,EAAW7C,IAAOgC,IAAV,2ZACKxB,EAAqB,UAAZ,UACgB,UACb,SAe/B,EAA8BG,mBAAS,CAAEmC,UAAW,GAAI7F,QAAS,GAAI8F,OAAQ,GAAI7F,OAAO,IAAxF,mBAAO8F,EAAP,KAAgBC,EAAhB,KACMC,EAAWnC,sBAAW,sBAAC,oCAAArF,EAAA,yDACtBvE,GAASA,EAAK8F,QADQ,oDAEvBC,GAAQ,EACR/F,EAAKqF,kBAAoBnC,cAAsB6C,GAAQ,EAClD/F,EAAKqF,kBAAoBhC,gBAAoB0C,GAAQ,GAEzDA,EANsB,iCAMElD,GAAkB2B,QAAQkC,SAAS1G,EAAK8F,SAASb,OANnD,OAMfyB,EANe,gDAOLvD,GAAeqB,QAAQkC,SAAS1G,EAAK8F,SAASb,OAPzC,QAOtByB,EAPsB,gCAQTsF,MAAMtF,GARG,eAQrBuF,EARqB,iBASRA,EAAIC,OATI,QASrBA,EATqB,OAUvBC,EAAWD,EAAKE,MACfrG,EAGCoG,EAAW,uEAFfA,EAAWA,EAASE,MAAM,GAC1BF,EAAQ,UAAMpK,MAAN,OAAwBoK,IAGlCL,EAAW,CAAEH,UAAWO,EAAKhK,KAAM4D,QAAS9F,EAAK8F,QAAS8F,OAAQO,EAAUpG,MAAO/F,EAAK+F,QAhB7D,4CAiB1B,CAAC/F,IAEEsM,EAAiB1C,sBAAW,sBAAC,8BAAArF,EAAA,sEACVjB,GAAgBkB,QAAQuF,MAAMpG,GAAOsB,OAD3B,OAC3BwE,EAD2B,OAE3B8C,EAAe9C,EAAS8B,UAC9BC,EAAae,GAHoB,2CAIhC,CAAC5I,IACJgH,qBAAU,WACRoB,IACAO,MACC,CAACP,EAAUO,IAEd,IAAME,EAAU,uCAAG,sDAAAjI,EAAA,6DACjBN,GAAW,GADM,kBAITX,GAAgBkB,QAAQiI,QAAQzM,EAAK0M,QAAQhI,KAAK,CAAEC,KAAMZ,IAJjD,OAKfa,IAAMC,QAAQ,kDALC,uDAOPC,EAPO,EAOPA,QACRF,IAAMG,MAAMD,GARG,yBAWaxB,GAAgBkB,QAAQQ,eAAejB,GAASkB,OAX7D,QAajB,IAFMC,EAXW,OAYXC,EAAe,GACZC,EAAI,EAAGA,EAAIF,EAAgBpE,OAAQsE,KAC5B,MAAVzB,GAAiBuB,EAAgBE,GAAGC,kBAAoBnC,eAEzC,MAAVS,GAAiBuB,EAAgBE,GAAGC,kBAAoBhC,gBAD/D8B,EAAaG,KAAKJ,EAAgBE,IAfrB,GAoBjBf,EAAiBc,GAIXI,EAAW,GACXC,EAAc,GACN,MAAV7B,EA1Ba,kCA2Bcd,GAAkB2B,QAAQiB,cAAcR,KAAK,CAAEN,KAAMZ,IA3BnE,QA2BT2B,EA3BS,OA6BfC,IAAEC,IAAIF,GAAgB,SAACG,GACrBN,EAASD,KAAK,CAAEQ,QAASD,EAAKE,OAAO,OA9BxB,+BAoCTC,EAAe,GACrBL,IAAEC,IAAInD,KAAS,SAACwD,GACdD,EAAaV,KAAKnC,GAAeqB,QAAQ0B,QAAQD,GAAKhB,WAtCzC,UAwCMkB,QAAQC,IAAIJ,GAxClB,QAwCTK,EAxCS,OAyCfV,IAAEC,IAAIS,GAAQ,SAACC,EAAOC,GAChBD,EAAME,gBAAkBzC,EAAQyC,eACpCjB,EAASD,KAAK,CAAEQ,QAASrD,IAAQ8D,GAAMR,OAAO,OA3CjC,QAgDjB,IADMU,EAAgB,GACbrB,EAAI,EAAGA,EAAIG,EAASzE,OAAQsE,IAC9BG,EAASH,GAAGW,MACZU,EAAcnB,KAAKnC,GAAeqB,QAAQkC,SAASnB,EAASH,GAAGU,SAASb,QADrDwB,EAAcnB,KAAKzC,GAAkB2B,QAAQkC,SAASnB,EAASH,GAAGU,SAASb,QAjDpF,iBAoDIkB,QAAQC,IAAIK,GApDhB,QAsDjB,IAFME,EApDW,OAsDRvB,EAAI,EAAGA,EAAIG,EAASzE,OAAQsE,IAC9BI,EAAYJ,KAAII,EAAYJ,GAAK,IACtCI,EAAYJ,GAAGU,QAAUP,EAASH,GAAGU,QACrCN,EAAYJ,GAAGwB,UAAYD,EAAOvB,GAClCI,EAAYJ,GAAGW,MAAQR,EAASH,GAAGW,MAC9BR,EAASH,GAAGW,MACZP,EAAYJ,GAAGC,gBAAkBhC,cADdmC,EAAYJ,GAAGC,gBAAkBnC,cAI3DkB,EAAWoB,GAEXvB,GAAW,GAjEM,yDAAH,qDAmEhB,OACE,cAACwH,EAAD,CAAevE,MAAO,CAAEyF,WAAYtD,EAAS,UAAY,IAAzD,SACE,eAAC,IAAD,CAAMxC,cAAc,SAApB,UACE,cAACqE,GAAD,UACE,cAACC,GAAD,CAAUjE,MAAO,CAAE0F,gBAAgB,OAAD,OAASf,EAAQD,OAAjB,UAEpC,cAACR,GAAD,IACA,eAAC,IAAD,CAAMvE,cAAc,SAASK,MAAO,CAAEK,QAAS,QAA/C,UACE,cAAC,IAAD,CAAMJ,SAAS,OAAOD,MAAO,CAAEiB,UAAW,UAA1C,SACG0D,EAAQF,YAEX,sBAAKzE,MAAO,CAAE2F,QAAS,OAAQ/F,eAAgB,SAAUiE,WAAY,SAAU+B,aAAc,QAA7F,UACE,cAAC,IAAD,2BADF,YAEE,cAAC,IAAD,CAAM3F,SAAS,OAAf,SAAuB1F,YAAgB8J,EAAW,QAEpD,cAACG,EAAD,CAAUzE,QAAS,kBAAMuF,KAAzB,8B,qBCtMJO,GAAgBlE,YAAOmE,IAAPnE,CAAH,iDAIboE,GAAUpE,YAAOmE,IAAPnE,CAAH,4DAIPqE,GAAerE,IAAOgC,IAAV,gFAMZsC,GAAmBtE,IAAOgC,IAAV,w2BAwChBnI,GAAO,IAAIC,IAAKA,IAAKC,eACrBU,GAAkB,IAAIZ,GAAKI,IAAIC,SAASQ,EAAQN,IAAkBO,eAClEX,GAAoB,IAAIH,GAAKI,IAAIC,SAASC,EAAUC,IAAkBC,eACtEC,GAAiB,IAAIT,GAAKI,IAAIC,SAASK,EAAQH,IAAkBI,eAwHxD+J,GAtHQ,SAAC,GAAmC,IAAjCpN,EAAgC,EAAhCA,KAAMqN,EAA0B,EAA1BA,aAAc1J,EAAY,EAAZA,MACpCI,EAAYC,cAAZD,QACR,EAA8ByF,mBAAS,CAAEmC,UAAW,GAAI7F,QAAS,GAAI8F,OAAQ,GAAI7F,OAAO,IAAxF,mBAAO8F,EAAP,KAAgBC,EAAhB,KACQ7H,EAAerD,qBAAWsD,KAA1BD,WACR,EAAyCrD,qBAAWuD,KAA5CC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,iBAEd0H,EAAWnC,sBAAW,sBAAC,gCAAArF,EAAA,yDACtBvE,GAASA,EAAK8F,QADQ,iEAGTkG,MAAMhM,EAAK4G,WAHF,cAGrBqF,EAHqB,gBAIRA,EAAIC,OAJI,OAIrBA,EAJqB,OAMvBC,EAAWD,EAAKE,MAEfpM,EAAK+F,MAGJoG,EAAW,uEAFfA,EAAWA,EAASE,MAAM,GAC1BF,EAAQ,UAAMpK,MAAN,OAAwBoK,IAGlCL,EAAW,CAAEH,UAAWO,EAAKhK,KAAM4D,QAAS9F,EAAK8F,QAAS8F,OAAQO,EAAUpG,MAAO/F,EAAK+F,QAb7D,4CAc1B,CAAC/F,IAEJ2K,qBAAU,WACRoB,MACC,CAACA,IAEJ,IAAMuB,EAAW,uCAAG,0DAAA/I,EAAA,yDAClBN,GAAW,GACXoJ,IACKrN,EAAK+F,MAHQ,0CAKRlD,GAAkB2B,QAAQ+I,QAAQ/J,cAAqBxD,EAAK8F,SAASpB,KAAK,CAAEC,KAAMZ,IAL1E,uBAORT,GAAgBkB,QAAQgJ,MAAMxN,EAAKqF,gBAAiBrF,EAAK8F,SAASpB,KAAK,CAAEC,KAAMZ,IAPvE,OAQda,IAAMC,QAAQ,4BARA,yDAUNC,EAVM,EAUNA,QACRF,IAAMG,MAAMD,GAXE,2DAeR3B,GAAeqB,QAAQ+I,QAAQ/J,cAAqBxD,EAAK8F,SAASpB,KAAK,CAAEC,KAAMZ,IAfvE,yBAgBRT,GAAgBkB,QAAQgJ,MAAMxN,EAAKqF,gBAAiBrF,EAAK8F,SAASpB,KAAK,CAAEC,KAAMZ,IAhBvE,QAiBda,IAAMC,QAAQ,4BAjBA,0DAmBNC,EAnBM,EAmBNA,QACRF,IAAMG,MAAMD,GApBE,yBAuBYxB,GAAgBkB,QAAQQ,eAAejB,GAASkB,OAvB5D,QAyBlB,IAFMC,EAvBY,OAwBZC,EAAe,GACZC,EAAI,EAAGA,EAAIF,EAAgBpE,OAAQsE,KAC5B,MAAVzB,GAAiBuB,EAAgBE,GAAGC,kBAAoBnC,eAEzC,MAAVS,GAAiBuB,EAAgBE,GAAGC,kBAAoBhC,gBAD/D8B,EAAaG,KAAKJ,EAAgBE,IA3BpB,GAgClBf,EAAiBc,GAIXI,EAAW,GACXC,EAAc,GACN,MAAV7B,EAtCc,kCAuCad,GAAkB2B,QAAQiB,cAAcR,KAAK,CAAEN,KAAMZ,IAvClE,QAuCV2B,EAvCU,OAyChBC,IAAEC,IAAIF,GAAgB,SAACG,GACrBN,EAASD,KAAK,CAAEQ,QAASD,EAAKE,OAAO,OA1CvB,+BAgDVC,EAAe,GACrBL,IAAEC,IAAInD,KAAS,SAACwD,GACdD,EAAaV,KAAKnC,GAAeqB,QAAQ0B,QAAQD,GAAKhB,WAlDxC,UAoDKkB,QAAQC,IAAIJ,GApDjB,QAoDVK,EApDU,OAqDhBV,IAAEC,IAAIS,GAAQ,SAACC,EAAOC,GAChBD,EAAME,gBAAkBzC,EAAQyC,eACpCjB,EAASD,KAAK,CAAEQ,QAASrD,IAAQ8D,GAAMR,OAAO,OAvDhC,QA4DlB,IADMU,EAAgB,GACbrB,EAAI,EAAGA,EAAIG,EAASzE,OAAQsE,IAC9BG,EAASH,GAAGW,MACZU,EAAcnB,KAAKnC,GAAeqB,QAAQkC,SAASnB,EAASH,GAAGU,SAASb,QADrDwB,EAAcnB,KAAKzC,GAAkB2B,QAAQkC,SAASnB,EAASH,GAAGU,SAASb,QA7DnF,iBAgEGkB,QAAQC,IAAIK,GAhEf,QAkElB,IAFME,EAhEY,OAkETvB,EAAI,EAAGA,EAAIG,EAASzE,OAAQsE,IAC9BI,EAAYJ,KAAII,EAAYJ,GAAK,IACtCI,EAAYJ,GAAGU,QAAUP,EAASH,GAAGU,QACrCN,EAAYJ,GAAGwB,UAAYD,EAAOvB,GAClCI,EAAYJ,GAAGW,MAAQR,EAASH,GAAGW,MAC9BR,EAASH,GAAGW,MACZP,EAAYJ,GAAGC,gBAAkBhC,cADdmC,EAAYJ,GAAGC,gBAAkBnC,cAI3DkB,EAAWoB,GACXvB,GAAW,GA5EO,kEAAH,qDA+EjB,OACE,eAACkJ,GAAD,CAAkBjG,MAAO,CAAE0F,gBAAgB,QAAD,OAAUf,EAAQD,OAAlB,OAAgC3E,QAAS,SAACwG,GAAD,OAAOH,KAA1F,UACE,+BAAOzB,EAAQF,YACf,eAACuB,GAAD,WACE,cAACD,GAAD,CAASS,QAAQ,UAAUC,SAAO,EAAlC,SACG9B,EAAQ9F,MAAQ,UAAY,cAE/B,cAACgH,GAAD,CAAeW,QAAQ,YAAvB,SAAoC7B,EAAQ9F,MAAQ,MAAQ,cCvHrD6H,GAzDG,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,YAA4BnK,GAAW,EAA1BoK,cAA0B,EAAXpK,OAC9CqK,EAAWpN,qBAAWuD,KAAtB6J,OACR,EAAiCxE,oBAAS,GAA1C,mBAIM5F,GAJN,UAIwBjD,eAChB0I,EAAWC,cAAXD,OACFuB,EAAY/B,IAAOgC,IAAV,6IACAxB,EAAmB,UAAV,QACSA,EAAmC,2BAA1B,wBAAsEA,EAAoC,4BAA3B,0BAKzH,OACE,eAAC,KAAD,CACEwE,OAAQA,EACRI,eAAgBH,EAChB5G,MAAO,CACLgH,QAAS,CACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,wBACX9G,MAAO,OACP+G,SAAU,OACVC,SAAU,OACVjH,aAAc,OACdkF,WAAYtD,EAAS,UAAY,QACjCsF,OAAQ,KAGZC,aAAa,gBAnBf,UAqBE,sBAAK1H,MAAO,CAAC2F,QAAS,OAAQ/F,eAAgB,SAAU+H,SAAU,YAAlE,UACI,cAAC,IAAD,CAASC,GAAG,KAAKC,KAAK,KAAKlH,MAAM,UAAUmH,GAAG,OAAO9H,MAAO,CAAEiB,UAAW,SAAUT,MAAO,SAA1F,SACE,cAACkD,EAAD,CAAW1D,MAAO,CAACO,aAAc,OAAQF,QAAS,QAAlD,SACG3D,EAAgB,MAAO,kBAG5B,qBAAKsD,MAAO,CAAC+H,OAAQ,UAAWJ,SAAS,WAAYR,MAAO,GAAIpH,QAAS6G,EAAaoB,UAAWpB,EAAaqB,KAAO,SAASC,SAAU,EAAxI,SACI,qBAAKzH,IAAI,oBAAoBT,MAAO,CAACQ,MAAO,OAAQL,OAAQ,OAAQ4H,OAAQ,WAAYrH,IAAI,eAIpG,qBAAKV,MAAO,CAAC2F,QAAS,OAAQnF,MAAO,OAAQ2H,SAAU,OAAQvI,eAAgB,UAA/E,SACGnB,IAAEC,IAAIoI,GAAQ,SAAA/H,GAAG,OAChB,cAAC,GAAD,CAAgBjG,KAAMiG,EAAKoH,aAAcS,EAAanK,MAAOA,aCvDjEuH,GAAiBrC,IAAOgC,IAAV,0NAUdyE,GAAWzG,IAAOgC,IAAV,8XAiBRO,GAAUvC,IAAOgC,IAAV,8OA6EE0E,GAnEC,SAAC,GAAa,IAAZ5L,EAAW,EAAXA,MAER0F,GADgB1I,cACL2I,cAAXD,QACR,EAA+BG,oBAAS,GAAxC,mBAAOqE,EAAP,KAAe2B,EAAf,KAEM/D,EAAgB5C,IAAOgC,IAAV,kNAIFxB,EAAmB,UAAV,QACSA,EAAmC,2BAA1B,wBAAsEA,EAAoC,4BAA3B,0BAG1GR,YAAOmE,IAAPnE,CAAH,6QACKQ,EAAqB,UAAZ,UACLA,EAAqB,UAAZ,UACpBA,EAAqB,QAAZ,WAUFR,YAAOmE,IAAPnE,CAAH,mPACGQ,EAAqB,UAAZ,UACLA,EAAiC,oBAAxB,sBACpBA,EAAqB,QAAZ,WAiBrB,OACE,eAACoC,EAAD,CAAevE,MAAO,CAACyF,WAAatD,EAAS,UAAY,IAAzD,UACE,eAAC,IAAD,CAAMxC,cAAc,SAApB,UACE,cAAC,GAAD,CAAgBK,MAAO,CAACyF,WAAYtD,EAAS,UAAY,SAAUpC,QAAS,SAAAwG,GAAC,OAAE+B,GAAa,IAA5F,SACE,cAACF,GAAD,MAEF,cAAC,GAAD,IACA,cAAC,IAAD,CAAMzI,cAAc,SAASK,MAAO,CAACK,QAAS,QAA9C,SACE,cAAC,IAAD,CAAMJ,SAAS,OAAOD,MAAO,CAACiB,UAAW,UAAzC,iCAGJ,cAAC,GAAD,CACE0F,OAAQA,EACRC,YArBc,WAClB0B,GAAa,IAqBTzB,cAlBe,SAAC0B,GACpB,OAAO,GAkBH9L,MAAOA,QCpGT+L,GAAqB7G,IAAOgC,IAAV,kFAMlB8E,GAAgB9G,IAAOgC,IAAV,iGAsBJ+E,GAhBI,SAAC,GAAe,IAAbjM,EAAY,EAAZA,MACZ4F,EAAiB3I,qBAAWuD,KAA5BoF,aACR,OACE,eAACmG,GAAD,WACGnG,EAAa3D,KAAI,SAACC,GAAD,OAChB,cAAC8J,GAAD,UACE,cAAC,GAAD,CAA6B3P,KAAM6F,EAAKlC,MAAOA,GAA/BkC,EAAIC,cAGxB,cAAC6J,GAAD,UACE,cAAC,GAAD,CAAShM,MAAOA,UCTlBjB,GAAO,IAAIC,IAAKA,IAAKC,eACrBC,GAAoB,IAAIH,GAAKI,IAAIC,SAASC,EAAUC,IAAkBC,eAEtEI,GAAkB,IAAIZ,GAAKI,IAAIC,SAASQ,EAAQN,IAAkBO,eAElEL,GAAiB,IAAIT,GAAKI,IAAIC,SAASK,EAAQH,IAAkBI,eAwFxDwM,GAlFA,WACb,IAAQlM,EAAUmM,cAAVnM,MACAI,EAAYC,cAAZD,QACR,EAAyCnD,qBAAWuD,KAA5CC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,iBACZJ,EAAerD,qBAAWsD,KAA1BD,WACWqF,cAAXD,OA+DR,OA7DAsB,qBAAU,WAAM,4CAGd,kDAAApG,EAAA,yDACEN,GAAW,GACLsB,EAAW,GACXC,EAAc,GACN,MAAV7B,EAJN,iCAKiCd,GAAkB2B,QAAQiB,cAAcR,KAAK,CAAEN,KAAMZ,IALtF,OAKU2B,EALV,OAOIC,IAAEC,IAAIF,GAAgB,SAACG,GACrBN,EAASD,KAAK,CAAEQ,QAASD,EAAKE,OAAO,OAR3C,+BAcUC,EAAe,GACrBL,IAAEC,IAAInD,KAAS,SAACwD,GACdD,EAAaV,KAAKnC,GAAeqB,QAAQ0B,QAAQD,GAAKhB,WAhB5D,UAkByBkB,QAAQC,IAAIJ,GAlBrC,QAkBUK,EAlBV,OAmBIV,IAAEC,IAAIS,GAAQ,SAACC,EAAOC,GAChBD,EAAME,gBAAkBzC,EAAQyC,eACpCjB,EAASD,KAAK,CAAEQ,QAASrD,IAAQ8D,GAAMR,OAAO,OArBpD,QA0BE,IADMU,EAAgB,GACbrB,EAAI,EAAGA,EAAIG,EAASzE,OAAQsE,IAC9BG,EAASH,GAAGW,MACZU,EAAcnB,KAAKnC,GAAeqB,QAAQkC,SAASnB,EAASH,GAAGU,SAASb,QADrDwB,EAAcnB,KAAKzC,GAAkB2B,QAAQkC,SAASnB,EAASH,GAAGU,SAASb,QA3BvG,iBA8BuBkB,QAAQC,IAAIK,GA9BnC,QA+BE,IADME,EA9BR,OA+BWvB,EAAI,EAAGA,EAAIG,EAASzE,OAAQsE,IAC9BI,EAAYJ,KAAII,EAAYJ,GAAK,IACtCI,EAAYJ,GAAGU,QAAUP,EAASH,GAAGU,QACrCN,EAAYJ,GAAGwB,UAAYD,EAAOvB,GAClCI,EAAYJ,GAAGW,MAAQR,EAASH,GAAGW,MAC9BR,EAASH,GAAGW,MACZP,EAAYJ,GAAGC,gBAAkBhC,cADdmC,EAAYJ,GAAGC,gBAAkBnC,cApC7D,OAwCEkB,EAAWoB,GAxCb,UA0CgClC,GAAgBkB,QAAQQ,eAAejB,GAASkB,OA1ChF,QA4CE,IAFMC,EA1CR,OA2CQC,EAAe,GACZC,EAAI,EAAGA,EAAIF,EAAgBpE,OAAQsE,KAC5B,MAAVzB,GAAiBuB,EAAgBE,GAAGC,kBAAoBnC,eAEzC,MAAVS,GAAiBuB,EAAgBE,GAAGC,kBAAoBhC,gBAD/D8B,EAAaG,KAAKJ,EAAgBE,IAItCf,EAAiBc,GACjBlB,GAAW,GAnDb,6CAHc,sBACTF,GADS,mCAyDdgM,KAEC,CAAChM,EAASJ,IAGX,eAACqM,EAAA,EAAD,CACE9I,MAAO,GADT,UAKE,cAAC,IAAD,CAAS4H,GAAG,KAAKC,KAAK,KAAKlH,MAAM,OAAOmH,GAAG,OAAO9H,MAAO,CAAEiB,UAAW,UAAtE,SACE,cAAC,GAAD,CAAgBxE,MAAOA,MAEzB,cAAC,GAAD,CAAYA,MAAOA","file":"static/js/18.eb8414fa.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const getNumberSuffix = (_value, decimals = 3) => {\n  let value = _value;\n\n  if (typeof _value !== 'number') {\n    value = (new BigNumber(_value)).toNumber();\n  }\n\n  switch (true) {\n      case value === Infinity:\n          return 'Infinity';\n      case value > 1000000000:\n          return `${(value / 1000000000).toFixed(2)}B `;\n      case value > 1000000:\n          return `${(value / 1000000).toFixed(2)}M `;\n      case value > 10000:\n          return `${(value / 1000).toFixed(decimals)}k `;\n\n      default:\n          return value.toFixed(decimals);\n  }\n};","import { Nft } from './types'\n\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\nexport const PINATA_BASE_URI = 'https://nftstorage.link/ipfs/'     // 'https://cashcowprotocol.mypinata.cloud/ipfs/'\nexport const PINATA_METADATA_CID = 'bafybeiatsdvidxz6sltqxpf77r5le7s72crclcukljioikieo2s4v7swd4'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png`,\n    previewImage: '200.gif',\n    blurImage: 'swapsies-blur.png',\n    sortOrder: 999,\n    bunnyId: 0,\n  },\n  {\n    name: 'Genesis Land',\n    description: \"This genesis land especially in Cash Milk Finance\",\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png`,\n    previewImage: '201.gif',\n    blurImage: 'drizzle-blur.png',\n    sortOrder: 999,\n    bunnyId: 1,\n  },\n  {\n    name: 'Genesis Land',\n    description: \"This genesis land especially in Cash Milk Finance\",\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png`,\n    previewImage: '202.gif',\n    blurImage: 'blueberries-blur.png',\n    sortOrder: 999,\n    bunnyId: 2,\n  },\n  {\n    name: 'Genesis Land',\n    description: \"This genesis land especially in Cash Milk Finance\",\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png`,\n    previewImage: '203.gif',\n    blurImage: 'circular-blur.png',\n    sortOrder: 999,\n    bunnyId: 3,\n  },\n  {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '204.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 4,\n  },\n  {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '205.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 5,\n  },\n   {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '206.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 6,\n  },\n   {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '207.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 7,\n  },\n   {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '208.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 8,\n  },\n  \n]\n\nexport default Nfts\n","const airNFTs: string[] = [\n'275773',\n'275774',\n'275775',\n'275776',\n'275777',\n'275778',\n'275779',\n'275780',\n'275781',\n'275782',\n'275783',\n'275784',\n'275785',\n'275786',\n'275787',\n'275788',\n'275789',\n'275790',\n'275791',\n'275792',\n'275793',\n'275794',\n'275795',\n'275796',\n'275797',\n'275798',\n'275799',\n'275800',\n'275801',\n'275802',\n'275803',\n'275747',\n'275748',\n'275749',\n'275750',\n'275751',\n'275752',\n'275753',\n'275754',\n'275755',\n'275756',\n'275762',\n'275763',\n'275772',\n'275765',\n'275766',\n'275767',\n'275768',\n'275769',\n'275770',\n'275771',\n'275804',\n'275805',\n'275806',\n'275807',\n'275808',\n'275809',\n'275810',\n'275811',\n'275812',\n'275813',\n'275814',\n'275815',\n'275816',\n'275817',\n'275818',\n'275819',\n'275820',\n'275821',\n'275822',\n'275823',\n'275824',\n'275825',\n'275826',\n'275828',\n'275830',\n'275832',\n'275833',\n'275834',\n'275835',\n'275836',\n'275837',\n'275838',\n'275839',\n'275840',\n'275841',\n'275842',\n'275843',\n'275844',\n'275845',\n'275846',\n'275847',\n'275848',\n'275849',\n'275850',\n'275851',\n'275852',\n'275853',\n'275854',\n'275855'\n]\n\nexport default airNFTs\n","import _ from 'lodash'\nimport React, { useContext } from 'react'\nimport { Flex, Image, Text, Button } from 'cashcow-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { getHappyCowAddress, getStakingAddress, getAirNftAddress } from 'utils/addressHelpers'\nimport HappyCows from 'config/abi/HappyCows.json'\nimport Staking from 'config/abi/Staking.json'\nimport AirNfts from 'config/abi/AirNft.json'\nimport toast from 'react-hot-toast'\nimport { LoadingContext } from 'contexts/LoadingContext'\nimport { StakeContext } from 'contexts/StakeContext'\nimport Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport useI18n from 'hooks/useI18n'\nimport airNFTs from 'config/constants/airnfts'\nimport { getNumberSuffix } from 'utils/formatBalance'\n\nconst web3 = new Web3(Web3.givenProvider)\n\nconst happyCowsContract = new web3.eth.Contract(HappyCows.abi as AbiItem[], getHappyCowAddress())\nconst airnftContract = new web3.eth.Contract(AirNfts.abi as AbiItem[], getAirNftAddress())\nconst stakingContract = new web3.eth.Contract(Staking.abi as AbiItem[], getStakingAddress())\n\nconst Harvet = ({ rewardAllMilk, index }) => {\n  const TranslateString = useI18n()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  const { account } = useWallet()\n  const { setLoading } = useContext(LoadingContext)\n  const { initMyNFTS, initSelectedNFTs } = useContext(StakeContext)\n\n  const harvestHandler = async () => {\n    setLoading(true)\n\n    try {\n      await stakingContract.methods.harvest(index).send({ from: account })\n      toast.success('Successfully Harvest For All NFT.')\n    } catch (error) {\n      const { message } = error as Error\n      toast.error(message)\n    }\n\n    const tmpStakingItems = await stakingContract.methods.getStakedItems(account).call()\n    const stakingItems = []\n    for (let i = 0; i < tmpStakingItems.length; i++) {\n      if (index === '1' && tmpStakingItems[i].contractAddress === getHappyCowAddress())\n        stakingItems.push(tmpStakingItems[i])\n      else if (index === '2' && tmpStakingItems[i].contractAddress === getAirNftAddress())\n        stakingItems.push(tmpStakingItems[i])\n    }\n\n    initSelectedNFTs(stakingItems)\n\n    // Init My NFTs again\n\n    const tokenIds = []\n    const tmpMyTokens = []\n    if (index === '1') {\n      const happyCowTokens = await happyCowsContract.methods.fetchMyNfts().call({ from: account })\n\n      _.map(happyCowTokens, (itm) => {\n        tokenIds.push({ tokenId: itm, isAIR: false })\n      })\n    }\n\n    // retrieve my nft from air\n    else {\n      const airNftOwners = []\n      _.map(airNFTs, (nft) => {\n        airNftOwners.push(airnftContract.methods.ownerOf(nft).call())\n      })\n      const owners = await Promise.all(airNftOwners)\n      _.map(owners, (owner, idx) => {\n        if (owner.toLowerCase() !== account.toLowerCase()) return\n        tokenIds.push({ tokenId: airNFTs[idx], isAIR: true })\n      })\n    }\n\n    const myTokenHashes = []\n    for (let i = 0; i < tokenIds.length; i++) {\n      if (!tokenIds[i].isAIR) myTokenHashes.push(happyCowsContract.methods.tokenURI(tokenIds[i].tokenId).call())\n      else myTokenHashes.push(airnftContract.methods.tokenURI(tokenIds[i].tokenId).call())\n    }\n    const result = await Promise.all(myTokenHashes)\n\n    for (let i = 0; i < tokenIds.length; i++) {\n      if (!tmpMyTokens[i]) tmpMyTokens[i] = {}\n      tmpMyTokens[i].tokenId = tokenIds[i].tokenId\n      tmpMyTokens[i].tokenHash = result[i]\n      tmpMyTokens[i].isAIR = tokenIds[i].isAIR\n      if (!tokenIds[i].isAIR) tmpMyTokens[i].contractAddress = getHappyCowAddress()\n      else tmpMyTokens[i].contractAddress = getAirNftAddress()\n    }\n\n    initMyNFTS(tmpMyTokens)\n\n    setLoading(false)\n  }\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex justifyContent=\"space-between\">\n        <Text>Milk Earned</Text>\n        <Button\n          mt=\"8px\"\n          fullWidth\n          onClick={harvestHandler}\n          style={{\n            fontSize: '14px',\n            fontWeight: 400,\n            height: '28px',\n            lineHeight: 1.5,\n            padding: '0 8px',\n            whiteSpace: 'nowrap',\n            borderRadius: '16px',\n            width: '80px',\n          }}\n        >\n          {TranslateString(10007, 'Harvest')}\n        </Button>\n      </Flex>\n      <Flex mt=\"12px\">\n        <Image src=\"/images/farms/milk.png\" alt=\"MILK\" width={32} height={32} />\n        <Text color=\"secondary\" fontSize=\"24px\" pr=\"3px\" ml=\"6px\">\n          {getNumberSuffix(rewardAllMilk / 1000000, 3)}\n        </Text>\n        <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"18px\" style={{ lineHeight: 2 }}>\n          {`≈ $${getNumberSuffix((cakePriceUsd.toNumber() * rewardAllMilk) / 1000000, 3)}`}\n        </Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default Harvet\n","import React from 'react'\nimport { Flex, Image, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { getNumberSuffix } from 'utils/formatBalance';\n\nexport interface TotalStackedInferface {\n  totalStakedCount?: any;\n}\n\nconst TotalStaked = ({ totalStakedCount }: TotalStackedInferface) => {\n  const TranslateString = useI18n()\n  return (\n    <Flex flexDirection=\"column\" justifyContent=\"flex-start\">\n      <Text style={{textAlign: 'left'}}>{TranslateString(10008, 'Total Staked')}</Text>\n      <Flex mt=\"12px\">\n        <Image src='/images/cow/milkgenerator.png' alt='MILK' width={32} height={32} />\n        <Text color=\"secondary\" fontSize=\"24px\" pr=\"3px\" ml=\"6px\">\n          {getNumberSuffix(totalStakedCount, 0)}\n        </Text>\n        {/* <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"18px\" style={{lineHeight: 2}}>\n          {`≈ $${getNumberSuffix(8045043, 2)}`}\n        </Text> */}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default TotalStaked","import React from 'react'\nimport { Flex, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { getNumberSuffix } from 'utils/formatBalance';\n\nconst TotalRate = ({totalMilkPower}) => {\n  const TranslateString = useI18n()\n  return (\n    <Flex flexDirection=\"column\">\n      <Text style={{textAlign: 'left'}}>{TranslateString(10010, 'Total MilkPower')}</Text>\n      <Flex mt=\"12px\">\n        <Text color=\"secondary\" fontSize=\"24px\" pr=\"3px\" ml=\"6px\">\n          {getNumberSuffix(totalMilkPower, 0)}\n        </Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default TotalRate","import React from 'react'\nimport { Flex, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { getNumberSuffix } from 'utils/formatBalance';\n\nconst MyRate = ({myMilkPower}) => {\n  const TranslateString = useI18n()\n  return (\n    <Flex flexDirection=\"column\">\n      <Text style={{textAlign: 'left'}}>{TranslateString(10011, 'My MilkPower')}</Text>\n      <Flex mt=\"12px\">\n        <Text color=\"secondary\" fontSize=\"24px\" pr=\"3px\" ml=\"6px\">\n          {getNumberSuffix(myMilkPower, 0)}\n        </Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default MyRate","import React from 'react'\nimport { Flex, Image, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { getNumberSuffix } from 'utils/formatBalance';\n\nconst RatePer = ({dailyMilkRate}) => {\n  const cakePriceUsd = usePriceCakeBusd()\n\n  const TranslateString = useI18n()\n  return (\n    <Flex flexDirection=\"column\">\n      <Text style={{textAlign: 'left'}}>{TranslateString(10012, 'Daily Milk / 100 MilkPower')}</Text>\n      <Flex mt=\"12px\">\n        <Image src='/images/farms/milk.png' alt='MILK' width={32} height={32} />\n        <Text color=\"secondary\" fontSize=\"24px\" pr=\"3px\" ml=\"6px\">\n          {getNumberSuffix(dailyMilkRate / 1000000, 0)}\n        </Text>\n        <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"18px\" style={{lineHeight: 2}}>\n          {`≈ $${getNumberSuffix(cakePriceUsd.toNumber() * dailyMilkRate / 1000000 , 2)}`}\n        </Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default RatePer","import React from 'react'\nimport { Flex, Image, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { getNumberSuffix } from 'utils/formatBalance';\n\nexport interface MyStakedInferface {\n  myStakedCount?: any;\n}\n\nconst MyStaked = ({ myStakedCount }: MyStakedInferface) => {\n  const TranslateString = useI18n()\n  return (\n    <Flex flexDirection=\"column\">\n      <Text style={{textAlign: 'left'}}>{TranslateString(10009, 'My Staked')}</Text>\n      <Flex mt=\"12px\">\n        <Image src='/images/cow/milkgenerator.png' alt='MILK' width={32} height={32} />\n        <Text color=\"secondary\" fontSize=\"24px\" pr=\"3px\" ml=\"6px\">\n          {getNumberSuffix(myStakedCount, 0)}\n        </Text>\n        {/* <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"18px\" style={{lineHeight: 2}}>\n          {`≈ $${getNumberSuffix(494543, 2)}`}\n        </Text> */}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default MyStaked","import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport styled from 'styled-components'\nimport { Flex,  BaseLayout } from 'cashcow-uikit'\nimport Staking from 'config/abi/Staking.json'\nimport { getStakingAddress} from 'utils/addressHelpers'\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\"\n// import useI18n from 'hooks/useI18n'\nimport useTheme from 'hooks/useTheme'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { StakeContext } from 'contexts/StakeContext'\nimport { Harvest, TotalStaked, MyStaked, TotalRate, MyRate, RatePer } from './StaticComponents'\n\nconst StaticInfoCard = styled(BaseLayout)`\n  ${({ theme }) => theme.mediaQueries.xs} {\n    grid-template-columns: repeat(1, 1fr);\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  width: 100%;\n`\nconst web3 = new Web3(Web3.givenProvider)\nconst stakingContract = new web3.eth.Contract(Staking.abi as AbiItem[], getStakingAddress())\n\nconst StatisticsInfo = ({index}) => {\n\n  // const TranslateString = useI18n()\n  const { isDark } = useTheme()\n  \n  const { account } = useWallet()\n\n  const { selectedNFTS } = useContext(StakeContext)\n  \n  const [poolInfo, setPoolInfo] = useState({rewardAllMilk: 0, totalStakedCount:0 ,myStakedCount: 0, totalMilkPower: 0, myMilkPower: 0, dailyMilkRate: 0})\n\n  const fetchInfo = useCallback(async ()=>{\n    \n    const pendingMilk = await stakingContract.methods.getPendingMilk(index, account).call();\n    const pool = await stakingContract.methods.pools(index).call();\n    const totalStkCount = pool.stakedCount;\n    console.log(\"Total Staked Count\", totalStkCount);\n    const tmpTotalMilkPower = await stakingContract.methods.getTotalMilkPower(index).call();\n    const tmpMyMilkPower = await stakingContract.methods.getMyMilkPower(index, account).call();\n    const tmpDailyMilkRate = await stakingContract.methods.getDailyMilkRate(index).call();\n    setPoolInfo({rewardAllMilk: pendingMilk, totalStakedCount: totalStkCount, myStakedCount: selectedNFTS.length, totalMilkPower: tmpTotalMilkPower, myMilkPower: tmpMyMilkPower, dailyMilkRate: tmpDailyMilkRate});\n  }, [account, selectedNFTS, index])\n  \n  useEffect(() => {\n    fetchInfo()\n  },[fetchInfo])\n  const BoxShadow = styled.div`\n    background: ${!isDark ? 'white' : '#27262c'};\n    box-shadow: 0px 2px 12px -8px ${!isDark ? 'rgba(25, 19, 38, 0.7)' : 'rgba(203, 203, 203, 0.7)'}, 0px 1px 1px ${!isDark ? 'rgba(25, 19, 38, 0.05)' : 'rgba(203, 203, 203, 0.05)'};\n    position: relative;\n    width: 100%;\n  `\n  const InfoWrapper = styled.div `\n    box-shadow: 0px 2px 12px -8px ${!isDark ? 'rgba(25, 19, 38, 0.7)' : 'rgba(203, 203, 203, 0.7)'}, 0px 1px 1px ${!isDark ? 'rgba(25, 19, 38, 0.05)' : 'rgba(203, 203, 203, 0.05)'};\n    width: 100%;\n    border-radius: 16px;\n    padding: 24px;\n  `\n\n  return (\n    <BoxShadow style={{borderRadius: '32px', padding: '24px'}}>\n      <Flex flexDirection=\"column\" alignItems=\"cneter\">\n        <BoxShadow style={{borderRadius: '16px', padding: '24px'}}>\n          {index === '1' ? 'Happy Cows Staking' : 'Genesis Lands Staking'}\n        </BoxShadow>\n        <StaticInfoCard style={{marginTop: \"25px\"}}>\n          <InfoWrapper>\n            <Harvest rewardAllMilk={poolInfo.rewardAllMilk} index={index}/>\n          </InfoWrapper>\n          <InfoWrapper>\n            <TotalStaked totalStakedCount={poolInfo.totalStakedCount}/>\n          </InfoWrapper>\n          <InfoWrapper>\n            <MyStaked myStakedCount={poolInfo.myStakedCount}/>\n          </InfoWrapper>\n          <InfoWrapper>\n            <TotalRate totalMilkPower={poolInfo.totalMilkPower}/>\n          </InfoWrapper>\n          <InfoWrapper>\n            <MyRate myMilkPower={poolInfo.myMilkPower}/>\n          </InfoWrapper>\n          <InfoWrapper>\n            <RatePer dailyMilkRate={poolInfo.dailyMilkRate}/>\n          </InfoWrapper>\n        </StaticInfoCard>\n      </Flex>\n    </BoxShadow>\n  )\n}\n\nexport default StatisticsInfo","import _ from 'lodash'\nimport React, { useContext, useCallback, useEffect, useState } from 'react'\nimport { Flex, Image, Text, Tag } from 'cashcow-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { getHappyCowAddress, getStakingAddress, getAirNftAddress } from 'utils/addressHelpers'\nimport { PINATA_BASE_URI } from 'config/constants/nfts'\nimport HappyCows from 'config/abi/HappyCows.json'\nimport Staking from 'config/abi/Staking.json'\nimport AirNfts from 'config/abi/AirNft.json'\nimport toast from 'react-hot-toast'\nimport { LoadingContext } from 'contexts/LoadingContext'\nimport { StakeContext } from 'contexts/StakeContext'\nimport Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport useI18n from 'hooks/useI18n'\nimport useTheme from 'hooks/useTheme'\nimport airNFTs from 'config/constants/airnfts'\nimport styled from 'styled-components'\nimport { getNumberSuffix } from 'utils/formatBalance'\n\nconst ImageContainer = styled.div`\n  position: relative;\n  padding-bottom: 100%;\n  height: 0;\n  border-top-right-radius: 16px;\n  border-top-left-radius: 16px;\n  overflow: hidden;\n  cursor: pointer;\n`\n\nconst NftImage = styled.div`\n  transition: transform 0.3s ease, -webkit-transform 0.3s ease;\n  transform-origin: center;\n  background-size: auto 100%;\n  background-position: 50%;\n  background-repeat: no-repeat;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  &:hover {\n    transform: scale(1.04);\n  }\n`\nconst Divider = styled.div`\n  height: 1px;\n  min-width: unset;\n  background-image: url(../images/line.jpg);\n  background-repeat: repeat-x;\n  position: relative;\n  background-size: contain;\n  background-position: 50%;\n`\n\nconst ItemTitle = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 14px;\n  color: #694f4e;\n`\nconst web3 = new Web3(Web3.givenProvider)\n\nconst happyCowsContract = new web3.eth.Contract(HappyCows.abi as AbiItem[], getHappyCowAddress())\nconst stakingContract = new web3.eth.Contract(Staking.abi as AbiItem[], getStakingAddress())\nconst airnftContract = new web3.eth.Contract(AirNfts.abi as AbiItem[], getAirNftAddress())\n\nconst StakeItem = ({ data, index }) => {\n  const TranslateString = useI18n()\n  const { isDark } = useTheme()\n  const { account } = useWallet()\n  const { setLoading } = useContext(LoadingContext)\n  const { appendCandidate, initMyNFTS, initSelectedNFTs } = useContext(StakeContext)\n\n  const [milkPower, setMilkPower] = useState(0)\n\n  const ItemContainer = styled.div`\n    margin-right: 15px;\n    margin-bottom: 15px;\n    border-radius: 16px;\n    background: ${!isDark ? 'white' : '#27262c'};\n    box-shadow: 0px 2px 12px -8px ${!isDark ? 'rgba(25, 19, 38, 0.7)' : 'rgba(203, 203, 203, 0.7)'},\n      0px 1px 1px ${!isDark ? 'rgba(25, 19, 38, 0.05)' : 'rgba(203, 203, 203, 0.05)'};\n    position: relative;\n  `\n  const StakeBtn = styled.div`\n    border-color: ${!isDark ? '#7645d9' : '#101820'};\n    background-color: ${!isDark ? '#F0B90B' : '#F0B90B'};\n    color: ${!isDark ? 'white' : 'white'};\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    padding: 16px 12px;\n    font-size: 18px;\n    margin-bottom: 12px;\n    border-radius: 12px;\n    transition: transform 0.3s ease, -webkit-transform 0.3s ease;\n    cursor: pointer;\n    &:hover {\n      transform: scale(1.04);\n    }\n  `\n\n  const [nftInfo, setNFTInfo] = useState({ tokenName: '', tokenId: '', imgUrl: '', isAIR: false })\n  const fetchNft = useCallback(async () => {\n    if (!data || !data.tokenId) return\n    let isAIR = false\n    if (data.contractAddress === getHappyCowAddress()) isAIR = false\n    else if (data.contractAddress === getAirNftAddress()) isAIR = true\n    let tokenURI\n    if (!isAIR) tokenURI = await happyCowsContract.methods.tokenURI(data.tokenId).call()\n    else tokenURI = await airnftContract.methods.tokenURI(data.tokenId).call()\n    const res = await fetch(tokenURI)\n    const json = await res.json()\n    let imageUrl = json.image\n    if (!isAIR) {\n      imageUrl = imageUrl.slice(7)\n      imageUrl = `${PINATA_BASE_URI}${imageUrl}`\n    }else imageUrl = 'https://ipfs.io/ipfs/QmenL2FwtXn8vpbNWjQBkH4Fbb34E4w4GyMa6piRGgngh2'\n\n    setNFTInfo({ tokenName: json.name, tokenId: data.tokenId, imgUrl: imageUrl, isAIR: data.isAIR })\n  }, [data])\n\n  const fetchMilkPower = useCallback(async () => {\n    const poolInfo = await stakingContract.methods.pools(index).call()\n    const tmpMilkPower = poolInfo.milkPower\n    setMilkPower(tmpMilkPower)\n  }, [index])\n  useEffect(() => {\n    fetchNft()\n    fetchMilkPower()\n  }, [fetchNft, fetchMilkPower])\n\n  const unstakeNFT = async () => {\n    setLoading(true)\n\n    try {\n      await stakingContract.methods.unstake(data.itemId).send({ from: account })\n      toast.success('Successfully Harvest and Unstake For this NFT.')\n    } catch (error) {\n      const { message } = error as Error\n      toast.error(message)\n    }\n\n    const tmpStakingItems = await stakingContract.methods.getStakedItems(account).call()\n    const stakingItems = []\n    for (let i = 0; i < tmpStakingItems.length; i++) {\n      if (index === '1' && tmpStakingItems[i].contractAddress === getHappyCowAddress())\n        stakingItems.push(tmpStakingItems[i])\n      else if (index === '2' && tmpStakingItems[i].contractAddress === getAirNftAddress())\n        stakingItems.push(tmpStakingItems[i])\n    }\n\n    initSelectedNFTs(stakingItems)\n\n    // Init My NFTs Again\n\n    const tokenIds = []\n    const tmpMyTokens = []\n    if (index === '1') {\n      const happyCowTokens = await happyCowsContract.methods.fetchMyNfts().call({ from: account })\n\n      _.map(happyCowTokens, (itm) => {\n        tokenIds.push({ tokenId: itm, isAIR: false })\n      })\n    }\n\n    // retrieve my nft from air\n    else {\n      const airNftOwners = []\n      _.map(airNFTs, (nft) => {\n        airNftOwners.push(airnftContract.methods.ownerOf(nft).call())\n      })\n      const owners = await Promise.all(airNftOwners)\n      _.map(owners, (owner, idx) => {\n        if (owner.toLowerCase() !== account.toLowerCase()) return\n        tokenIds.push({ tokenId: airNFTs[idx], isAIR: true })\n      })\n    }\n\n    const myTokenHashes = []\n    for (let i = 0; i < tokenIds.length; i++) {\n      if (!tokenIds[i].isAIR) myTokenHashes.push(happyCowsContract.methods.tokenURI(tokenIds[i].tokenId).call())\n      else myTokenHashes.push(airnftContract.methods.tokenURI(tokenIds[i].tokenId).call())\n    }\n    const result = await Promise.all(myTokenHashes)\n\n    for (let i = 0; i < tokenIds.length; i++) {\n      if (!tmpMyTokens[i]) tmpMyTokens[i] = {}\n      tmpMyTokens[i].tokenId = tokenIds[i].tokenId\n      tmpMyTokens[i].tokenHash = result[i]\n      tmpMyTokens[i].isAIR = tokenIds[i].isAIR\n      if (!tokenIds[i].isAIR) tmpMyTokens[i].contractAddress = getHappyCowAddress()\n      else tmpMyTokens[i].contractAddress = getAirNftAddress()\n    }\n\n    initMyNFTS(tmpMyTokens)\n\n    setLoading(false)\n  }\n  return (\n    <ItemContainer style={{ background: isDark ? '#27262c' : '' }}>\n      <Flex flexDirection=\"column\">\n        <ImageContainer>\n          <NftImage style={{ backgroundImage: `url(${nftInfo.imgUrl})` }} />\n        </ImageContainer>\n        <Divider />\n        <Flex flexDirection=\"column\" style={{ padding: '24px' }}>\n          <Text fontSize=\"20px\" style={{ textAlign: 'center' }}>\n            {nftInfo.tokenName}\n          </Text>\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginBottom: '14px' }}>\n            <Text>Milk Power: </Text> &nbsp;&nbsp;\n            <Text fontSize=\"15px\">{getNumberSuffix(milkPower, 0)}</Text>\n          </div>\n          <StakeBtn onClick={() => unstakeNFT()}>Unstake</StakeBtn>\n          {/* <UpgradeBtn>Upgrade HashRate</UpgradeBtn> */}\n        </Flex>\n      </Flex>\n    </ItemContainer>\n  )\n}\n\nexport default StakeItem\n","import _ from 'lodash'\nimport React, { useContext, useCallback, useEffect, useState } from 'react'\nimport { StakeContext } from 'contexts/StakeContext'\nimport styled from 'styled-components'\nimport toast from 'react-hot-toast'\nimport { PINATA_BASE_URI } from 'config/constants/nfts'\nimport HappyCows from 'config/abi/HappyCows.json'\nimport AirNfts from 'config/abi/AirNft.json'\nimport { getHappyCowAddress, getStakingAddress, getAirNftAddress } from 'utils/addressHelpers'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport Staking from 'config/abi/Staking.json'\nimport airNFTs from 'config/constants/airnfts'\nimport Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { LoadingContext } from 'contexts/LoadingContext'\nimport { Tag } from 'cashcow-uikit'\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst TypeTag = styled(Tag)`\n  backdrop-filter: blur(10px);\n`\n\nconst HoverWrapper = styled.div`\n  position: absolute;\n  top: 12px;\n  right: 8px;\n`\n\nconst CandidateWrapper = styled.div`\n  cursor: pointer;\n  margin: 10px;\n  background: #fff;\n  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 3%), 0 4px 6px -2px rgb(0 0 0 / 1%);\n  border-radius: 24px;\n  padding: 16px;\n  width: calc(20% - 20px);\n  box-sizing: border-box;\n  display: flex;\n  transition: transform 0.3s ease, -webkit-transform 0.3s ease;\n  padding-top: calc(20% - 50px);\n  position: relative;\n  background-size: cover;\n  color: white;\n\n  @media (max-width: 768px) {\n    width: calc(50% - 20px);\n    padding-top: calc(50% - 50px);\n  }\n\n  &:before {\n    position: absolute;\n    z-index: 0;\n    content: '';\n    width: 100%;\n    height: 40px;\n    bottom: 0;\n    left: 0;\n    backdrop-filter: blur(5px);\n    border-radius: 0 0 24px 24px;\n  }\n\n  span {\n    z-index: 10;\n    text-shadow: 2px 2px 2px black;\n    text-transform: uppercase;\n  }\n`\n\nconst web3 = new Web3(Web3.givenProvider)\nconst stakingContract = new web3.eth.Contract(Staking.abi as AbiItem[], getStakingAddress())\nconst happyCowsContract = new web3.eth.Contract(HappyCows.abi as AbiItem[], getHappyCowAddress())\nconst airnftContract = new web3.eth.Contract(AirNfts.abi as AbiItem[], getAirNftAddress())\n\nconst StakeCandidate = ({ data, closeRequest, index }) => {\n  const { account } = useWallet()\n  const [nftInfo, setNFTInfo] = useState({ tokenName: '', tokenId: '', imgUrl: '', isAIR: false })\n  const { setLoading } = useContext(LoadingContext)\n  const { initMyNFTS, initSelectedNFTs } = useContext(StakeContext)\n\n  const fetchNft = useCallback(async () => {\n    if (!data || !data.tokenId) return\n\n    const res = await fetch(data.tokenHash)\n    const json = await res.json()\n\n    let imageUrl = json.image\n\n    if (!data.isAIR) {\n      imageUrl = imageUrl.slice(7)\n      imageUrl = `${PINATA_BASE_URI}${imageUrl}`\n    }else imageUrl = 'https://ipfs.io/ipfs/QmenL2FwtXn8vpbNWjQBkH4Fbb34E4w4GyMa6piRGgngh2'\n\n    setNFTInfo({ tokenName: json.name, tokenId: data.tokenId, imgUrl: imageUrl, isAIR: data.isAIR })\n  }, [data])\n\n  useEffect(() => {\n    fetchNft()\n  }, [fetchNft])\n\n  const nftSelected = async () => {\n    setLoading(true)\n    closeRequest()\n    if (!data.isAIR)\n      try {\n        await happyCowsContract.methods.approve(getStakingAddress(), data.tokenId).send({ from: account })\n\n        await stakingContract.methods.stake(data.contractAddress, data.tokenId).send({ from: account })\n        toast.success('Successfully Staked NFT.')\n      } catch (error) {\n        const { message } = error as Error\n        toast.error(message)\n      }\n    else\n      try {\n        await airnftContract.methods.approve(getStakingAddress(), data.tokenId).send({ from: account })\n        await stakingContract.methods.stake(data.contractAddress, data.tokenId).send({ from: account })\n        toast.success('Successfully Staked NFT.')\n      } catch (error) {\n        const { message } = error as Error\n        toast.error(message)\n      }\n\n    const tmpStakingItems = await stakingContract.methods.getStakedItems(account).call()\n    const stakingItems = []\n    for (let i = 0; i < tmpStakingItems.length; i++) {\n      if (index === '1' && tmpStakingItems[i].contractAddress === getHappyCowAddress())\n        stakingItems.push(tmpStakingItems[i])\n      else if (index === '2' && tmpStakingItems[i].contractAddress === getAirNftAddress())\n        stakingItems.push(tmpStakingItems[i])\n    }\n\n    initSelectedNFTs(stakingItems)\n\n    /** Init My NFTs again */\n\n    const tokenIds = []\n    const tmpMyTokens = []\n    if (index === '1') {\n      const happyCowTokens = await happyCowsContract.methods.fetchMyNfts().call({ from: account })\n\n      _.map(happyCowTokens, (itm) => {\n        tokenIds.push({ tokenId: itm, isAIR: false })\n      })\n    }\n\n    // retrieve my nft from air\n    else {\n      const airNftOwners = []\n      _.map(airNFTs, (nft) => {\n        airNftOwners.push(airnftContract.methods.ownerOf(nft).call())\n      })\n      const owners = await Promise.all(airNftOwners)\n      _.map(owners, (owner, idx) => {\n        if (owner.toLowerCase() !== account.toLowerCase()) return\n        tokenIds.push({ tokenId: airNFTs[idx], isAIR: true })\n      })\n    }\n\n    const myTokenHashes = []\n    for (let i = 0; i < tokenIds.length; i++) {\n      if (!tokenIds[i].isAIR) myTokenHashes.push(happyCowsContract.methods.tokenURI(tokenIds[i].tokenId).call())\n      else myTokenHashes.push(airnftContract.methods.tokenURI(tokenIds[i].tokenId).call())\n    }\n    const result = await Promise.all(myTokenHashes)\n\n    for (let i = 0; i < tokenIds.length; i++) {\n      if (!tmpMyTokens[i]) tmpMyTokens[i] = {}\n      tmpMyTokens[i].tokenId = tokenIds[i].tokenId\n      tmpMyTokens[i].tokenHash = result[i]\n      tmpMyTokens[i].isAIR = tokenIds[i].isAIR\n      if (!tokenIds[i].isAIR) tmpMyTokens[i].contractAddress = getHappyCowAddress()\n      else tmpMyTokens[i].contractAddress = getAirNftAddress()\n    }\n\n    initMyNFTS(tmpMyTokens)\n    setLoading(false)\n  }\n\n  return (\n    <CandidateWrapper style={{ backgroundImage: `url('${nftInfo.imgUrl}')` }} onClick={(e) => nftSelected()}>\n      <span>{nftInfo.tokenName}</span>\n      <HoverWrapper>\n        <TypeTag variant=\"success\" outline>\n          {nftInfo.isAIR ? 'Genesis' : 'HappyCows'}\n        </TypeTag>\n        <MultiplierTag variant=\"secondary\">{nftInfo.isAIR ? '10X' : '1X'}</MultiplierTag>\n      </HoverWrapper>\n    </CandidateWrapper>\n  )\n}\n\nexport default StakeCandidate\n","import _ from 'lodash';\nimport React, {useContext, useState, useMemo} from 'react'\nimport styled from 'styled-components'\nimport { StakeContext } from 'contexts/StakeContext'\nimport { Heading } from 'cashcow-uikit'\nimport useTheme from 'hooks/useTheme'\nimport useI18n from 'hooks/useI18n'\nimport Modal from 'react-modal';\nimport StakeCandidate from './StakeCandidate'\n\n\n\nconst SelectNFT = ({isOpen, closeDialog, addNFTHandler, index}) => {\n  const { myNFTS } = useContext(StakeContext)\n  const [modalIsOpen, setIsOpen] = useState(false);\n    const closeModal = () => {\n      setIsOpen(false);\n  }\n  const TranslateString = useI18n()\n  const { isDark } = useTheme()\n  const BoxShadow = styled.div`\n  background: ${!isDark ? 'white' : '#27262c'};\n  box-shadow: 0px 2px 12px -8px ${!isDark ? 'rgba(25, 19, 38, 0.7)' : 'rgba(203, 203, 203, 0.7)'}, 0px 1px 1px ${!isDark ? 'rgba(25, 19, 38, 0.05)' : 'rgba(203, 203, 203, 0.05)'};\n  position: relative;\n  width: 100%;\n`\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={closeDialog}\n      style={{\n        content: {\n          top: '50%',\n          left: '50%',\n          right: 'auto',\n          bottom: 'auto',\n          marginRight: '-50%',\n          transform: 'translate(-50%, -50%)',\n          width: \"70vw\",\n          maxWidth: '70vw',\n          minWidth: '70vw',\n          borderRadius: '15px',\n          background: isDark ? '#27262c' : 'white',\n          zindex: 15,\n        }\n      }}\n      contentLabel=\"Example Modal\"\n    >\n      <div style={{display: 'flex', justifyContent: 'center', position: 'relative'}}>\n          <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"25px\" style={{ textAlign: 'center', width: \"600px\" }}>\n            <BoxShadow style={{borderRadius: '16px', padding: '24px'}}>\n              {TranslateString(10014, 'Choose NFT')}\n            </BoxShadow>\n          </Heading>\n          <div style={{cursor: 'pointer', position:'absolute', right: 0}} onClick={closeDialog} onKeyDown={closeDialog} role = \"button\" tabIndex={0}>\n              <img src=\"/images/close.png\" style={{width: \"25px\", height: \"25px\", cursor: 'pointer'}} alt=\"close\"/>\n          </div>\n      </div>\n      \n      <div style={{display: 'flex', width: '100%', flexWrap: 'wrap', justifyContent: 'center'}}>\n        {_.map(myNFTS, nft=>(\n          <StakeCandidate data={nft} closeRequest={closeDialog} index={index}/>\n        ))}\n      </div>\n    </Modal>\n  )\n}\n\nexport default SelectNFT\n","import React, { useState } from 'react'\nimport { Flex, Text, Tag } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport SelectNFT from './SelectNFT'\n\nconst ImageContainer = styled.div`\n  position: relative;\n  padding-bottom: 100%;\n  height: 0;\n  border-top-right-radius: 16px;\n  border-top-left-radius: 16px;\n  background-color: rgb(249, 244, 211);\n  cursor: pointer;\n`\n\nconst AddImage = styled.div`\n  transition: transform .3s ease,-webkit-transform .3s ease;\n  transform-origin: center;\n  background-size: auto 100%;\n  background-position: 50%;\n  background-repeat: no-repeat;\n  background-image: url('/images/add.png');\n  left: 0;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  &:hover{\n    transform: scale(1.04);\n  }\n`\n\nconst Divider = styled.div`\n    height: 1px;\n    min-width: unset;\n    background-image: url(../images/line.jpg);\n    background-repeat: repeat-x;\n    position: relative;\n    background-size: contain;\n    background-position: 50%;\n`\n\nconst NewItem = ({index}) => {\n  const TranslateString = useI18n()\n  const { isDark } = useTheme()\n  const [isOpen, setModalOpen] = useState(false)\n\n  const ItemContainer = styled.div`\n    margin-right: 15px;\n    margin-bottom: 15px;\n    border-radius: 16px;\n    background: ${!isDark ? 'white' : '#27262c'};\n    box-shadow: 0px 2px 12px -8px ${!isDark ? 'rgba(25, 19, 38, 0.7)' : 'rgba(203, 203, 203, 0.7)'}, 0px 1px 1px ${!isDark ? 'rgba(25, 19, 38, 0.05)' : 'rgba(203, 203, 203, 0.05)'};\n    position: relative;\n  `\n  const StakeBtn = styled(Tag)`\n    border-color: ${!isDark ? '#a99653' : '#101820'};\n    background-color: ${!isDark ? '#a99653' : '#101820'};\n    color: ${!isDark ? '#361B72' : 'white'};\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    padding: 16px 12px;\n    font-size: 18px;\n    margin-bottom: 12px;\n    border-radius: 12px;\n  `\n\n  const UpgradeBtn = styled(Tag)`\n    border-color: ${!isDark ? '#a99653' : '#101820'};\n    background-color: ${!isDark ? 'rgba(250,213,81,.1)' : 'rgba(16,24,32,.2)'};\n    color: ${!isDark ? '#361B72' : 'white'};\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    padding: 16px 12px;\n    font-size: 18px;\n    border-radius: 12px;\n  `\n\n  const closeDialog = () => {\n    setModalOpen(false);\n  }\n\n  const addNFT2Stake = (val) => {\n    return false;\n  }\n\n  return (\n    <ItemContainer style={{background : isDark ? '#27262c' : ''}}>\n      <Flex flexDirection=\"column\">\n        <ImageContainer style={{background: isDark ? '#27262c' : 'white'}} onClick={e=>setModalOpen(true)}>\n          <AddImage />\n        </ImageContainer>\n        <Divider />\n        <Flex flexDirection=\"column\" style={{padding: '24px'}}>\n          <Text fontSize=\"24px\" style={{textAlign: 'center'}}>Stake Your NFT</Text>\n        </Flex>\n      </Flex>\n      <SelectNFT \n        isOpen={isOpen}\n        closeDialog={closeDialog}\n        addNFTHandler={addNFT2Stake}\n        index={index}\n      />\n    </ItemContainer>\n  )\n}\n\nexport default NewItem","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { StakeContext } from 'contexts/StakeContext'\nimport { StakeItem, NewItem } from './ItemComponents'\n\nconst StakeItemContainer = styled.div`\n  display: flex;\n  width: 100%;\n  flex-wrap: wrap;\n`\n\nconst StakeItemEach = styled.div`\n  width: 25%;\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`\nconst StakeItems = ({ index }) => {\n  const { selectedNFTS } = useContext(StakeContext)\n  return (\n    <StakeItemContainer>\n      {selectedNFTS.map((itm) => (\n        <StakeItemEach>\n          <StakeItem key={itm.tokenId} data={itm} index={index} />\n        </StakeItemEach>\n      ))}\n      <StakeItemEach>\n        <NewItem index={index} />\n      </StakeItemEach>\n    </StakeItemContainer>\n  )\n}\n\nexport default StakeItems\n","import _ from 'lodash'\nimport React, { useContext, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useTheme } from 'styled-components'\nimport Page from 'components/layout/Page'\nimport { StakeContext } from 'contexts/StakeContext'\nimport { LoadingContext } from 'contexts/LoadingContext'\nimport { AbiItem } from 'web3-utils'\nimport { Heading } from 'cashcow-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { getHappyCowAddress, getAirNftAddress, getStakingAddress } from 'utils/addressHelpers'\nimport Web3 from 'web3'\nimport AirNfts from 'config/abi/AirNft.json'\nimport Staking from 'config/abi/Staking.json'\nimport HappyCows from 'config/abi/HappyCows.json'\nimport airNFTs from 'config/constants/airnfts'\nimport { StatisticsInfo, StakeItems } from './components'\n\nconst web3 = new Web3(Web3.givenProvider)\nconst happyCowsContract = new web3.eth.Contract(HappyCows.abi as AbiItem[], getHappyCowAddress())\n\nconst stakingContract = new web3.eth.Contract(Staking.abi as AbiItem[], getStakingAddress())\n\nconst airnftContract = new web3.eth.Contract(AirNfts.abi as AbiItem[], getAirNftAddress())\n\ntype boxParam = {\n  index: string\n}\n\nconst Stakes = () => {\n  const { index } = useParams<boxParam>()\n  const { account } = useWallet()\n  const { initMyNFTS, initSelectedNFTs } = useContext(StakeContext)\n  const { setLoading } = useContext(LoadingContext)\n  const { isDark } = useTheme()\n\n  useEffect(() => {\n    if (!account) return\n\n    async function fetchMyNFTS() {\n      setLoading(true)\n      const tokenIds = []\n      const tmpMyTokens = []\n      if (index === '1') {\n        const happyCowTokens = await happyCowsContract.methods.fetchMyNfts().call({ from: account })\n\n        _.map(happyCowTokens, (itm) => {\n          tokenIds.push({ tokenId: itm, isAIR: false })\n        })\n      }\n\n      // retrieve my nft from air\n      else {\n        const airNftOwners = []\n        _.map(airNFTs, (nft) => {\n          airNftOwners.push(airnftContract.methods.ownerOf(nft).call())\n        })\n        const owners = await Promise.all(airNftOwners)\n        _.map(owners, (owner, idx) => {\n          if (owner.toLowerCase() !== account.toLowerCase()) return\n          tokenIds.push({ tokenId: airNFTs[idx], isAIR: true })\n        })\n      }\n\n      const myTokenHashes = []\n      for (let i = 0; i < tokenIds.length; i++) {\n        if (!tokenIds[i].isAIR) myTokenHashes.push(happyCowsContract.methods.tokenURI(tokenIds[i].tokenId).call())\n        else myTokenHashes.push(airnftContract.methods.tokenURI(tokenIds[i].tokenId).call())\n      }\n      const result = await Promise.all(myTokenHashes)\n      for (let i = 0; i < tokenIds.length; i++) {\n        if (!tmpMyTokens[i]) tmpMyTokens[i] = {}\n        tmpMyTokens[i].tokenId = tokenIds[i].tokenId\n        tmpMyTokens[i].tokenHash = result[i]\n        tmpMyTokens[i].isAIR = tokenIds[i].isAIR\n        if (!tokenIds[i].isAIR) tmpMyTokens[i].contractAddress = getHappyCowAddress()\n        else tmpMyTokens[i].contractAddress = getAirNftAddress()\n      }\n\n      initMyNFTS(tmpMyTokens)\n\n      const tmpStakingItems = await stakingContract.methods.getStakedItems(account).call()\n      const stakingItems = []\n      for (let i = 0; i < tmpStakingItems.length; i++) {\n        if (index === '1' && tmpStakingItems[i].contractAddress === getHappyCowAddress())\n          stakingItems.push(tmpStakingItems[i])\n        else if (index === '2' && tmpStakingItems[i].contractAddress === getAirNftAddress())\n          stakingItems.push(tmpStakingItems[i])\n      }\n      initSelectedNFTs(stakingItems)\n      setLoading(false)\n    }\n\n    fetchMyNFTS()\n    // eslint-disable-next-line\n  }, [account, index])\n\n  return (\n    <Page\n      style={{\n       \n      }}\n    >\n      <Heading as=\"h1\" size=\"lg\" color=\"text\" mb=\"25px\" style={{ textAlign: 'center' }}>\n        <StatisticsInfo index={index} />\n      </Heading>\n      <StakeItems index={index} />\n    </Page>\n  )\n}\n\nexport default Stakes\n"],"sourceRoot":""}
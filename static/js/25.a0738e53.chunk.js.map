{"version":3,"sources":["config/constants/airnfts.ts","views/MyNfts/components/MyNftDataLeftComponent.tsx","views/MyNfts/components/MyNftDataRightComponent.tsx","views/MyNfts/components/MyNftData.tsx","views/MyNfts/components/MyNftDetailHeader.tsx","views/MyNfts/MyNftsDeatail.tsx"],"names":["airNFTs","NftMetaDataContainer","styled","div","NftImageContainer","NftImage","NftInfo","NftTitleContainer","NftSalePriceContainer","NftSalePrice","NftSalePriceTitleContainer","TokenSelectContainer","NftSalePriceDetail","BuyNowBtnContainer","ItemValueToken","InputTag","input","web3","Web3","givenProvider","happyCowsContract","eth","Contract","HappyCows","abi","getHappyCowAddress","marketContract","Market","getMarketAddress","airnftContract","AirNfts","getAirNftAddress","MyNftDataLeftComponent","myToken","isDark","useTheme","account","useWallet","useState","image","setImage","salePrice","setSalePrice","tokenName","setTokenName","itemId","setItemId","description","setDescription","priceNft","setPriceNft","flgList","setFlgList","modalIsOpen","setIsOpen","flgButtonState","setFlgButtonState","setLoading","useContext","LoadingContext","cakePriceUsd","usePriceCakeBusd","fetchNft","useCallback","a","methods","fetchMarketItems","call","from","marketItems","i","length","fromWei","price","tmpTokenId","tokenId","nftHash","isAIR","tokenURI","toBN","fetch","res","json","name","imageUrl","slice","PINATA_BASE_URI","useEffect","listNFTHandler","closeModal","getApproved","approve","send","toast","success","isApprovedForAll","setApprovalForAll","createMarketItem","toWei","on","receipt","returnItemId","events","MarketItemCreated","returnValues","console","log","message","error","unlistNFTHandler","unlistMarketItem","style","backgroundImage","paddingTop","fontSize","color","background","boxShadow","fontWeight","display","alignItems","cursor","width","height","marginRight","transform","alt","src","getNumberSuffix","marginLeft","Math","round","toNumber","parseInt","margin","padding","onClick","disabled","isOpen","onAfterOpen","onRequestClose","content","top","left","right","bottom","maxWidth","minWidth","borderRadius","contentLabel","justifyContent","as","size","mb","onKeyDown","role","tabIndex","type","maxLength","placeholder","value","onChange","e","target","NftOnChainDataContainer","NftOnChainDataTitle","NftOnChainDetailContainer","NftOnChainDetail","NftOnChainEachData","NftOnChainLinkStyle","MyNftDataRightComponent","setTokenId","dna","setDna","attr","setAttr","useMemo","attributes","rel","href","textDecoration","map","item","trait_type","NftDataContainer","NftDataSeperation","GradientBack","MyNftData","NftDetailHeaderContainer","NftDetailPrevious","MyNftDetailHeader","collectionName","to","StyledHero","NftDetailContainer","MyNftsDeatail","myTokenId","useParams","setMyToken","setIsAIR","getTokenHashes","tmpMyTokens","fetchMyNfts","happyCowTokens","tokenIds","_","itm","push","airNftOwners","nft","ownerOf","Promise","all","owners","owner","idx","fetchItemsCreated","items","tokenIdLength","currentIndex","isSold","nftContract","myTokenHashes","result","tokenHash","Page"],"mappings":"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","file":"static/js/25.a0738e53.chunk.js","sourcesContent":["const airNFTs: string[] = [\n'275773',\n'275774',\n'275775',\n'275776',\n'275777',\n'275778',\n'275779',\n'275780',\n'275781',\n'275782',\n'275783',\n'275784',\n'275785',\n'275786',\n'275787',\n'275788',\n'275789',\n'275790',\n'275791',\n'275792',\n'275793',\n'275794',\n'275795',\n'275796',\n'275797',\n'275798',\n'275799',\n'275800',\n'275801',\n'275802',\n'275803',\n'275747',\n'275748',\n'275749',\n'275750',\n'275751',\n'275752',\n'275753',\n'275754',\n'275755',\n'275756',\n'275762',\n'275763',\n'275772',\n'275765',\n'275766',\n'275767',\n'275768',\n'275769',\n'275770',\n'275771',\n'275804',\n'275805',\n'275806',\n'275807',\n'275808',\n'275809',\n'275810',\n'275811',\n'275812',\n'275813',\n'275814',\n'275815',\n'275816',\n'275817',\n'275818',\n'275819',\n'275820',\n'275821',\n'275822',\n'275823',\n'275824',\n'275825',\n'275826',\n'275828',\n'275830',\n'275832',\n'275833',\n'275834',\n'275835',\n'275836',\n'275837',\n'275838',\n'275839',\n'275840',\n'275841',\n'275842',\n'275843',\n'275844',\n'275845',\n'275846',\n'275847',\n'275848',\n'275849',\n'275850',\n'275851',\n'275852',\n'275853',\n'275854',\n'275855'\n]\n\nexport default airNFTs\n","import React, { useState, useCallback, useEffect, useContext } from 'react'\nimport styled from 'styled-components'\nimport toast from 'react-hot-toast'\nimport { Button, Heading } from 'cashcow-uikit'\nimport Market from 'config/abi/Market.json'\nimport AirNfts from 'config/abi/AirNft.json'\nimport HappyCows from 'config/abi/HappyCows.json'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { fromWei, AbiItem, toBN, toWei } from 'web3-utils'\nimport Modal from 'react-modal'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport Web3 from 'web3'\nimport { getHappyCowAddress, getMarketAddress, getAirNftAddress } from 'utils/addressHelpers'\nimport { LoadingContext } from 'contexts/LoadingContext'\nimport useTheme from 'hooks/useTheme'\nimport { PINATA_BASE_URI } from 'config/constants/nfts'\nimport { getNumberSuffix } from 'utils/formatBalance'\n\nconst NftMetaDataContainer = styled.div`\n  display: flex;\n  padding: 16px 32px;\n  flex: 1;\n  flex-wrap: wrap;\n  align-items: inherit;\n  justify-content: center;\n`\nconst NftImageContainer = styled.div`\n  max-width: 332px;\n  max-height: 100%;\n  min-width: 240px;\n  min-height: 240px;\n  width: 46%;\n  border-radius: 16px;\n  overflow: hidden;\n  margin: 16px 32px 16px 0;\n  position: relative;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst NftImage = styled.div`\n  width: 100%;\n  padding-bottom: 100%;\n  height: 0;\n  background-repeat: no-repeat;\n  background-position: 50%;\n  background-size: auto 100%;\n`\n\nconst NftInfo = styled.div`\n  flex: 1;\n  min-width: 220px;\n  margin: 16px 0;\n  display: flex;\n  flex-direction: column;\n`\n\nconst NftTitleContainer = styled.div`\n  font-size: 28px;\n  font-weight: 600;\n  color: #431216;\n  word-break: break-word;\n`\n\nconst NftSalePriceContainer = styled.div`\n  margin-top: 20px;\n  box-shadow: 0 6px 12px 0 rgb(0 0 0 / 6%), 0 -1px 2px 0 rgb(0 0 0 / 2%);\n  border-radius: 16px;\n  display: flex;\n  height: 100%;\n`\n\nconst NftSalePrice = styled.div`\n  padding: 16px;\n  flex: 1;\n`\nconst NftSalePriceTitleContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n  color: #694f4e;\n`\n\nconst TokenSelectContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\nconst NftSalePriceDetail = styled.div`\n  font-size: 28px;\n  color: #431216;\n  font-weight: 700;\n  margin-top: 6px;\n  display: flex;\n  align-items: center;\n`\nconst BuyNowBtnContainer = styled.div`\n  margin-top: 24px;\n`\n\nconst ItemValueToken = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  column-gap: 8px;\n`\n\nconst InputTag = styled.input`\n  border: 1px solid #e8e8e8;\n  border-radius: 12px;\n  height: 44px;\n  line-height: 44px;\n  box-sizing: border-box;\n  font-size: 16px;\n  padding: 0 68px 0 16px;\n  display: flex;\n  outline: none;\n  color: #431216;\n  background: transparent;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  margin-right: 15px;\n  -moz-appearance: textfield;\n\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`\nconst customStyles = {}\n\nconst web3 = new Web3(Web3.givenProvider)\n\nconst happyCowsContract = new web3.eth.Contract(HappyCows.abi as AbiItem[], getHappyCowAddress())\nconst marketContract = new web3.eth.Contract(Market.abi as AbiItem[], getMarketAddress())\nconst airnftContract = new web3.eth.Contract(AirNfts.abi as AbiItem[], getAirNftAddress())\n\nexport interface NftDataLeftComponentInterface {\n  myToken?: any\n}\n\nconst MyNftDataLeftComponent = ({ myToken }: NftDataLeftComponentInterface) => {\n  const { isDark } = useTheme()\n  const { account } = useWallet()\n  // const [selectedToken, setSelectedToken] = useState('Milk');\n  const selectedToken = 'Milk'\n  const [image, setImage] = useState('')\n  const [salePrice, setSalePrice] = useState('')\n  const [tokenName, setTokenName] = useState('')\n  const [itemId, setItemId] = useState('0')\n  const [description, setDescription] = useState('')\n  const [priceNft, setPriceNft] = useState('')\n  const [flgList, setFlgList] = useState(false)\n  const [modalIsOpen, setIsOpen] = useState(false)\n  const [flgButtonState, setFlgButtonState] = useState(true)\n  const { setLoading } = useContext(LoadingContext)\n  const cakePriceUsd = usePriceCakeBusd()\n\n  // const milkTokenContract = new web3.eth.Contract(MilkToken.abi as AbiItem[], getMilkAddress());\n\n  const fetchNft = useCallback(async () => {\n    const marketItems = await marketContract.methods.fetchMarketItems().call({ from: account })\n    if (!myToken) return\n    for (let i = 0; i < marketItems.length; i++) {\n      if (marketItems[i].itemId === myToken.itemId) {\n        setSalePrice(fromWei(marketItems[i].price, 'ether'))\n        setFlgList(true)\n        break\n      }\n    }\n    setItemId(myToken.itemId)\n    const tmpTokenId = myToken.tokenId\n\n    if (!tmpTokenId) return\n    let nftHash = null\n    if (!myToken.isAIR) {\n      nftHash = await happyCowsContract.methods.tokenURI(toBN(tmpTokenId)).call({ from: account })\n    } else {\n      nftHash = await airnftContract.methods.tokenURI(toBN(tmpTokenId)).call({ from: account })\n    }\n    const res = await fetch(nftHash)\n    const json = await res.json()\n    setTokenName(json.name)\n    setDescription(json.description)\n\n    let imageUrl = json.image\n    if (!myToken.isAIR) {\n      imageUrl = imageUrl.slice(7)\n      setImage(`${PINATA_BASE_URI}${imageUrl}`)\n    } else {\n      setImage('https://ipfs.io/ipfs/QmenL2FwtXn8vpbNWjQBkH4Fbb34E4w4GyMa6piRGgngh2')\n    }\n  }, [account, myToken])\n\n  useEffect(() => {\n    fetchNft()\n  }, [fetchNft])\n\n  const listNFTHandler = async () => {\n    if (!myToken) return\n\n    setFlgButtonState(false)\n    setLoading(true)\n    closeModal()\n\n    if (myToken.isAIR) {\n      const approvedAddress = await airnftContract.methods.getApproved(toBN(myToken.tokenId)).call()\n      if (approvedAddress !== getMarketAddress()) {\n        await airnftContract.methods.approve(getMarketAddress(), toBN(myToken.tokenId)).send({ from: account })\n        toast.success('Approved AirtNFT token.')\n      }\n    } else {\n      const isApproved = await happyCowsContract.methods.isApprovedForAll(account, getMarketAddress()).call()\n      if (!isApproved) {\n        await happyCowsContract.methods.setApprovalForAll(getMarketAddress(), true).send({ from: account })\n        toast.success('Approved Milk token.')\n      }\n    }\n\n    try {\n      await marketContract.methods\n        .createMarketItem(\n          myToken.isAIR ? getAirNftAddress() : getHappyCowAddress(),\n          toBN(myToken.tokenId),\n          toWei(priceNft, 'ether'),\n        )\n        .send({ from: account })\n        .on('transactionHash', function () {\n          toast.success('Transaction submitted.')\n        })\n        .on('receipt', function (receipt) {\n          const returnItemId = receipt.events.MarketItemCreated.returnValues.itemId\n          setItemId(returnItemId)\n          setSalePrice(priceNft)\n          setFlgList(true)\n          toast.success('Successfully listed NFT.')\n        })\n    } catch (e) {\n      console.log(e)\n      const { message } = e as Error\n      toast.error(message)\n    }\n    setFlgButtonState(true)\n    setLoading(false)\n  }\n\n  const unlistNFTHandler = async () => {\n    setFlgButtonState(false)\n    setLoading(true)\n\n    try {\n      await marketContract.methods\n        .unlistMarketItem(myToken.isAIR ? getAirNftAddress() : getHappyCowAddress(), itemId)\n        .send({ from: account })\n        .on('transactionHash', function () {\n          toast.success('Transaction submitted.')\n        })\n        .on('receipt', function () {\n          setFlgList(false)\n          toast.success('Successfully unlisted NFT.')\n        })\n    } catch (e) {\n      const { message } = e as Error\n      toast.error(message)\n    }\n    setFlgButtonState(true)\n    setLoading(false)\n  }\n\n  const openModal = () => {\n    setIsOpen(true)\n  }\n\n  const afterOpenModal = () => {\n    // references are now sync'd and can be accessed.\n  }\n\n  const closeModal = () => {\n    setIsOpen(false)\n  }\n\n  const handleChange = (e) => {\n    const { value, maxLength } = e.target\n    const message = value.slice(0, maxLength)\n    setPriceNft(message)\n  }\n\n  return (\n    <NftMetaDataContainer>\n      <NftImageContainer>\n        <NftImage style={{ backgroundImage: `url(${image})` }} />\n        <div style={{ paddingTop: '10px', fontSize: '17px', color: isDark ? 'white' : 'rgb(105, 79, 78)' }}>\n          {description}\n        </div>\n      </NftImageContainer>\n      <NftInfo>\n        <NftTitleContainer style={{ color: isDark ? 'white' : '' }}>{tokenName}</NftTitleContainer>\n        <NftSalePriceContainer\n          style={{\n            background: isDark ? '#16151a' : '',\n            boxShadow: isDark ? '0 6px 12px 0 rgb(255 255 255 / 6%), 0 -1px 2px 0 rgb(255 255 255 / 2%)' : '',\n          }}\n        >\n          {flgList ? (\n            <NftSalePrice>\n              <NftSalePriceTitleContainer style={{ color: isDark ? 'white' : '' }}>\n                Sale Price\n                <TokenSelectContainer>\n                  <div style={{ color: isDark ? 'white' : '#00d86c', fontWeight: 700 }}>\n                    <div style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\n                      <img\n                        style={{ width: '16px', height: '16px', marginRight: '5px', transform: 'translateY(-.5px)' }}\n                        alt=\"Milk Token Icon\"\n                        src=\"/images/farms/milk.png\"\n                      />\n                      Milk\n                    </div>\n                  </div>\n                </TokenSelectContainer>\n              </NftSalePriceTitleContainer>\n              <NftSalePriceDetail style={{ color: isDark ? 'white' : '' }}>\n                <img\n                  style={{ width: '24px', height: '24px', marginRight: '8px' }}\n                  src={selectedToken === 'Milk' ? '/images/farms/milk.png' : '/images/tokens/darkBNB.png'}\n                  alt=\"Token Icon\"\n                />\n                {getNumberSuffix(salePrice)}\n                <span\n                  style={{ fontSize: '14px', color: isDark ? 'white' : '#694f4e', fontWeight: 400, marginLeft: '4px' }}\n                >\n                  ≈ ${getNumberSuffix(Math.round(cakePriceUsd.toNumber() * parseInt(salePrice) * 100) / 100)}\n                </span>\n              </NftSalePriceDetail>\n            </NftSalePrice>\n          ) : (\n            <div\n              style={{\n                fontSize: '17px',\n                margin: 'auto',\n                padding: '22px',\n                color: isDark ? 'white' : 'rgb(105, 79, 78)',\n              }}\n            >\n              Not Listed Yet.\t\t\t  \n            </div>\n          )}\n        </NftSalePriceContainer>\n\n         <BuyNowBtnContainer>\n           <div>\n             {account && flgButtonState ? ( \n               <Button style={{ width: '100%' }} onClick={flgList ? unlistNFTHandler : openModal}> \n                {flgList ? 'Unlist NFT' : 'List NFT'} \n              </Button> \n            ) : ( \n              <Button style={{ width: '100%' }} disabled> \n                {flgList ? 'Unlist NFT' : 'List NFT'} \n              </Button> \n            )} \n         </div> \n       </BuyNowBtnContainer>\n      </NftInfo>\n      <Modal\n        isOpen={modalIsOpen}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        style={{\n          content: {\n            top: '50%',\n            left: '50%',\n            right: 'auto',\n            bottom: 'auto',\n            marginRight: '-50%',\n            transform: 'translate(-50%, -50%)',\n            width: '80%',\n            maxWidth: '500px',\n            minWidth: '400px',\n            borderRadius: '15px',\n          },\n        }}\n        contentLabel=\"Example Modal\"\n      >\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Heading as=\"h1\" size=\"no\" color=\"primary\" mb=\"20px\">\n            List NFT\n          </Heading>\n          <div\n            style={{ cursor: 'pointer' }}\n            onClick={() => closeModal()}\n            onKeyDown={closeModal}\n            role=\"button\"\n            tabIndex={0}\n          >\n            <img src=\"/images/close.png\" style={{ width: '25px', height: '25px' }} alt=\"close\" />\n          </div>\n        </div>\n\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <div style={{ display: 'flex', width: '70%' }}>\n            <InputTag\n              type=\"number\"\n              maxLength={18}\n              placeholder=\"Price of NFT\"\n              value={priceNft}\n              onChange={handleChange}\n            />\n            <ItemValueToken>\n              <img\n                src=\"/images/farms/milk.png\"\n                alt=\"token\"\n                style={{ width: '26px', height: '26px', marginRight: '4px' }}\n              />\n              MILK\n            </ItemValueToken>\n          </div>\n          <Button onClick={listNFTHandler}>List NFT</Button>\n        </div>\n      </Modal>\n    </NftMetaDataContainer>\n  )\n}\n\nexport default MyNftDataLeftComponent\n","import React, { useEffect, useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport HappyCows from 'config/abi/HappyCows.json'\nimport AirNfts from 'config/abi/AirNft.json'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { AbiItem, toBN } from 'web3-utils'\nimport Web3 from 'web3'\nimport { getHappyCowAddress, getAirNftAddress } from 'utils/addressHelpers'\nimport useTheme from 'hooks/useTheme'\n\nconst NftOnChainDataContainer = styled.div`\n  display: flex;\n  min-width: 280px;\n  max-width: 330px;\n  width: 30%;\n  padding: 32px;\n  box-sizing: border-box;\n  flex-direction: column;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    max-width: unset;\n  }\n`\n\nconst NftOnChainDataTitle = styled.div`\n  font-size: 20px;\n  font-weight: 700;\n  color: #431216;\n`\n\nconst NftOnChainDetailContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 10px 0;\n`\n\nconst NftOnChainDetail = styled.div`\n  padding: 18px 0 0;\n  font-size: 14px;\n`\n\nconst NftOnChainEachData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n`\n\nconst NftOnChainLinkStyle = styled.div`\n  color: #431216;\n  font-weight: 500;\n  max-width: 50%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nconst web3 = new Web3(Web3.givenProvider)\n\nexport interface MyNftDataRightComponentInterface {\n  myToken?: any\n}\n\nconst MyNftDataRightComponent = ({ myToken }: MyNftDataRightComponentInterface) => {\n  const { isDark } = useTheme()\n  const { account } = useWallet()\n  const [tokenId, setTokenId] = useState('')\n  const [dna, setDna] = useState('')\n  const [attr, setAttr] = useState([])\n\n  const happyCowsContract = useMemo(() => {\n    return new web3.eth.Contract(HappyCows.abi as AbiItem[], getHappyCowAddress())\n  }, [])\n\n  const airnftContract = useMemo(() => {\n    return new web3.eth.Contract(AirNfts.abi as AbiItem[], getAirNftAddress())\n  }, [])\n\n  const fetchNft = useCallback(async () => {\n    if (!myToken) return\n    const tmpTokenId = myToken.tokenId\n\n    if (!tmpTokenId) return\n\n    let nftHash = null\n    if (!myToken.isAIR) {\n      nftHash = await happyCowsContract.methods.tokenURI(toBN(tmpTokenId)).call({ from: account })\n    } else {\n      nftHash = await airnftContract.methods.tokenURI(toBN(tmpTokenId)).call({ from: account })\n    }\n    const res = await fetch(nftHash)\n    const json = await res.json()\n    setDna(json.dna)\n    setAttr(json.attributes)\n    setTokenId(myToken.tokenId)\n  }, [myToken, account, happyCowsContract, airnftContract])\n\n  useEffect(() => {\n    fetchNft()\n  }, [myToken, fetchNft])\n  return (\n    <NftOnChainDataContainer>\n      <NftOnChainDataTitle style={{ color: isDark ? 'white' : '' }}>On-chain data</NftOnChainDataTitle>\n      <NftOnChainDetailContainer>\n        <NftOnChainDetail>\n          <NftOnChainEachData>\n            <div style={{ color: isDark ? 'white' : '#694f4e' }}>Owner</div>\n            <NftOnChainLinkStyle>\n              <a\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                href={`https://bscscan.com/address/${account}`}\n                style={{ textDecoration: 'underline', color: isDark ? 'white' : '#431216' }}\n              >\n                {account}\n              </a>\n            </NftOnChainLinkStyle>\n          </NftOnChainEachData>\n          <NftOnChainEachData>\n            <div style={{ color: isDark ? 'white' : '#694f4e' }}>Contract Address</div>\n            <NftOnChainLinkStyle>\n              <a\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                href={`https://bscscan.com/address/${myToken.isAIR ? getAirNftAddress() : getHappyCowAddress()}`}\n                style={{ textDecoration: 'underline', color: isDark ? 'white' : '#431216' }}\n              >\n                {myToken.isAIR ? getAirNftAddress() : getHappyCowAddress()}\n              </a>\n            </NftOnChainLinkStyle>\n          </NftOnChainEachData>\n          <NftOnChainEachData>\n            <div style={{ color: isDark ? 'white' : '#694f4e' }}>Token ID</div>\n            <NftOnChainLinkStyle style={{ color: isDark ? 'white' : '' }}>{`# ${tokenId}`}</NftOnChainLinkStyle>\n          </NftOnChainEachData>\n          {/* <NftOnChainEachData>\n                        <div style={{color: isDark ? 'white' : '#694f4e'}}>Asset Protocol</div>\n                        <NftOnChainLinkStyle style={{color: isDark ? 'white' : ''}}>\n                            ERC721\n                        </NftOnChainLinkStyle>\n                    </NftOnChainEachData>\n                    <NftOnChainEachData>\n                        <div style={{color: isDark ? 'white' : '#694f4e'}}>Asset public chain</div>\n                        <NftOnChainLinkStyle style={{color: isDark ? 'white' : ''}}>\n                            BSC\n                        </NftOnChainLinkStyle>\n                    </NftOnChainEachData> */}\n          {dna && (\n            <NftOnChainEachData>\n              <div style={{ color: isDark ? 'white' : '#694f4e' }}>DNA</div>\n              <NftOnChainLinkStyle style={{ color: isDark ? 'white' : '' }}>{dna}</NftOnChainLinkStyle>\n            </NftOnChainEachData>\n          )}\n          {attr.map((item) => (\n            <NftOnChainEachData key={item.trait_type}>\n              <div style={{ color: isDark ? 'white' : '#694f4e' }}>{item.trait_type}</div>\n              <NftOnChainLinkStyle style={{ color: isDark ? 'white' : '' }}>{item.value}</NftOnChainLinkStyle>\n            </NftOnChainEachData>\n          ))}\n        </NftOnChainDetail>\n      </NftOnChainDetailContainer>\n    </NftOnChainDataContainer>\n  )\n}\n\nexport default MyNftDataRightComponent\n","import React from 'react'\nimport styled from 'styled-components'\nimport useTheme from 'hooks/useTheme'\nimport MyNftDataLeftComponent from './MyNftDataLeftComponent'\nimport MyNftDataRightComponent from './MyNftDataRightComponent'\n\nconst NftDataContainer = styled.div`\n    position: relative;\n    display: flex;\n    background: #fff;\n    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 3%), 0 4px 6px -2px rgb(0 0 0 / 1%);\n    border-radius: 32px;\n\n    @media (max-width: 768px) {\n        flex-direction: column;\n    }\n`\n\nconst NftDataSeperation = styled.div`\n    min-width: 2px;\n    position: relative;\n    background-image: url(../images/line.jpg);\n    background-repeat: repeat-y;\n    background-size: contain;\n    background-position: 50%;\n`\nconst GradientBack = styled.div`\n    background: linear-gradient( 45deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100% );\n    background-size: 300% 300%;\n    animation: ilqnTz 2s linear infinite;\n    filter: blur(10px);\n    position: absolute;\n    top:-2px;\n    right:-2px;\n    bottom:-2px;\n    left:-2px;\n    z-index: -1;\n`\n\nexport interface NftDataInterface {\n    myToken?: any;\n  }\n\nconst MyNftData = ({myToken}: NftDataInterface) => {\n    const { isDark } = useTheme()\n    return (\n        <NftDataContainer style={{background: isDark ? \"#27262c\" : ''}}>\n            <GradientBack />\n            <MyNftDataLeftComponent myToken={myToken}/>\n            <NftDataSeperation />\n            <MyNftDataRightComponent myToken={myToken} />\n        </NftDataContainer>\n    )\n}\n\nexport default MyNftData\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport useTheme from 'hooks/useTheme'\n\nconst NftDetailHeaderContainer = styled.div`\n    font-size: 15px;\n    color: #694f4e;\n`\nconst NftDetailPrevious = styled.div`\n    display: inline;\n`\nexport interface NftDetailHeaderInterface {\n    collectionName?: string;\n}\n\nconst MyNftDetailHeader = ({collectionName} : NftDetailHeaderInterface) => {\n    const { isDark } = useTheme()\n    return (\n        <NftDetailHeaderContainer>\n            <NftDetailPrevious>\n                <Link to=\"/myNFTs\" style={{color: isDark ? 'white' : '#431216'}}>\n                    My NFTs\n                </Link>\n                <span style={{padding: '0 8px', color: isDark ? 'white' : ''}}>{'>'}</span>\n            </NftDetailPrevious>\n            <NftDetailPrevious>\n                <span style={{fontSize: '15px', color: isDark ? 'white' : '#694f4e'}}>\n                    {collectionName}\n                </span>\n            </NftDetailPrevious>\n        </NftDetailHeaderContainer>\n    )\n}\n\nexport default MyNftDetailHeader\n","import _ from 'lodash'\nimport React, { useEffect, useState, useMemo, useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport AirNfts from 'config/abi/AirNft.json'\nimport HappyCows from 'config/abi/HappyCows.json'\nimport Market from 'config/abi/Market.json'\nimport Web3 from 'web3'\nimport { AbiItem } from 'web3-utils'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport Page from 'components/layout/Page'\nimport { Heading } from 'cashcow-uikit'\nimport { getHappyCowAddress, getMarketAddress, getAirNftAddress } from 'utils/addressHelpers'\nimport airNFTs from 'config/constants/airnfts'\nimport MyNftData from './components/MyNftData'\nimport MyNftDetailHeader from './components/MyNftDetailHeader'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid #e8e8e8;\n  margin-bottom: 20px;\n`\nconst NftDetailContainer = styled.div`\n  margin-top: 32px;\n`\n\nconst web3 = new Web3(Web3.givenProvider)\n\ntype boxParam = {\n  myTokenId: string\n}\n\nconst MyNftsDeatail = () => {\n  const { myTokenId } = useParams<boxParam>()\n  const { account } = useWallet()\n  const [myToken, setMyToken] = useState({})\n  const [isAIR, setIsAIR] = useState(false)\n\n  const happyCowsContract = useMemo(() => {\n    return new web3.eth.Contract(HappyCows.abi as AbiItem[], getHappyCowAddress())\n  }, [])\n\n  const marketContract = useMemo(() => {\n    return new web3.eth.Contract(Market.abi as AbiItem[], getMarketAddress())\n  }, [])\n\n  const airnftContract = useMemo(() => {\n    return new web3.eth.Contract(AirNfts.abi as AbiItem[], getAirNftAddress())\n  }, [])\n\n  const getTokenHashes = useCallback(async () => {\n    const tmpMyTokens = []\n    const happyCowTokens = await happyCowsContract.methods.fetchMyNfts().call({ from: account })\n    const tokenIds = []\n    _.map(happyCowTokens, (itm) => {\n      tokenIds.push({ tokenId: itm, isAIR: false })\n    })\n\n    // retrieve my nft from air\n    const airNftOwners = []\n    _.map(airNFTs, (nft) => {\n      airNftOwners.push(airnftContract.methods.ownerOf(nft).call())\n    })\n    const owners = await Promise.all(airNftOwners)\n    _.map(owners, (owner, idx) => {\n      if (owner !== account) return\n\n      tokenIds.push({ tokenId: airNFTs[idx], isAIR: true })\n    })\n    const items = await marketContract.methods.fetchItemsCreated().call({ from: account })\n    const tokenIdLength = tokenIds.length\n    for (let i = 0; i < tokenIdLength; i++) {\n      if (!tmpMyTokens[i]) tmpMyTokens[i] = {}\n      tmpMyTokens[i].itemId = '0'\n    }\n    let currentIndex = 0\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].isSold === false) {\n        tokenIds.push({ tokenId: items[i].tokenId, isAIR: items[i].nftContract === getAirNftAddress() })\n        if (!tmpMyTokens[currentIndex + tokenIdLength]) tmpMyTokens[currentIndex + tokenIdLength] = {}\n        tmpMyTokens[currentIndex + tokenIdLength].itemId = items[i].itemId\n        currentIndex++\n      }\n    }\n\n    const myTokenHashes = []\n    for (let i = 0; i < tokenIds.length; i++) {\n      if (!tokenIds[i].isAIR) myTokenHashes.push(happyCowsContract.methods.tokenURI(tokenIds[i].tokenId).call())\n      else myTokenHashes.push(airnftContract.methods.tokenURI(tokenIds[i].tokenId).call())\n    }\n    const result = await Promise.all(myTokenHashes)\n\n    for (let i = 0; i < tokenIds.length; i++) {\n      if (!tmpMyTokens[i]) tmpMyTokens[i] = {}\n      tmpMyTokens[i].tokenId = tokenIds[i].tokenId\n      tmpMyTokens[i].tokenHash = result[i]\n      tmpMyTokens[i].isAIR = tokenIds[i].isAIR\n    }\n\n    setIsAIR(tmpMyTokens[myTokenId].isAIR)\n    setMyToken(tmpMyTokens[myTokenId])\n  }, [account, happyCowsContract, marketContract, airnftContract, myTokenId])\n  useEffect(() => {\n    getTokenHashes()\n  }, [getTokenHashes])\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" size=\"lg\" color=\"text\" mb=\"20px\">\n          My NFT Detail\n        </Heading>\n      </StyledHero>\n      <MyNftDetailHeader collectionName={isAIR ? 'Air NFT' : 'HappyCows'} />\n      <NftDetailContainer>\n        <MyNftData myToken={myToken} />\n      </NftDetailContainer>\n    </Page>\n  )\n}\n\nexport default MyNftsDeatail\n"],"sourceRoot":""}
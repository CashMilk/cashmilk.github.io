{"version":3,"sources":["config/constants/nfts.ts","config/index.ts","hooks/useBlock.ts","hooks/useTokenBalance.ts","utils/getTimePeriods.ts","views/Nft/components/HowItWorks.tsx","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","views/Nft/utils/contracts.ts","views/Nft/contexts/NftProvider.tsx","views/Nft/components/ClaimNftModal.tsx","views/Nft/components/BurnNftModal.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","utils/formatTimePeriod.ts","views/Nft/components/NftProgress.tsx","views/Nft/components/NftProgressSimple.tsx","views/Nft/components/SecondaryCard.tsx","views/Nft/components/CardContent.tsx","views/Nft/components/NoNftsToClaimCard.tsx","views/Nft/components/YouWonCard.tsx","views/Nft/components/NftInWalletCard.tsx","views/Nft/components/StatusCard.tsx","views/Nft/components/NftInfo.tsx","views/Nft/index.tsx"],"names":["RABBIT_MINTING_FARM_ADDRESS","PANCAKE_RABBITS_ADDRESS","PINATA_BASE_URI","PINATA_METADATA_CID","Nfts","name","description","originalImage","previewImage","blurImage","sortOrder","bunnyId","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","BSC_BLOCK_TIME","useBlock","useContext","BlockContext","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","fetchBalance","balanceOf","bal","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","timeLeft","years","months","days","hours","minutes","Math","floor","StyledHowItWorks","styled","div","theme","colors","textSubtle","Section","Icon","Text","UIKitText","Row","HowItWorks","TranslateString","useI18n","Container","id","color","size","mb","as","href","target","rel","InfoRow","borderColor","StyledImage","img","Image","src","alt","originalLink","getPancakeRabbitContract","contractOptions","pancakeRabbitsAbi","pancakeRabbits","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","canClaim","hasClaimed","countBunniesBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","bunnyMap","state","setState","currentBlock","fetchContractData","multicall","rabbitmintingfarm","address","startBlockNumberArr","endBlockNumberArr","countBunniesBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","prevState","toNumber","console","error","pancakeRabbitsContract","params","canClaimArr","hasClaimedArr","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","parseInt","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","ModalContent","Actions","ClaimNftModal","nft","onSuccess","onDismiss","isloading","setisloading","setError","rabbitMintingContract","useRabbitMintingFarm","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","fullWidth","variant","onClick","disabled","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","bunnyCount","bunnyBurnCount","walletCanClaim","isSupplyAvailable","walletOwnsNft","length","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","formatTimePeriod","periods","excludePeriods","textArr","Object","keys","forEach","period","includes","substr","join","TimeLeft","Heading","Link","UIKitLink","Message","ProgressWrap","NftProgress","secondsRemaining","progress","primaryStep","NftProgressSimple","SecondaryCard","textDisabled","Content","StyledCardContent","CardContent","imgSrc","NoNftsToClaimCard","YouWonCard","NftInWalletCard","StatusCard","UnlockButton","StyledNtfInfo","NftInfo","StyledHero","Nft","Page"],"mappings":"6HAEA,wIAAO,IAAMA,EAA8B,6CAC9BC,EAA0B,6CAC1BC,EAAkB,gCAClBC,EAAsB,8DAE7BC,EAAc,CAClB,CACEC,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,+DACbM,aAAc,UACdC,UAAW,oBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,kEACbM,aAAc,UACdC,UAAW,uBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,+DACbM,aAAc,UACdC,UAAW,oBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEX,CACEN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEV,CACCN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEV,CACCN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,GAEV,CACCN,KAAM,eACNC,YAAa,oDACbC,cAAc,GAAD,OAAKL,EAAL,8DACbM,aAAc,UACdC,UAAW,mBACXC,UAAW,IACXC,QAAS,IAKEP,O,iCC5Ff,iFAEAQ,IAAUC,OAAO,CACfC,eAAgB,IAChBC,eAAgB,KAGY,IAAIH,IAAU,GAArC,IACMI,EAAkB,IAAIJ,IAAU,SAChCK,EAAiB,G,iCCT9B,oBAQeC,IALE,WAEf,OADsBC,qBAAWC,O,oNCyBtBC,EAAiB,WAC5B,IAAQC,EAAgBC,cAAhBD,YACR,EAAsCE,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KAYA,OAVAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQC,EAAeC,YAAYC,EAASC,eAD5C,SAEuBH,EAAaI,QAAQR,cAAcS,OAF1D,OAEQC,EAFR,OAGET,EAAe,IAAId,IAAUuB,IAH/B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACd,IAEGG,GAGIY,EAAmB,SAACC,GAC/B,MAA8Bd,mBAAS,IAAIZ,IAAU,IAArD,mBAAO2B,EAAP,KAAgBC,EAAhB,KACQlB,EAAgBC,cAAhBD,YAYR,OAVAK,qBAAU,WACR,IAAMc,EAAY,uCAAG,8BAAAb,EAAA,6DACbC,EAAeC,YAAYC,EAASC,eADvB,SAEDH,EAAaI,QAAQS,UAAU,8CAA8CR,OAF5E,OAEbS,EAFa,OAGnBH,EAAW,IAAI5B,IAAU+B,IAHN,2CAAH,qDAMlBF,MACC,CAACH,EAAchB,IAEXiB,GAGMK,IArDS,SAACN,GACvB,MAA8Bd,mBAAS,IAAIZ,IAAU,IAArD,mBAAO2B,EAAP,KAAgBC,EAAhB,KACA,EAAuEK,cAA/DC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,SACTC,EAAgBzB,cAAhByB,YAaR,OAXArB,qBAAU,WACR,IAAMc,EAAY,uCAAG,4BAAAb,EAAA,sEACDqB,YAAgBF,EAAUT,EAAcQ,GADvC,OACbI,EADa,OAEnBV,EAAW,IAAI5B,IAAUsC,IAFN,2CAAH,qDAKdJ,GAAWC,GACbN,MAED,CAACK,EAASC,EAAUT,EAAcU,IAE9BT,I,iCC1BT,IACMY,EAAkB,KAClBC,EAAiB,MACjBC,EAAmB,QACnBC,EAAkB,SAgDTC,IAzCQ,SAACC,GACtB,IAAIC,EAAQD,EACNE,EAAW,CACfC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTP,QAAS,GA8BX,OA3BIC,GAASH,IACXI,EAASC,MAAQK,KAAKC,MAAMR,EAAQH,GACpCG,GAASC,EAASC,MAAQL,GAGxBG,GAASJ,IACXK,EAASE,OAASI,KAAKC,MAAMR,EAAQJ,GACrCI,GAASC,EAASE,OAASP,GAGzBI,GAASL,IACXM,EAASG,KAAOG,KAAKC,MAAMR,EAAQL,GACnCK,GAASC,EAASG,KAAOT,GAGvBK,GAASN,IACXO,EAASI,MAAQE,KAAKC,MAAMR,EAAQN,GACpCM,GAASC,EAASI,MAAQX,GAGxBM,GA1CoB,KA2CtBC,EAASK,QAAUC,KAAKC,MAAMR,EA3CR,IA4CtBA,GA5CsB,GA4CbC,EAASK,SAGpBL,EAASF,QAAUC,EAEZC,I,8KC1CHQ,EAAmBC,IAAOC,IAAV,8EACI,qBAAGC,MAAkBC,OAAOC,cAIhDC,EAAUL,IAAOC,IAAV,oDAIPK,EAAON,IAAOC,IAAV,mDAIJM,EAAOP,YAAOQ,IAAPR,CAAH,2DAKJS,EAAMT,IAAOC,IAAV,6FAyEMS,EAnEI,WACjB,IAAMC,EAAkBC,cAExB,OACE,cAACC,EAAA,EAAD,UACE,eAACd,EAAD,WACE,eAACM,EAAD,WACE,cAAC,IAAD,CAASS,GAAG,eAAeC,MAAM,YAAYC,KAAK,KAAKC,GAAG,OAA1D,SACGN,EAAgB,IAAK,kBAExB,eAACF,EAAD,WACE,cAAC,EAAD,UACE,cAAC,IAAD,MAEF,cAACF,EAAD,UACGI,EACC,IACA,mFAIN,eAACF,EAAD,WACE,cAAC,EAAD,UACE,cAAC,IAAD,MAEF,cAACF,EAAD,UACGI,EAAgB,IAAK,6DAG1B,eAACF,EAAD,WACE,cAAC,EAAD,UACE,cAAC,IAAD,MAEF,cAACF,EAAD,UACGI,EACC,IACA,uGAKR,eAACN,EAAD,WACE,cAAC,IAAD,CAASU,MAAM,YAAYC,KAAK,KAAKC,GAAG,OAAxC,SACGN,EAAgB,IAAK,yBAExB,eAACF,EAAD,WACE,cAAC,EAAD,UACE,cAAC,IAAD,MAEF,cAACF,EAAD,UAAOI,EAAgB,IAAK,8DAGhC,8BACE,cAAC,IAAD,CACEO,GAAG,IACHC,KAAK,8EACLC,OAAO,SACPC,IAAI,sBAJN,SAMGV,EAAgB,IAAK,qC,wEClFnBW,GANCtB,IAAOC,IAAV,yGCQPY,GAAYb,IAAOC,IAAV,2IACO,qBAAGC,MAAkBC,OAAOoB,eAO5CC,GAAcxB,IAAOyB,IAAV,oMA2BFC,GAhBqB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,aACzCxF,EAAe,cAACmF,GAAD,CAAaG,IAAKA,EAAKC,IAAKA,IAEjD,OACE,cAAC,GAAD,UACGC,EACC,mBAAGV,KAAMU,EAAcT,OAAO,SAASC,IAAI,sBAA3C,SACGhF,IAGHA,K,2ECzBKyF,GAA2B,SAACC,GACvC,IAAMC,EAAqBC,GAC3B,OAAOtE,aAAYqE,EAAmBlG,IAAyBiG,ICoBpDG,GAAqBC,wBAA8B,MAmKjDC,GAjKiC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3CC,EAAYC,kBAAO,GACzB,EAA0BlF,mBAAgB,CACxCmF,eAAe,EACfC,UAAU,EACVC,YAAY,EACZC,kBAAmB,EACnBC,iBAAkB,EAClBC,eAAgB,EAChBC,uBAAwB,EACxBC,yBAA0B,EAC1BxE,UAAW,EACXyE,SAAU,KAVZ,oBAAOC,EAAP,KAAcC,EAAd,KAYQvE,EAAYD,eAAZC,QACFwE,EAAepG,eAEbyF,EAAkBS,EAAlBT,cAGRhF,qBAAU,WACR,IAAM4F,EAAiB,yCAAG,6DAAA3F,EAAA,+EAQZ4F,aAAUC,GAAmB,CACrC,CAAEC,QAAS1H,IAA6BK,KAAM,oBAC9C,CAAEqH,QAAS1H,IAA6BK,KAAM,kBAC9C,CAAEqH,QAAS1H,IAA6BK,KAAM,qBAC9C,CAAEqH,QAAS1H,IAA6BK,KAAM,0BAC9C,CAAEqH,QAAS1H,IAA6BK,KAAM,8BAb1B,oCAGpBsH,EAHoB,KAIpBC,EAJoB,KAKpBC,EALoB,KAMpBC,EANoB,KAOpBC,EAPoB,oBAiBkBJ,EAjBlB,GAiBfZ,EAjBe,oBAkBgBa,EAlBhB,GAkBfZ,EAlBe,oBAmBmBa,EAnBnB,GAmBff,EAnBe,oBAoBwBgB,EApBxB,GAoBfb,EApBe,oBAqB0Bc,EArB1B,GAqBfb,EArBe,KAuBtBG,GAAS,SAACW,GAAD,mBAAC,eACLA,GADI,IAEPrB,eAAe,EACfG,kBAAmBA,EAAkBmB,WACrClB,iBAAkBA,EAAiBkB,WACnCjB,eAAgBA,EAAeiB,WAC/Bf,yBAA0BA,EAAyBe,WACnDhB,uBAAwBA,EAAuBgB,gBA9B3B,kDAiCtBC,QAAQC,MAAM,mBAAd,MAjCsB,0DAAH,qDAqCvBZ,MACC,CAACZ,EAAeU,IAGnB1F,qBAAU,WACR,IAAM4F,EAAiB,yCAAG,yDAAA3F,EAAA,sEAEhBwG,EAAyBnC,KAFT,SAGqBuB,aAAUC,GAAmB,CACtE,CAAEC,QAAS1H,IAA6BK,KAAM,WAAYgI,OAAQ,CAACvF,IACnE,CAAE4E,QAAS1H,IAA6BK,KAAM,aAAcgI,OAAQ,CAACvF,MALjD,2CAGfwF,EAHe,KAGFC,EAHE,eAOEH,EAAuBnG,QAAQS,UAAUI,GAASZ,OAPpD,WAOhBQ,EAPgB,sBAQQ4F,EARR,GAQf1B,EARe,oBASU2B,EATV,GASf1B,EATe,KAWlBM,EAAqB,KAIrBzE,EAAY,GAfM,iBA6BpB,IAbM8F,EAhBc,iCAAA5G,EAAA,MAgBS,WAAO6G,GAAP,kBAAA7G,EAAA,+EAEHwG,EAAuBnG,QAAQyG,oBAAoB5F,EAAS2F,GAAOvG,OAFhE,cAEnByG,EAFmB,gBAGHP,EAAuBnG,QAAQ2G,WAAWD,GAASzG,OAHhD,cAGnBvB,EAHmB,yBAKlB,CAACkI,SAASlI,EAAS,IAAKkI,SAASF,EAAS,MALxB,2DAOlB,MAPkB,0DAhBT,sDA2BdG,EAAkB,GAEfC,EAAI,EAAGA,EAAIrG,EAAWqG,IAC7BD,EAAgBE,KAAKR,EAAqBO,IA9BxB,iBAiCgBE,QAAQC,IAAIJ,GAjC5B,QAiCdK,EAjCc,OAqCpBhC,EAAWgC,EAAsBC,QAAO,SAACC,EAAOC,GAC9C,IAAKA,EACH,OAAOD,EAGT,mBAA2BC,EAA3B,GAAO3I,EAAP,KAAgBgI,EAAhB,KAEA,OAAO,2BACFU,GADL,mBAEG1I,EAAU0I,EAAM1I,GAAN,uBAAqB0I,EAAM1I,IAA3B,CAAqCgI,IAAW,CAACA,OAE7D,IAhDiB,QAmDtBtB,GAAS,SAACW,GAAD,mBAAC,eACLA,GADI,IAEPrB,eAAe,EACfC,WACAC,aACAnE,YACAyE,gBAzDoB,kDA4DtBe,QAAQC,MAAM,mBAAd,MA5DsB,0DAAH,qDAgEnBrF,GACFyE,MAED,CAACZ,EAAe7D,EAASuE,IAE5B1F,qBAAU,WACR,OAAO,WACL8E,EAAU8C,SAAU,KAErB,CAAC9C,IAEJ,IAAM+C,EAAalC,GAAgBF,EAAMJ,eAgBzC,OACE,cAACX,GAAmBoD,SAApB,CAA6BC,MAAK,2BAAOtC,GAAP,IAAcoC,aAAYG,YAhB1C,SAAChJ,GAAD,OAAqByG,EAAMD,SAASxG,IAgBmBiJ,aAVtD,WAIfnD,EAAU8C,SACZlC,GAAS,SAACW,GAAD,mBAAC,eAAoBA,GAArB,IAAgCrB,eAAe,UAK1D,SACGH,K,uCC9KDqD,GAAQ1F,YAAOO,IAAPP,CAAH,iDAIL2F,GAAe3F,IAAOC,IAAV,oDAIZ2F,GAAU5F,IAAOC,IAAV,0GAoEE4F,GA9DqC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACrE,EAAkC3I,oBAAS,GAA3C,oBAAO4I,EAAP,KAAkBC,EAAlB,KACA,EAA0B7I,mBAAS,MAAnC,oBAAO2G,EAAP,KAAcmC,EAAd,KACMxF,EAAkBC,cAChBjC,EAAYD,eAAZC,QACFyH,EAAwBC,aAAqBxK,KAC7CyK,EAAc7H,aAAgBZ,gBAC9B0I,EAAeC,aAAiBF,GAEhCG,EAAa,yCAAG,uBAAAhJ,EAAA,+EAEZ2I,EAAsBtI,QACzB4I,QAAQZ,EAAItJ,SACZmK,KAAK,CAAEC,KAAMjI,IACbkI,GAAG,WAAW,WACbX,GAAa,MAEdW,GAAG,WAAW,WACbb,IACAD,OAEDc,GAAG,SAAS,WACX9C,QAAQC,MAAMA,GACdmC,EAAS,uBACTD,GAAa,MAfC,sDAkBlBnC,QAAQC,MAAM,sBAAd,MAlBkB,wDAAH,qDA4BnB,OANAxG,qBAAU,WACa,IAAjB+I,GACFJ,EAAS,iEAEV,CAACI,EAAcJ,IAGhB,eAAC,IAAD,CAAOW,MAAOnG,EAAgB,IAAK,aAAcqF,UAAWA,EAA5D,UACE,eAACL,GAAD,WACG3B,GACC,cAAC,IAAD,CAAMjD,MAAM,UAAUE,GAAG,MAAzB,SACG+C,IAGL,eAAC,GAAD,WACE,eAAC,IAAD,WAAOrD,EAAgB,IAAK,oBAA5B,OACA,cAAC+E,GAAD,wBAAeI,EAAI5J,KAAnB,iBAGJ,eAAC0J,GAAD,WACE,cAAC,IAAD,CAAQmB,WAAS,EAACC,QAAQ,YAAYC,QAASjB,EAA/C,SACGrF,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQoG,WAAS,EAACE,QAASR,EAAeS,UAAWvI,GAAWsH,GAAaM,GAAgB,EAA7F,SACG5F,EAAgB,IAAK,oBCvE1B+E,GAAQ1F,YAAOO,IAAPP,CAAH,iDAIL2F,GAAe3F,IAAOC,IAAV,oDAIZ2F,GAAU5F,IAAOC,IAAV,0GA+EEkH,GAzEmC,SAAC,GAA6C,IAA3CrB,EAA0C,EAA1CA,IAAKsB,EAAqC,EAArCA,SAAUrB,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAC7E,EAAkC3I,oBAAS,GAA3C,oBAAO4I,EAAP,KAAkBC,EAAlB,KACA,EAA0B7I,mBAAS,MAAnC,oBAAO2G,EAAP,KAAcmC,EAAd,KACA,EAAgC9I,oBAAS,GAAzC,oBAAOgK,EAAP,KAAiBC,EAAjB,KACM3G,EAAkBC,cAChBjC,EAAYD,eAAZC,QACFyH,EAAwBC,aAAqBxK,KAE7C4K,EAAa,yCAAG,+BAAAhJ,EAAA,qFAEA2J,EAFA,GAEX5C,EAFW,cAIZ4B,EAAsBtI,QACzByJ,QAAQ/C,GACRmC,KAAK,CAAEC,KAAMjI,IACbkI,GAAG,WAAW,WACbX,GAAa,MAEdW,GAAG,WAAW,WACbb,IACAD,OAEDc,GAAG,SAAS,WACX9C,QAAQC,MAAMA,GACdmC,EAAS,sBACTD,GAAa,MAjBC,sDAoBlBnC,QAAQC,MAAM,sBAAd,MApBkB,wDAAH,qDAwBnB,OACE,eAAC,IAAD,CAAO8C,MAAOnG,EAAgB,IAAK,gBAAiBqF,UAAWA,EAA/D,UACE,eAAC,GAAD,WACGhC,GACC,cAAC,IAAD,CAAMjD,MAAM,UAAUE,GAAG,MAAzB,SACG+C,IAGL,eAAC,GAAD,WACE,eAAC,IAAD,WAAOrD,EAAgB,IAAK,YAA5B,OACA,cAAC,GAAD,wBAAemF,EAAI5J,KAAnB,cAEF,eAAC,GAAD,WACE,eAAC,IAAD,WAAOyE,EAAgB,IAAK,oBAA5B,OACA,cAAC,GAAD,4BAGJ,eAAC,GAAD,WACE,cAAC,IAAD,CAAMI,MAAM,UAAZ,SACGJ,EAAgB,IAAK,qFAExB,cAAC,IAAD,CAAMI,MAAM,UAAZ,SAAuBJ,EAAgB,IAAK,uDAE9C,eAAC,GAAD,CAAc6G,MAAO,CAAEC,WAAY,SAAUC,QAAS,eAAtD,UACE,cAAC,IAAD,CAAUC,QAASN,EAAUO,MAAM,KAAKC,SAAU,kBAAMP,GAAaD,MACrE,cAAC,IAAD,CAAMS,GAAG,MAAMb,QAAS,kBAAMK,GAAaD,IAAWG,MAAO,CAAEO,OAAQ,WAAvE,SACGpH,EAAgB,IAAK,qBAG1B,eAAC,GAAD,WACE,cAAC,IAAD,CAAQoG,WAAS,EAACC,QAAQ,YAAYC,QAASjB,EAA/C,SACGrF,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQoG,WAAS,EAACE,QAASR,EAAeS,UAAWvI,GAAWsH,IAAcoB,EAA9E,SACG1G,EAAgB,IAAK,oB,qBC/E1B+E,GAAQ1F,YAAOO,IAAPP,CAAH,iDAIL2F,GAAe3F,IAAOC,IAAV,oDAIZ2F,GAAU5F,IAAOC,IAAV,0GAMP+H,GAAQhI,IAAOiI,MAAV,0GACA,qBAAG/H,MAAkBC,OAAO+H,QAmFxBC,GA7E2C,SAAC,GAA6C,IAA3CrC,EAA0C,EAA1CA,IAAKsB,EAAqC,EAArCA,SAAUrB,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACrF,EAAkC3I,oBAAS,GAA3C,oBAAO4I,EAAP,KAAkBC,EAAlB,KACA,EAA0B7I,mBAAS,IAAnC,oBAAOkI,EAAP,KAAc6C,EAAd,KACA,EAA0B/K,mBAAS,MAAnC,oBAAO2G,EAAP,KAAcmC,EAAd,KACMxF,EAAkBC,cAChBjC,EAAYD,eAAZC,QACFsF,EAAyBoE,aAAkBvM,KAE3C2K,EAAa,yCAAG,uBAAAhJ,EAAA,kEAEK6K,KAAKC,MAAMC,UAAUjD,GAF1B,gBAKhBY,EAASxF,EAAgB,IAAK,wCALd,sCAOVsD,EAAuBnG,QAC1B2K,aAAa9J,EAAS4G,EAAO6B,EAAS,IACtCT,KAAK,CAAEC,KAAMjI,IACbkI,GAAG,WAAW,WACbX,GAAa,MAEdW,GAAG,WAAW,WACbb,IACAD,OAEDc,GAAG,SAAS,WACX9C,QAAQC,MAAMA,GACdmC,EAAS,0BACTD,GAAa,MApBD,yDAwBlBnC,QAAQC,MAAM,0BAAd,MAxBkB,0DAAH,qDAiCnB,OACE,eAAC,IAAD,CAAO8C,MAAOnG,EAAgB,IAAK,gBAAiBqF,UAAWA,EAA/D,UACE,eAAC,GAAD,WACGhC,GACC,cAAC,IAAD,CAAMjD,MAAM,UAAUE,GAAG,MAAzB,SACG+C,IAGL,eAAC,GAAD,WACE,eAAC,IAAD,WAAOrD,EAAgB,IAAK,gBAA5B,OACA,cAAC,GAAD,wBAAemF,EAAI5J,KAAnB,cAEF,eAAC8L,GAAD,CAAOU,QAAQ,kBAAf,UAAkC/H,EAAgB,IAAK,qBAAvD,OACA,cAAC,IAAD,CACEG,GAAG,kBACH5E,KAAK,UACLyM,KAAK,OACLC,YAAajI,EAAgB,IAAK,iBAClC4E,MAAOA,EACPsC,SAxBa,SAACgB,GACpB,IAAeC,EAAeD,EAAIzH,OAA1BmE,MACR6C,EAASU,IAuBHC,UAAW/E,EACXkD,SAAUjB,OAGd,eAAC,GAAD,WACE,cAAC,IAAD,CAAQc,WAAS,EAACC,QAAQ,YAAYC,QAASjB,EAA/C,SACGrF,EAAgB,IAAK,YAExB,cAAC,IAAD,CAAQoG,WAAS,EAACE,QAASR,EAAeS,UAAWvI,GAAWsH,IAAcV,EAA9E,SACG5E,EAAgB,IAAK,oBClF1BqI,GAAShJ,YAAOsB,GAAPtB,CAAH,iDAINiJ,GAAgBjJ,YAAOkJ,KAAQC,MAAM,CAAEnC,QAAS,OAAQD,WAAW,GAAnD/G,CAAH,gNAaboJ,GAAYpJ,IAAOC,IAAV,qDAITyF,GAAQ1F,YAAOO,IAAPP,CAAH,iDAkIIqJ,GA9HyB,SAAC,GAAa,IAAXvD,EAAU,EAAVA,IACzC,EAA0BzI,mBAAS,CACjC4I,WAAW,EACXqD,QAAQ,EACRC,WAAY,EACZC,eAAgB,IAJlB,oBAAOvG,EAAP,KAAcC,EAAd,KAMMvC,EAAkBC,cACxB,EASI5D,qBAAWkF,IARbM,EADF,EACEA,cACAC,EAFF,EAEEA,SACAC,EAHF,EAGEA,WACA2C,EAJF,EAIEA,WACAvC,EALF,EAKEA,uBACAC,EANF,EAMEA,yBACAyC,EAPF,EAOEA,YACAC,EARF,EAQEA,aAEIgE,EAAiBhH,IAAaC,EAC5BlG,EAA4DsJ,EAA5DtJ,QAASN,EAAmD4J,EAAnD5J,KAAMG,EAA6CyJ,EAA7CzJ,aAAcD,EAA+B0J,EAA/B1J,cAAeD,EAAgB2J,EAAhB3J,YAC9CiL,EAAW5B,EAAYhJ,GACvBkN,EAAoB3G,EAA2BD,EAC/C6G,EAAgBvC,GAAYA,EAASwC,OAAS,EAC9CtJ,EAAO2C,EAAMqG,OAASO,IAAgBC,IAEtCC,EAAeC,sBAAW,wBAAC,mCAAAvM,EAAA,6DAC/ByF,GAAS,SAACW,GAAD,mBAAC,eAAoBA,GAArB,IAAgCoC,WAAW,OADrB,WAGTnE,KAAZhE,EAHqB,EAGrBA,QAHqB,SAIJA,EAAQyL,WAAW/M,GAASuB,OAJxB,cAIvBwL,EAJuB,gBAKAzL,EAAQ0L,eAAehN,GAASuB,OALhC,OAKvByL,EALuB,OAO7BtG,GAAS,SAACW,GAAD,mBAAC,eACLA,GADI,IAEPoC,WAAW,EACXgE,eAAe,EACfV,WAAY7E,SAAS6E,EAAY,IACjCC,eAAgB9E,SAAS8E,EAAgB,SAZd,kDAe7BzF,QAAQC,MAAR,MAf6B,0DAiB9B,CAACxH,IAEE0N,EAAW,yCAAG,uBAAAzM,EAAA,0DACdwF,EAAMqG,OADQ,gBAEhBpG,GAAS,SAACW,GAAD,mBAAC,eAAoBA,GAArB,IAAgCyF,QAASzF,EAAUyF,YAF5C,gDAKRS,IALQ,uDAOdhG,QAAQC,MAAR,MAPc,yBASdd,GAAS,SAACW,GAAD,mBAAC,eAAoBA,GAArB,IAAgCyF,QAASzF,EAAUyF,YAT9C,4EAAH,qDAcXa,EAAgB,WACpBJ,IACAtE,KAGF,EAA8B2E,YAAS,cAAC,GAAD,CAAetE,IAAKA,EAAKC,UAAWoE,KAApEE,EAAP,qBACA,EAA6BD,YAAS,cAAC,GAAD,CAActE,IAAKA,EAAKsB,SAAUA,EAAUrB,UAAWoE,KAAtFG,EAAP,qBACA,EAAiCF,YAC/B,cAAC,GAAD,CAAkBtE,IAAKA,EAAKsB,SAAUA,EAAUrB,UAAWoE,KADtDI,EAAP,qBAIA,OACE,eAAC,IAAD,CAAMC,SAAUb,EAAhB,UACE,cAAC,GAAD,CAAOhI,IAAG,uBAAkBtF,GAAgBuF,IAAK1F,EAAM2F,aAAc8H,EAAgBvN,EAAgB,OACrG,eAAC,IAAD,WACE,eAAC4M,GAAD,WACE,cAAC,IAAD,UAAU9M,IACTsG,GAAiBiH,GAChB,cAAC,IAAD,CAAKgB,SAAO,EAACzD,QAAQ,UAArB,SACGrG,EAAgB,IAAK,eAGzB6B,GAAiB4E,GAChB,cAAC,IAAD,CAAKqD,SAAO,EAACzD,QAAQ,YAArB,SACGrG,EAAgB,IAAK,kBAI3B6B,GAAiBmH,GAChB,cAAC,IAAD,CAAQ5C,WAAS,EAACC,QAAQ,YAAY0D,GAAG,OAAOzD,QAASsD,EAAzD,SACG5J,EAAgB,IAAK,cAGzB6B,GAAiBiH,GAAkBC,GAClC,cAAC,IAAD,CAAQ3C,WAAS,EAACE,QAASoD,EAAqBK,GAAG,OAAnD,SACG/J,EAAgB,IAAK,oBAGzB6B,GAAiB6C,GAAcsE,GAC9B,cAAC,IAAD,CAAQ3C,QAAQ,SAASD,WAAS,EAACE,QAASqD,EAAoBI,GAAG,OAAnE,SACG/J,EAAgB,IAAK,0BAI5B,eAAC,IAAD,CAAYgK,EAAE,IAAd,UACE,cAAC1B,GAAD,CAAe2B,QAAS,cAACtK,EAAD,CAAMuK,MAAM,OAAO9J,MAAM,YAAckG,QAASiD,EAAxE,SACGjH,EAAMgD,UAAYtF,EAAgB,IAAK,cAAgBA,EAAgB,IAAK,aAE9EsC,EAAMqG,QACL,eAACF,GAAD,WACE,cAAC,IAAD,CAAMlI,GAAG,IAAIH,MAAM,aAAaE,GAAG,OAAOuG,MAAO,CAAEsD,UAAW,UAA9D,SACG3O,IAEH,eAAC,GAAD,WACE,eAAC,IAAD,WAAOwE,EAAgB,IAAK,SAA5B,OACA,cAAC,GAAD,uBAEF,eAAC,GAAD,WACE,eAAC,IAAD,WAAOA,EAAgB,IAAK,cAA5B,OACA,cAAC,GAAD,+BC1JCoK,GAbC/K,YAAOgL,IAAPhL,CAAH,wKAOP,qBAAGE,MAAkB+K,aAAaC,MCQzBC,GAZC,WACd,OACE,cAAC,GAAD,UACGC,IAAQC,IAAM,aAAaC,KAAI,SAACxF,GAAD,OAC9B,8BACE,cAAC,GAAD,CAASA,IAAKA,KADNA,EAAI5J,Y,oBCYPqP,GAhBU,SAACC,GAAqE,IAAzBC,EAAwB,uDAAP,GAC/EC,EAAU,GAQhB,OANAC,OAAOC,KAAKJ,GAASK,SAAQ,SAACC,GACxBN,EAAQM,GAAU,IAAML,EAAeM,SAASD,IAClDJ,EAAQ7G,KAAR,UAAgB2G,EAAQM,IAAxB,OAAkCA,EAAOE,OAAO,EAAG,QAIhC,IAAnBN,EAAQ9B,OACH,KAGF8B,EAAQO,KAAK,MCRhBC,GAAWlM,YAAOmM,IAAPnM,CAAH,2EAKRoM,GAAOpM,YAAOqM,IAAPrM,CAAH,2DAIJsM,GAAUtM,IAAO2K,EAAV,4GACF,qBAAGzK,MAAkBC,OAAOC,cAMjCmM,GAAevM,IAAOC,IAAV,oDA4DHuM,GAxDK,WAClB,MAOIxP,qBAAWkF,IANbM,EADF,EACEA,cACAO,EAFF,EAEEA,yBACAD,EAHF,EAGEA,uBACAH,EAJF,EAIEA,kBACAC,EALF,EAKEA,iBACAC,EANF,EAMEA,eAEIlC,EAAkBC,cAClBuC,EAAepG,eACf0P,GAAoB5J,EAAiBM,GAAgBrG,KACrDyC,EAAWgM,GAAiBnM,aAAeqN,GAAmB,CAAC,YAE/DC,EAAWvJ,EAAeP,GAAqBO,EAAeP,IADhDC,EAAiBD,GACkE,IAAM,EAE7G,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC2J,GAAD,UACE,cAAC,IAAD,CAAUI,YAAaD,MAEzB,cAACR,GAAD,UACcvL,EAAgB,IAA3BpB,EAA0B,UAASA,EAAT,0BAAkE,eAE/F,eAAC,GAAD,WACE,eAAC,IAAD,WAAOoB,EAAgB,IAAK,uBAA5B,OACA,cAAC,IAAD,UACE,iCAAU6B,EAAD,UAA4BO,EAA5B,YAAwDD,GAAvC,aAG9B,eAAC,GAAD,WACE,eAAC,IAAD,WAAOnC,EAAgB,IAAK,sBAA5B,OACA,cAAC,IAAD,UACE,iCAAU6B,EAAD,UAA4BG,EAA5B,YAAiDG,GAAhC,aAG9B,eAAC,GAAD,WACE,eAAC,IAAD,WAAOnC,EAAgB,IAAK,uBAA5B,OACA,gCACI6B,EAGA,eAAC4J,GAAD,CAAMjL,KAAI,oCAA+B0B,GAAkBzB,OAAO,SAASC,IAAI,sBAA/E,0BACYwB,GACV,cAAC,IAAD,CAAa9B,MAAM,UAAU+G,GAAG,WAJlC,MAMC,UAGP,cAACwE,GAAD,UAAU3L,EAAgB,IAAK,uEChDxBiM,GA3BW,WACxB,IAAMjM,EAAkBC,cACxB,EAA+F5D,qBAC7FkF,IADMM,EAAR,EAAQA,cAAR,EAAuBO,yBAAvB,EAAiDD,uBAAjD,EAAyEH,kBAIzE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,GAAD,WACE,eAAC,IAAD,WAAOhC,EAAgB,IAAK,cAA5B,OACA,cAAC,IAAD,UAEP,iCAAU6B,EAAD,UAAiB,kB,UCRdqK,GATO7M,IAAOC,IAAV,2KAGG,qBAAGC,MAAkBC,OAAO2M,gBCF5CpL,GAAQ1B,IAAOyB,IAAV,mEAKLsL,GAAU/M,IAAOC,IAAV,wCAIP+M,GAAoBhN,IAAOC,IAAV,qEAcRgN,GATK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQ7K,EAAe,EAAfA,SAC7B,OACE,eAAC2K,GAAD,WACE,cAAC,GAAD,CAAOrL,IAAKuL,EAAQtL,IAAI,cACxB,cAACmL,GAAD,UAAU1K,QCGD8K,GAlBW,WACxB,IAAMxM,EAAkBC,cAExB,OACE,cAAC,GAAD,UACE,eAAC,GAAD,CAAasM,OAAO,+BAApB,UACE,cAAC,IAAD,CAASjM,GAAG,MAAZ,SAAmBN,EAAgB,IAAK,sBACxC,cAAC,IAAD,UACGA,EACC,IACA,wGCIGyM,GAfI,WACjB,IAAMzM,EAAkBC,cAExB,OACE,cAAC,IAAD,CAAM4J,UAAQ,EAAd,SACE,cAAC,IAAD,UACE,eAAC,GAAD,CAAa0C,OAAO,sBAApB,UACE,cAAC,IAAD,CAASjM,GAAG,MAAZ,SAAmBN,EAAgB,IAAK,cACxC,cAAC,IAAD,UAAOA,EAAgB,IAAK,kDCOvB0M,GAfS,WACtB,IAAM1M,EAAkBC,cAExB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,GAAD,CAAasM,OAAO,sBAApB,UACE,cAAC,IAAD,CAASjM,GAAG,MAAZ,SAAmBN,EAAgB,IAAK,mBACxC,cAAC,IAAD,UAAOA,EAAgB,IAAK,8ECqCvB2M,GAhCI,WACjB,IAAQ3O,EAAYD,eAAZC,QACR,EAA2D3B,qBAAWkF,IAA9DM,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,WAAYnE,EAA7C,EAA6CA,UACvCoC,EAAkBC,cAExB,OAAKjC,EAYA6D,GAIAE,GAAcD,EACV,cAAC,GAAD,IAGLlE,EAAY,EACP,cAAC,GAAD,IAGF,cAAC,GAAD,IAXE,cAAC,IAAD,kBAXL,cAAC,IAAD,CAAMiM,UAAQ,EAAd,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASvJ,GAAG,MAAZ,SAAmBN,EAAgB,IAAK,yBACxC,cAAC,IAAD,CAAMM,GAAG,OAAT,SAAiBN,EAAgB,IAAK,4CACtC,cAAC4M,GAAA,EAAD,UCtBJC,GAAgBxN,IAAOC,IAAV,mLAMf,qBAAGC,MAAkB+K,aAAaC,MAoBvBuC,GAfC,WAGd,OAFuBzQ,qBAAWkF,IAA1BmD,WAON,eAACmI,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,OANK,cAAC,GAAD,KCZLE,GAAa1N,IAAOC,IAAV,8GACa,qBAAGC,MAAkBC,OAAOC,cA2B1CuN,UAtBH,WACV,IAAMhN,EAAkBC,cAExB,OACE,cAAC,GAAD,UACE,eAACgN,EAAA,EAAD,WACE,eAACF,GAAD,WACE,cAAC,IAAD,CAASxM,GAAG,KAAKF,KAAK,MAAMD,MAAM,OAAOE,GAAG,OAA5C,kBAGA,cAAC,IAAD,CAASC,GAAG,KAAKF,KAAK,KAAKD,MAAM,OAAjC,SACGJ,EAAgB,IAAK,6BAG1B,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,EAAD","file":"static/js/19.45dc0dc9.chunk.js","sourcesContent":["import { Nft } from './types'\n\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\nexport const PINATA_BASE_URI = 'https://nftstorage.link/ipfs/'     // 'https://cashcowprotocol.mypinata.cloud/ipfs/'\nexport const PINATA_METADATA_CID = 'bafybeiatsdvidxz6sltqxpf77r5le7s72crclcukljioikieo2s4v7swd4'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png`,\n    previewImage: '200.gif',\n    blurImage: 'swapsies-blur.png',\n    sortOrder: 999,\n    bunnyId: 0,\n  },\n  {\n    name: 'Genesis Land',\n    description: \"This genesis land especially in Cash Milk Finance\",\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png`,\n    previewImage: '201.gif',\n    blurImage: 'drizzle-blur.png',\n    sortOrder: 999,\n    bunnyId: 1,\n  },\n  {\n    name: 'Genesis Land',\n    description: \"This genesis land especially in Cash Milk Finance\",\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png`,\n    previewImage: '202.gif',\n    blurImage: 'blueberries-blur.png',\n    sortOrder: 999,\n    bunnyId: 2,\n  },\n  {\n    name: 'Genesis Land',\n    description: \"This genesis land especially in Cash Milk Finance\",\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png`,\n    previewImage: '203.gif',\n    blurImage: 'circular-blur.png',\n    sortOrder: 999,\n    bunnyId: 3,\n  },\n  {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '204.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 4,\n  },\n  {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '205.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 5,\n  },\n   {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '206.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 6,\n  },\n   {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '207.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 7,\n  },\n   {\n    name: 'Genesis Land',\n    description: 'This genesis land especially in Cash Milk Finance',\n    originalImage: `${PINATA_BASE_URI}QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png`,\n    previewImage: '208.gif',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 8,\n  },\n  \n]\n\nexport default Nfts\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = seconds\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","// @ts-nocheck\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Text as UIKitText, ArrowForwardIcon } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\n\nconst StyledHowItWorks = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  padding: 24px 0;\n`\n\nconst Section = styled.div`\n  margin-bottom: 24px;\n`\n\nconst Icon = styled.div`\n  text-align: center;\n`\n\nconst Text = styled(UIKitText)`\n  flex: 1;\n  padding: 0 8px;\n`\n\nconst Row = styled.div`\n  align-items: start;\n  display: flex;\n  margin-bottom: 16px;\n`\n\nconst HowItWorks = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <StyledHowItWorks>\n        <Section>\n          <Heading id=\"how-it-works\" color=\"secondary\" size=\"lg\" mb=\"16px\">\n            {TranslateString(632, 'How it works')}\n          </Heading>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>\n              {TranslateString(\n                634,\n                'Members will be able to buy an NFT on AirNFT once the event period starts.',\n              )}\n            </Text>\n          </Row>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>\n              {TranslateString(636, 'Members join Genesis Land Staking to earn in future!')}\n            </Text>\n          </Row>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>\n              {TranslateString(\n                638,\n                \"Members can trade in their NFT for BNB or MILK!Or just keep them in their collection wallet\",\n              )}\n            </Text>\n          </Row>\n        </Section>\n        <Section>\n          <Heading color=\"secondary\" size=\"lg\" mb=\"16px\">\n            {TranslateString(640, 'How to buy one now?')}\n          </Heading>\n          <Row>\n            <Icon>\n              <ArrowForwardIcon />\n            </Icon>\n            <Text>{TranslateString(642, 'Visit each link below above NFT images! Good luck!')}</Text>\n          </Row>\n        </Section>\n        <div>\n          <Button\n            as=\"a\"\n            href=\"https://app.airnfts.com/creators/0x30B8855952595F86A12B7e0DCBEDf86E64f1e53e\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {TranslateString(644, 'Genesis Land Collection')}\n          </Button>\n        </div>\n      </StyledHowItWorks>\n    </Container>\n  )\n}\n\nexport default HowItWorks\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","/* eslint-disable */\nimport React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport { RABBIT_MINTING_FARM_ADDRESS, PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\n\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getRabbitMintingContract = (contractOptions?: ContractOptions) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return getContract(rabbitMintingFarmAbi, RABBIT_MINTING_FARM_ADDRESS, contractOptions)\n}\n\nexport const getPancakeRabbitContract = (contractOptions?: ContractOptions) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return getContract(pancakeRabbitsAbi, PANCAKE_RABBITS_ADDRESS, contractOptions)\n}\n\nexport default getRabbitMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getPancakeRabbitContract } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  canClaim: boolean\n  hasClaimed: boolean\n  countBunniesBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  bunnyMap: BunnyMap\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (bunnyId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    canClaim: false,\n    hasClaimed: false,\n    countBunniesBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    bunnyMap: {},\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBunniesBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n        ] = await multicall(rabbitmintingfarm, [\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'startBlockNumber' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'endBlockNumber' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'countBunniesBurnt' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBunniesBurnt]: [BigNumber] = countBunniesBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBunniesBurnt: countBunniesBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const pancakeRabbitsContract = getPancakeRabbitContract()\n        const [canClaimArr, hasClaimedArr] = await multicall(rabbitmintingfarm, [\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\n        ])\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n        const [canClaim]: [boolean] = canClaimArr\n        const [hasClaimed]: [boolean] = hasClaimedArr\n\n        let bunnyMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the bunnyId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await pancakeRabbitsContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const bunnyId = await pancakeRabbitsContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(bunnyId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same bunny so the format is:\n          // { [bunnyId]: [array of tokenIds] }\n          bunnyMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [bunnyId, tokenId] = association\n\n            return {\n              ...accum,\n              [bunnyId]: accum[bunnyId] ? [...accum[bunnyId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          canClaim,\n          hasClaimed,\n          balanceOf,\n          bunnyMap,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (bunnyId: number) => state.bunnyMap[bunnyId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","/* eslint-disable */\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from 'cashcow-uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isloading, setisloading] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  const handleConfirm = async () => {\n    try {\n      await rabbitMintingContract.methods\n        .mintNFT(nft.bunnyId)\n        .send({ from: account })\n        .on('sending', () => {\n          setisloading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setisloading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError('You must have a CAKE balance greater than zero to claim NFT')\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={TranslateString(999, 'Claim NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isloading || cakeInWallet <= 0}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","/* eslint-disable */\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isloading, setisloading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const rabbitMintingContract = useRabbitMintingFarm(RABBIT_MINTING_FARM_ADDRESS)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await rabbitMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setisloading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setisloading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>10 CAKE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive CAKE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isloading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","/* eslint-disable */\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from 'cashcow-uikit'\nimport { PANCAKE_RABBITS_ADDRESS } from 'config/constants/nfts'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isloading, setisloading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const pancakeRabbitsContract = usePancakeRabbits(PANCAKE_RABBITS_ADDRESS)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await pancakeRabbitsContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setisloading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setisloading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isloading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isloading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getPancakeRabbitContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isloading: false,\n    isOpen: false,\n    bunnyCount: 0,\n    bunnyBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    canClaim,\n    hasClaimed,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n  } = useContext(NftProviderContext)\n  const walletCanClaim = canClaim && !hasClaimed\n  const { bunnyId, name, previewImage, originalImage, description } = nft\n  const tokenIds = getTokenIds(bunnyId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isloading: true }))\n    try {\n      const { methods } = getPancakeRabbitContract()\n      const bunnyCount = await methods.bunnyCount(bunnyId).call()\n      const bunnyBurnCount = await methods.bunnyBurnCount(bunnyId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isloading: false,\n        isDataFetched: true,\n        bunnyCount: parseInt(bunnyCount, 10),\n        bunnyBurnCount: parseInt(bunnyBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [bunnyId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')}\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for MILK')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isloading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Price')}:</Text>\n              <Value>1 BNB</Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Max Supply')}:</Text>\n              <Value>100</Value>\n            </InfoRow>           \n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from 'cashcow-uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import getTimePeriods from './getTimePeriods'\n\n/**\n * @param {Object} periods Return value from getTimePeriods\n * @return {string} '14h 3m 4s'\n */\nconst formatTimePeriod = (periods: ReturnType<typeof getTimePeriods>, excludePeriods = []) => {\n  const textArr = []\n\n  Object.keys(periods).forEach((period) => {\n    if (periods[period] > 0 && !excludePeriods.includes(period)) {\n      textArr.push(`${periods[period]}${period.substr(0, 1)}`)\n    }\n  })\n\n  if (textArr.length === 0) {\n    return null\n  }\n\n  return textArr.join(' ')\n}\n\nexport default formatTimePeriod\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, OpenNewIcon, Text, Link as UIKitLink, Progress } from 'cashcow-uikit'\nimport { BSC_BLOCK_TIME } from 'config'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport formatTimePeriod from 'utils/formatTimePeriod'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst TimeLeft = styled(Heading)`\n  margin-bottom: 16px;\n  text-align: center;\n`\n\nconst Link = styled(UIKitLink)`\n  text-decoration: underline;\n`\n\nconst Message = styled.p`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n  padding-top: 16px;\n  text-align: center;\n`\n\nconst ProgressWrap = styled.div`\n  margin-bottom: 16px;\n`\n\nconst NftProgress = () => {\n  const {\n    isInitialized,\n    currentDistributedSupply,\n    totalSupplyDistributed,\n    countBunniesBurnt,\n    startBlockNumber,\n    endBlockNumber,\n  } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n  const currentBlock = useBlock()\n  const secondsRemaining = (endBlockNumber - currentBlock) * BSC_BLOCK_TIME\n  const timeLeft = formatTimePeriod(getTimePeriods(secondsRemaining), ['seconds'])\n  const totalBlocks = endBlockNumber - startBlockNumber\n  const progress = currentBlock > startBlockNumber ? ((currentBlock - startBlockNumber) / totalBlocks) * 100 : 5\n\n  return (\n    <Card>\n      <CardBody>\n        <ProgressWrap>\n          <Progress primaryStep={progress} />\n        </ProgressWrap>\n        <TimeLeft>\n          {timeLeft ? TranslateString(999, `${timeLeft} left to trade in NFTs`) : TranslateString(999, 'Finished!')}\n        </TimeLeft>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's claimed\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${countBunniesBurnt}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Can be traded until')}:</Text>\n          <div>\n            {!isInitialized ? (\n              '...'\n            ) : (\n              <Link href={`https://bscscan.com/block/${endBlockNumber}`} target=\"_blank\" rel=\"noreferrer noopener\">\n                {`Block ${endBlockNumber}`}\n                <OpenNewIcon color=\"primary\" ml=\"2px\" />\n              </Link>\n            )}{' '}\n          </div>\n        </InfoRow>\n        <Message>{TranslateString(999, 'NFTs can be traded in for CAKE until the above block height')}</Message>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgress\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBunniesBurnt } = useContext(\n    NftProviderContext,\n  )\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, \"Max Supply\")}:</Text>\n          <Text>\n         { /*    <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>  */ }\n\t\t <strong>{!isInitialized ? '...' : `100/100`}</strong>\n          </Text>\n        </InfoRow>\n        { /* <InfoRow> */ }\n        { /*  <Text>{TranslateString(999, \"Total NFT's burned\")}:</Text> */ }\n        { /*  <Text> */ }\n        { /*    <strong>{!isInitialized ? '...' : `${countBunniesBurnt}/${totalSupplyDistributed}`}</strong> */ }\n        { /*  </Text> */ }\n        { /* </InfoRow> */ }\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import styled from 'styled-components'\n\nconst SecondaryCard = styled.div`\n  align-items: start;\n  background-color: transparent;\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 32px;\n  display: flex;\n  padding: 24px;\n`\n\nexport default SecondaryCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Image = styled.img`\n  margin-right: 16px;\n  width: 56px;\n`\n\nconst Content = styled.div`\n  flex: 1;\n`\n\nconst StyledCardContent = styled.div`\n  align-items: start;\n  display: flex;\n`\n\nconst CardContent = ({ imgSrc, children }) => {\n  return (\n    <StyledCardContent>\n      <Image src={imgSrc} alt=\"card icon\" />\n      <Content>{children}</Content>\n    </StyledCardContent>\n  )\n}\n\nexport default CardContent\n","import React from 'react'\nimport { Heading, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport SecondaryCard from './SecondaryCard'\nimport CardContent from './CardContent'\n\nconst NoNftsToClaimCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <SecondaryCard>\n      <CardContent imgSrc=\"/images/present-disabled.svg\">\n        <Heading mb=\"8px\">{TranslateString(999, 'No NFTs to claim')}</Heading>\n        <Text>\n          {TranslateString(\n            999,\n            'You have no NFTs to claim at this time, but you can still see the NFTs in this series below.',\n          )}\n        </Text>\n      </CardContent>\n    </SecondaryCard>\n  )\n}\n\nexport default NoNftsToClaimCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst YouWonCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'You won!')}</Heading>\n          <Text>{TranslateString(999, 'Claim an NFT from the options below!')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default YouWonCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport CardContent from './CardContent'\n\nconst NftInWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card>\n      <CardBody>\n        <CardContent imgSrc=\"/images/present.svg\">\n          <Heading mb=\"8px\">{TranslateString(999, 'NFT in wallet')}</Heading>\n          <Text>{TranslateString(999, 'Trade in your NFT for CAKE, or just keep it for your collection.')}</Text>\n        </CardContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftInWalletCard\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Card, CardBody, Heading, Text } from 'cashcow-uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NoNftsToClaimCard from './NoNftsToClaimCard'\nimport YouWonCard from './YouWonCard'\nimport NftInWalletCard from './NftInWalletCard'\n\n/**\n * Possible states\n *\n * 1. Disconnected wallet\n * 2. No NFT's to claim\n * 3. You won an NFT\n * 4. NFT in wallet\n */\nconst StatusCard = () => {\n  const { account } = useWallet()\n  const { isInitialized, canClaim, hasClaimed, balanceOf } = useContext(NftProviderContext)\n  const TranslateString = useI18n()\n\n  if (!account) {\n    return (\n      <Card isActive>\n        <CardBody>\n          <Heading mb=\"8px\">{TranslateString(999, 'Wallet Disconnected')}</Heading>\n          <Text mb=\"16px\">{TranslateString(999, 'Connect to see if you have won an NFT!')}</Text>\n          <UnlockButton />\n        </CardBody>\n      </Card>\n    )\n  }\n\n  if (!isInitialized) {\n    return <Text>...</Text>\n  }\n\n  if (!hasClaimed && canClaim) {\n    return <YouWonCard />\n  }\n\n  if (balanceOf > 0) {\n    return <NftInWalletCard />\n  }\n\n  return <NoNftsToClaimCard />\n}\n\nexport default StatusCard\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  if (!canBurnNft) {\n    return <NftProgressSimple />\n  }\n\n  return (\n    <StyledNtfInfo>\n      <NftProgress />\n      <StatusCard />\n    </StyledNtfInfo>\n  )\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xxl\" color=\"text\" mb=\"24px\">\n            NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"text\">\n            {TranslateString(999, 'Genesis Land launch!')}\n          </Heading>\n        </StyledHero>\n        <NftInfo />\n        <NftList />\n        <HowItWorks />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}
{"version":3,"sources":["utils/callHelpers.ts","hooks/useTokenBalance.ts","hooks/useHarvest.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","decimals","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useMaxTransferAmount","slowRefresh","useRefresh","useState","maxTransferAmount","setMaxTransferAmount","useEffect","cakeContract","getContract","cakeABI","getCakeAddress","call","maxTransfer","fetchMaxTransferAmount","useTotalSupply","totalSupply","setTotalSupply","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","fetchBalance","balanceOf","bal","useTokenBalance","useWallet","ethereum","fastRefresh","getTokenBalance","res","useHarvest","farmPid","dispatch","useDispatch","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useSousHarvest","sousId","isUsingBnb","useSousChef","handleHarvest","updateUserPendingReward","updateUserBalance","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","fetchBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","CardValue","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","eggPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","as","StyledTwitterCard","TwitterCard","textAlign","dataSource","sourceType","screenName","tweetLimit","height","chrome","width","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","useTheme","isDark","Page","FarmStakingCard"],"mappings":"ugBAGaA,EAAO,uCAAG,WAAOC,EAAYC,EAAoBC,GAAvC,SAAAC,EAAA,+EACdH,EAAWI,QACfL,QAAQE,EAAmBI,QAAQC,QAASC,SAAOC,UAAUC,YAC7DC,KAAK,CAAEC,KAAMT,KAHK,2CAAH,0DAMPU,EAAK,uCAAG,WAAOX,EAAoBY,EAAKC,EAAQZ,GAAxC,eAAAC,EAAA,6DAEbY,EAAmB,IAARF,EAAY,EAAI,GAFd,kBAIZZ,EAAmBG,QACvBY,QAAQH,EAAK,IAAII,IAAUH,GAAQI,MAAM,IAAID,IAAU,IAAIE,IAAIJ,IAAWK,YAC1EV,KAAK,CAAEC,KAAMT,IACbmB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBARK,2CAAH,4DAYLC,EAAS,uCAAG,WAAOC,EAAkBX,EAAQZ,GAAjC,SAAAC,EAAA,+EAChBsB,EAAiBrB,QACrBY,QAAQ,IAAIC,IAAUH,GAAQI,MAAM,IAAID,IAAU,IAAIE,IAAI,KAAKC,YAC/DV,KAAK,CAAEC,KAAMT,IACbmB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALS,2CAAH,0DASTG,EAAY,uCAAG,WAAOD,EAAkBX,EAAQZ,GAAjC,SAAAC,EAAA,+EACnBsB,EAAiBrB,QACrBY,UACAN,KAAK,CAAEC,KAAMT,EAASyB,MAAO,IAAIV,IAAUH,GAAQI,MAAM,IAAID,IAAU,IAAIE,IAAI,KAAKC,aACpFC,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALY,2CAAH,0DASZK,EAAO,uCAAG,WAAO3B,EAAoBY,EAAKC,EAAQZ,GAAxC,eAAAC,EAAA,6DAEfY,EAAmB,IAARF,EAAY,EAAI,GAFZ,kBAIdZ,EAAmBG,QACvByB,SAAShB,EAAK,IAAII,IAAUH,GAAQI,MAAM,IAAID,IAAU,IAAIE,IAAIJ,IAAWK,YAC3EV,KAAK,CAAEC,KAAMT,IACbmB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBARO,2CAAH,4DAYPO,EAAW,uCAAG,WAAOL,EAAkBX,EAAQZ,GAAjC,SAAAC,EAAA,yDAEgB,+CAArCsB,EAAiBpB,QAAQC,QAFJ,yCAGhBmB,EAAiBrB,QACrB2B,oBACArB,KAAK,CAAEC,KAAMT,IACbmB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBAPS,UAUgB,+CAArCE,EAAiBpB,QAAQC,QAVJ,yCAWhBmB,EAAiBrB,QACrB2B,oBACArB,KAAK,CAAEC,KAAMT,IACbmB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBAfS,gCAkBlBE,EAAiBrB,QACrByB,SAAS,IAAIZ,IAAUH,GAAQI,MAAM,IAAID,IAAU,IAAIE,IAAI,KAAKC,YAChEV,KAAK,CAAEC,KAAMT,IACbmB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBAtBW,2CAAH,0DA0BXS,EAAmB,uCAAG,WAAOP,EAAkBX,EAAQZ,GAAjC,SAAAC,EAAA,+EAC1BsB,EAAiBrB,QACrB2B,oBACArB,KAAK,CAAEC,KAAMT,IACbmB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALmB,2CAAH,0DASnBU,EAAO,uCAAG,WAAOhC,EAAoBY,EAAKX,GAAhC,SAAAC,EAAA,+EACdF,EAAmBG,QACvBY,QAAQH,EAAK,KACbH,KAAK,CAAEC,KAAMT,IACbmB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALO,2CAAH,0DASPW,EAAY,uCAAG,WAAOT,EAAkBvB,GAAzB,SAAAC,EAAA,+EACnBsB,EAAiBrB,QACrBY,QAAQ,KACRN,KAAK,CAAEC,KAAMT,IACbmB,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALY,2CAAH,wDASZY,EAAe,uCAAG,WAAOV,EAAkBvB,GAAzB,SAAAC,EAAA,+EACtBsB,EAAiBrB,QACrBY,UACAN,KAAK,CAAEC,KAAMT,EAASyB,MAAO,IAAIV,IAAU,KAC3CI,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBALe,2CAAH,yD,sPC5Efa,EAAuB,WAClC,IAAQC,EAAgBC,cAAhBD,YACR,EAAkDE,qBAAlD,mBAAOC,EAAP,KAA0BC,EAA1B,KAYA,OAVAC,qBAAU,WAAM,4CACd,8BAAAvC,EAAA,6DACQwC,EAAeC,YAAYC,EAASC,eAD5C,SAE4BH,EAAavC,QAAQoC,oBAAoBO,OAFrE,OAEQC,EAFR,OAGEP,EAAqB,IAAIxB,IAAU+B,EAAY5B,aAHjD,4CADc,uBAAC,WAAD,wBAOd6B,KACC,CAACZ,IAEGG,GAEIU,EAAiB,WAC5B,IAAQb,EAAgBC,cAAhBD,YACR,EAAsCE,qBAAtC,mBAAOY,EAAP,KAAoBC,EAApB,KAYA,OAVAV,qBAAU,WAAM,4CACd,8BAAAvC,EAAA,6DACQwC,EAAeC,YAAYC,EAASC,eAD5C,SAEuBH,EAAavC,QAAQ+C,cAAcJ,OAF1D,OAEQM,EAFR,OAGED,EAAe,IAAInC,IAAUoC,IAH/B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACjB,IAEGc,GAGII,EAAmB,SAACC,GAC/B,MAA8BjB,mBAAS,IAAItB,IAAU,IAArD,mBAAOwC,EAAP,KAAgBC,EAAhB,KACQrB,EAAgBC,cAAhBD,YAYR,OAVAK,qBAAU,WACR,IAAMiB,EAAY,uCAAG,8BAAAxD,EAAA,6DACbwC,EAAeC,YAAYC,EAASC,eADvB,SAEDH,EAAavC,QAAQwD,UAAU,8CAA8Cb,OAF5E,OAEbc,EAFa,OAGnBH,EAAW,IAAIzC,IAAU4C,IAHN,2CAAH,qDAMlBF,MACC,CAACH,EAAcnB,IAEXoB,GAGMK,IApES,SAACN,GACvB,MAA8BjB,mBAAS,IAAItB,IAAU,IAArD,mBAAOwC,EAAP,KAAgBC,EAAhB,KACA,EAAuEK,cAA/D7D,EAAR,EAAQA,QAAS8D,EAAjB,EAAiBA,SACTC,EAAgB3B,cAAhB2B,YAaR,OAXAvB,qBAAU,WACR,IAAMiB,EAAY,uCAAG,4BAAAxD,EAAA,sEACD+D,YAAgBF,EAAUR,EAActD,GADvC,OACbiE,EADa,OAEnBT,EAAW,IAAIzC,IAAUkD,IAFN,2CAAH,qDAKdjE,GAAW8D,GACbL,MAED,CAACzD,EAAS8D,EAAUR,EAAcS,IAE9BR,I,6NCnBIW,EAAa,SAACC,GACzB,IAAMC,EAAWC,cACTrE,EAAY6D,cAAZ7D,QACFD,EAAqBuE,cAQ3B,MAAO,CAAEC,SANaC,sBAAW,sBAAC,4BAAAvE,EAAA,sEACX8B,YAAQhC,EAAoBoE,EAASnE,GAD1B,cAC1ByE,EAD0B,OAEhCL,EAASM,YAAuB1E,IAFA,kBAGzByE,GAHyB,2CAI/B,CAACzE,EAASoE,EAAUD,EAASpE,MAKrB4E,EAAgB,SAACC,GAC5B,IAAQ5E,EAAY6D,cAAZ7D,QACFD,EAAqBuE,cAU3B,MAAO,CAAEC,SARaC,sBAAW,sBAAC,4BAAAvE,EAAA,6DAC1B4E,EAAkBD,EAASE,QAAO,SAACC,EAAOpE,GAC9C,MAAM,GAAN,mBAAWoE,GAAX,CAAkBhD,YAAQhC,EAAoBY,EAAKX,OAClD,IAH6B,kBAKzBgF,QAAQC,IAAIJ,IALa,2CAM/B,CAAC7E,EAAS4E,EAAU7E,MAKZmF,EAAiB,SAACC,GAAgC,IAAxBC,EAAuB,wDACtDhB,EAAWC,cACjB,EAAoBR,cAAZ7D,EAAR,EAAQA,QACFuB,EAAmB8D,YAAYF,GAC/BpF,EAAqBuE,cAErBgB,EAAgBd,sBAAW,sBAAC,sBAAAvE,EAAA,yDACjB,IAAXkF,EAD4B,gCAExBpD,YAAQhC,EAAoB,EAAGC,GAFP,kCAGrBoF,EAHqB,iCAIxBnD,YAAgBV,EAAkBvB,GAJV,gDAMxBgC,YAAaT,EAAkBvB,GANP,QAQhCoE,EAASmB,YAAwBJ,EAAQnF,IACzCoE,EAASoB,YAAkBL,EAAQnF,IATH,4CAU/B,CAACA,EAASoE,EAAUgB,EAAYrF,EAAoBwB,EAAkB4D,IAEzE,MAAO,CAAEZ,SAAUe,K,iRCbNG,EA3Ba,WAC1B,MAAkDpD,mBAA4B,IAA9E,mBAAOqD,EAAP,KAA0BC,EAA1B,KACQ3F,EAAY6D,cAAZ7D,QACA+D,EAAgB3B,cAAhB2B,YAqBR,OAnBAvB,qBAAU,WACR,IAAMoD,EAAa,uCAAG,gCAAA3F,EAAA,6DACd4F,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvC5F,QAAS6F,cACTC,KAAM,cACNC,OAAQ,CAACH,EAAKrF,IAAKX,OAJD,SAOKoG,YAAUC,EAAeR,GAP9B,OAOdS,EAPc,OAQdC,EAAUT,IAAYC,KAAI,SAACC,EAAMQ,GAAP,mBAAC,eAAsBR,GAAvB,IAA6BzC,QAAS,IAAIxC,IAAUuF,EAAWE,SAE/Fb,EAAqBY,GAVD,2CAAH,qDAafvG,GACF4F,MAED,CAAC5F,EAAS+D,IAEN2B,G,yBCDMe,EAzB6B,SAAC,GAAoD,IAAlDhF,EAAiD,EAAjDA,MAAOZ,EAA0C,EAA1CA,SAA0C,IAAhC6F,gBAAgC,MAArB,OAAqB,EAAbC,EAAa,EAAbA,OACjF,EAA4BC,qBAAW,CACrCC,MAAO,EACPC,IAAKrF,EACLsF,SAAU,EACVC,UAAW,IACXnG,cAEeoG,IAAbpG,EAAyBA,EAAWY,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlEyF,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJA3E,qBAAU,WACR4E,EAAYE,QAAQ7F,KACnB,CAACA,EAAO2F,IAGT,eAAC,IAAD,CAAMG,MAAI,EAACb,SAAUA,EAArB,UACGC,EACAO,MCTQM,EAfY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACtBC,EAAkBC,cAGxB,OAFoB9D,cAAZ7D,QAUD,cAAC,EAAD,CAAWyB,MAAOgG,IANrB,cAAC,IAAD,CAAMG,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGJ,EAAgB,IAAK,aCMfK,EAfW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrBN,EAAkBC,cAGxB,OAFoB9D,cAAZ7D,QAUD,cAAC,EAAD,CAAWyB,MAAOuG,EAAatB,SAAS,SAN3C,cAAC,IAAD,CAAMkB,MAAM,eAAeC,MAAO,CAAEC,WAAY,QAAhD,SACGJ,EAAgB,IAAK,a,kBCqBfO,EA1BQ,WACrB,MAA+B5F,mBAAS,IAAxC,mBAAO6F,EAAP,KAAiB1E,EAAjB,KACQxD,EAAiC6D,cAAjC7D,QACA+D,EAAgB3B,cAAhB2B,YAoBR,OAlBAvB,qBAAU,WACR,IAAM2F,EAAgB,uCAAG,8BAAAlI,EAAA,6DACjB4F,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvC5F,QAAS6F,cACTC,KAAM,cACNC,OAAQ,CAACH,EAAKrF,IAAKX,OAJE,SAOLoG,YAAUC,EAAeR,GAPpB,OAOjB5B,EAPiB,OASvBT,EAAWS,GATY,2CAAH,qDAYlBjE,GACFmI,MAED,CAACnI,EAAS+D,IAENmE,G,SCdHE,EAAwBC,YAAOC,IAAPD,CAAH,uNAQrBE,EAAQF,IAAOG,IAAV,oDAQLC,GAJYJ,IAAOK,IAAV,oDAIDL,IAAOG,IAAV,+DACA,qBAAGG,MAAkBC,OAAOC,eAIjCC,EAAUT,IAAOG,IAAV,iDAsEEO,EAlEW,WACxB,MAAkC1G,oBAAS,GAA3C,mBAAO2G,EAAP,KAAkBC,EAAlB,KACQjJ,EAAY6D,cAAZ7D,QACF0H,EAAkBC,cAClBuB,EAAmBzD,IACnBuC,EAAcmB,YAAiBvF,YAAgBhB,gBAI/CwG,EAAWC,cAAmBC,WAE9B7B,EADcQ,IACYnD,QAAO,SAACC,EAAOwE,GAC7C,OAAOxE,EAAQ,IAAIhE,IAAUwI,GAASf,IAAI,IAAIzH,IAAU,IAAIE,IAAI,KAAKqI,aACpE,GACGE,EAAoBN,EAAiBO,QAAO,SAACC,GAAD,OAAiBA,EAAYnG,QAAQ+F,WAAa,KAE5F/E,EAAaI,YAAc6E,EAAkBzD,KAAI,SAAC4D,GAAD,OAAqBA,EAAgBhJ,QAAtF4D,SAEFqF,EAAkBpF,sBAAW,sBAAC,sBAAAvE,EAAA,6DAClCgJ,GAAa,GADqB,kBAG1B1E,IAH0B,6EAOhC0E,GAAa,GAPmB,0EASjC,CAAC1E,IAEJ,OACE,cAAC6D,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASyB,KAAK,KAAKC,GAAG,OAAtB,SACGpC,EAAgB,IAAK,qBAExB,eAACa,EAAD,WACE,cAACE,EAAD,UAAQf,EAAgB,IAAK,qBAC7B,cAAC,EAAD,CAAoBD,YAAaA,IACjC,eAACgB,EAAD,iBAAWW,EAAW3B,GAAasC,QAAQ,SAE7C,eAACxB,EAAD,WACE,cAACE,EAAD,UAAQf,EAAgB,IAAK,oBAC7B,cAAC,EAAD,CAAmBM,YAAaA,IAChC,eAACS,EAAD,iBAAWW,EAAWpB,GAAa+B,QAAQ,SAE7C,cAACjB,EAAD,UACG9I,EACC,cAAC,IAAD,CACEgK,GAAG,cACHC,SAAUT,EAAkBU,QAAU,GAAKlB,EAC3CmB,QAASP,EACTQ,WAAS,EAJX,SAMGpB,EACGtB,EAAgB,IAAK,mBACrBA,EAAgB,IAAD,uBAAsB8B,EAAkBU,OAAxC,QAGrB,cAACG,EAAA,EAAD,CAAcD,WAAS,Y,SCvF7BE,EAAkBjC,YAAOC,IAAPD,CAAH,yEAKfkC,EAAMlC,IAAOG,IAAV,oJAmEMgC,GA3DG,WAChB,IAAM9C,EAAkBC,cAClB1E,EAAcD,cACdyH,EAAgBpH,YAAiBT,eACjC8H,EAAQC,cACRvB,EAAWC,cACXuB,EAAa3H,EAAcA,EAAY4H,MAAMJ,GAAiB,IAAI1J,IAAU,GAC5E+J,EAAa3B,YAAiByB,GAC9BG,EAAY3B,EAASpI,MAAM4J,GAC3BtI,EAAoB6G,YAAiBjH,eAGvC8I,EAAc,EAKlB,OAJIN,GAASA,EAAM,IAAMA,EAAM,GAAGM,cAChCA,EAAc,IAAIjK,IAAU2J,EAAM,GAAGM,aAAaxC,IAAI,IAAIzH,IAAU,IAAIE,IAAI,KAAKqI,YAIjF,cAACgB,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAST,KAAK,KAAKC,GAAG,OAAtB,SACGpC,EAAgB,IAAK,gBAExB,eAAC6C,EAAD,WACE,cAAC,IAAD,CAAM7D,SAAS,OAAf,SAAuBgB,EAAgB,MAAO,gBAC9C,cAAC,EAAD,CAAWhB,SAAS,OAAOjF,MAAO0H,YAAiB4B,GAAYlK,SAAU,EAAG8F,OAAO,SAErF,eAAC4D,EAAD,WACE,cAAC,IAAD,CAAM7D,SAAS,OAAf,SAAuBgB,EAAgB,IAAK,kBAC3CzE,GAAe,cAAC,EAAD,CAAWyD,SAAS,OAAOjF,MAAO0H,YAAiBlG,GAAcpC,SAAU,OAG7F,eAAC0J,EAAD,WACE,cAAC,IAAD,CAAM7D,SAAS,OAAf,SAAuBgB,EAAgB,IAAK,kBAC5C,cAAC,EAAD,CAAWhB,SAAS,OAAOjF,MAAO0H,YAAiBsB,GAAgB5J,SAAU,OAG/E,eAAC0J,EAAD,WACE,cAAC,IAAD,CAAM7D,SAAS,OAAf,SAAuBgB,EAAgB,MAAO,wBAC7CoD,GAAc,cAAC,EAAD,CAAWpE,SAAS,OAAOjF,MAAOqJ,EAAYjK,SAAU,OAE/E,eAAC0J,EAAD,WACQ,cAAC,IAAD,CAAM7D,SAAS,OAAf,SAAuBgB,EAAgB,MAAO,qBAC9C,cAAC,IAAD,CAAMH,MAAI,EAACb,SAAS,OAApB,SACLpE,GAAqB,cAAC,EAAD,CAAWoE,SAAS,OAAOjF,MAAOa,EAAmBzB,SAAU,SAIjF,eAAC0J,EAAD,WACE,cAAC,IAAD,CAAM7D,SAAS,OAAf,SAAuBgB,EAAgB,IAAK,gBAC5C,cAAC,IAAD,CAAMH,MAAI,EAACb,SAAS,OAApB,SACGsE,aCrEPC,GAA6B5C,YAAOC,IAAPD,CAAH,gEA6BjB6C,GAxBc,WAC3B,IAAMxD,EAAkBC,cAElBwD,EAAaC,cAGnB,OACE,cAACH,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASI,GAAG,KAAKxB,KAAK,KAAtB,SACGnC,EAAgB,MAAO,wBAE1B,qCAGE,cAAC,EAAD,CAAWjG,MAAO0J,EAAW7B,WAAY3C,OAAO,IAAI9F,SAAU,IAE9D,cAAC,IAAD,CAAM+G,MAAM,aAAZ,SAA0BF,EAAgB,MAAO,yC,UClBrD4D,GAAoBjD,YAAOC,IAAPD,CAAH,gGA0CRkD,IApCHlD,IAAOG,IAAV,oJAQW,WAClB,IAAMd,EAAkBC,cAExB,OACE,cAAC2D,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASzB,KAAK,KAAKC,GAAG,OAAOjC,MAAO,CAAC2D,UAAW,QAAhD,SACG9D,EAAgB,MAAO,mBAE1B,cAAC,KAAD,CACE+D,WAAY,CACVC,WAAY,UACZC,WAAY,aAGdxL,QAAS,CAChByL,WAAY,IACHC,OAAQ,MACRC,OAAQ,qBACRC,MAAO,gBClCbC,GAAO3D,IAAOG,IAAV,8sBAaN,qBAAGG,MAAkBsD,aAAaC,MAWhCC,GAAQ9D,YAAO+D,IAAP/D,CAAH,gTAUP,qBAAGM,MAAkBsD,aAAaI,MAMlC,qBAAG1D,MAAkBsD,aAAaC,MAwCvBI,GAjCQ,WACvB,IAAM5E,EAAkBC,cACP4E,cAARC,OAEP,OACE,eAACC,EAAA,EAAD,CACE5E,MAAO,GADT,UAKE,eAACmE,GAAD,WACH,cAAC,IAAD,CAASX,GAAG,KAAKxB,KAAK,KAAKjC,MAAM,OAAOkC,GAAG,OAAOjC,MAAO,CAAE2D,UAAW,UAAtE,SAEA9D,EAAgB,IAAI,oCAGrB,cAAC,IAAD,CAAS2D,GAAG,KAAKzD,MAAM,OAAOkC,GAAG,OAAOjC,MAAO,CAAE2D,UAAW,UAA5D,SAEC9D,EAAgB,IAAI,sCAGjB,8BACE,eAACyE,GAAD,WACE,cAACO,EAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD","file":"static/js/22.84db900d.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  // Hardcoded hack by CryptoWhatElse for pool number 0 which has only 9 decimals (COW)\n  const decimals = pid === 0 ? 9 : 18 // Edited 3(Cow) to 5 (Milk)\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  // Hardcoded hack by CryptoWhatElse for pool number 0 which has only 9 decimals (COW)\n  const decimals = pid === 0 ? 9 : 18   // Edited 3(Cow) to 5 (Milk)\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\nexport const useMaxTransferAmount = () => {\n  const { slowRefresh } = useRefresh()\n  const [maxTransferAmount, setMaxTransferAmount] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchMaxTransferAmount() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const maxTransfer = await cakeContract.methods.maxTransferAmount().call()\n      setMaxTransferAmount(new BigNumber(maxTransfer.toString()))\n    }\n\n    fetchMaxTransferAmount()\n  }, [slowRefresh])\n\n  return maxTransferAmount\n}\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMilk',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","/* eslint-disable */\nimport React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'cashcow-uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from 'cashcow-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from 'cashcow-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingMilk',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from 'cashcow-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  /* background-image: url('/images/cow/3.png'); */\n  background-repeat: no-repeat;\n  background-position: top 20px right -30px;\n  background-size: 140px 140px;\n  min-height: 300px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  \n  // const cakeBalance = getBalanceNumber(useTokenBalance(getMilkAddress()))\n  \n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <Block>\n          <Label>{TranslateString(544, 'MILK to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'MILK in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting MILK')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'cashcow-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance, useMaxTransferAmount } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\n// 0x000000000000000000000000000000000000dEaD\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const eggPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = eggPrice.times(circSupply)\n  const maxTransferAmount = getBalanceNumber(useMaxTransferAmount())\n  \n\n  let eggPerBlock = 0\n  if (farms && farms[0] && farms[0].eggPerBlock) {\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Milk Stats')}\n        </Heading>\t\t\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        \n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n\t\t<Row>\n          <Text fontSize=\"14px\">{TranslateString(10016, 'Max Transaction')}</Text>\n          <Text bold fontSize=\"14px\">\n\t\t  {maxTransferAmount && <CardValue fontSize=\"14px\" value={maxTransferAmount} decimals={2} />}\n          \n          </Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'Milk/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {eggPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Text } from 'cashcow-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading as=\"h1\" size=\"xl\">\n          {TranslateString(10014, 'Total Value Locked')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(10015, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'cashcow-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\" style={{textAlign: 'left'}}>\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'cash_milk',\n\t\t\t\n          }}\n          options={{\n\t\t\ttweetLimit: '1',\n            height: '240',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n\t\t  \n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled, { useTheme } from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'cashcow-uikit'\nimport Page from 'components/layout/Page'\nimport useI18n from 'hooks/useI18n'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\n\nconst Hero = styled.div`\n  align-items: center;\n  {/* background-image: url('/images/cow/1-home.png'); */}\n  background-repeat: no-repeat;\n  background-position: top center;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;  \n {/* padding-top: 116px;  */}\n  text-align: center;\n {/* height: 175px;  */}\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n\t {/* background-image: url('/images/cow/2milkgenerator.png'), url('/images/cow/2bottle.png'), url('/images/cow/2cowdrinkmilk.png'); */}\n    background-position: left center, center bottom, right center;\n    height: 300px, 185px, 185px;  \n    width:  300px, 185px, 185px;\n    margin-right: 3%;\n    margin-left: 3%;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }  \n`\n\nconst Home: React.FC = () => {\nconst TranslateString = useI18n()\n  const {isDark}=useTheme(); \n\n  return (\n    <Page\n      style={{\n              \n      }}\n    >\n      <Hero>\n\t  <Heading as=\"h1\" size=\"lg\" color=\"text\" mb=\"25px\" style={{ textAlign: 'center' }}>\n        \n\t\t{TranslateString(730,'Cash Milk Finance on BNB Chain' )}\n        </Heading> \n\t\t\n\t\t<Heading as=\"h4\" color=\"text\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        \n\t\t{TranslateString(731,'New Era Finance: Defi vs NFTs' )}\n        </Heading> \n\t\t</Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}